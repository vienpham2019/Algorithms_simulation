{"ast":null,"code":"import _toConsumableArray from\"/Users/vienpham/Desktop/Algorithms_simulation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{Block}from'../helper_method';import{get_top_right_bottom_left}from'./helper_method/algorithms_helper_method';var c,canvas,size,nodes,start_node,end_node;var visited_nodes,stack,current_node,finish_path,myReq;var depth_first_search=function depth_first_search(props){c=props.c;canvas=props.canvas;size=props.size;nodes=props.nodes;finish_path=false;start_node=props.start_node;end_node=props.end_node;end_node.prev_node=null;stack=[start_node];visited_nodes=[start_node];current_node=start_node;stack.push(start_node);cancelAnimationFrame(myReq);run_solve_maze();};var stop_depth_first_search=function stop_depth_first_search(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}for(var _i=0;_i<visited_nodes.length;_i++){if(!end_node.prev_node){visited_nodes[_i].color='MediumBlue';}visited_nodes[_i].draw();}if(!end_node.prev_node){for(var _i2=0;_i2<stack.length;_i2++){stack[_i2].color='LightSkyBlue';stack[_i2].draw();}}if(stack.length>0&&!end_node.prev_node){current_node=stack[0];if(!check_neighbor_node()){stack.shift();}}if(end_node.prev_node){start_node.draw();end_node.draw();find_path();}if(finish_path||!stack.length){cancelAnimationFrame(myReq);}};var find_path=function find_path(){current_node.color=\"LimeGreen\";if(current_node.x===start_node.x&&current_node.y===start_node.y){finish_path=true;return;}current_node=current_node.prev_node;};var check_neighbor_node=function check_neighbor_node(){var _current_node=current_node,x=_current_node.x,y=_current_node.y;// block \n// let color = \"MidnightBlue\"\nvar current_find_node=nodes.find(function(c_n){return c_n.x===x&&c_n.y===y;});var _get_top_right_bottom=get_top_right_bottom_left(current_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// bottom\nif(add_node(bottom,current_find_node,2))return true;// right\nif(add_node(right,current_find_node,1))return true;// top \nif(add_node(top,current_find_node,0))return true;// left \nif(add_node(left,current_find_node,3))return true;return false;};var add_node=function add_node(neighbor_node,current_find_node,wall_num){var color='MediumBlue';if(neighbor_node&&!current_find_node.walls[wall_num]&&!visited_nodes.find(function(n){return n.x===neighbor_node.x&&n.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;if(x===end_node.x&&y===end_node.y){end_node.prev_node=current_node;}else{var new_block=new Block(x,y,c,size,color,current_node);stack=[new_block].concat(_toConsumableArray(stack));visited_nodes.push(new_block);}return true;}return false;};export{depth_first_search,stop_depth_first_search};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/solve_maze/depth_first_search.js"],"names":["Block","get_top_right_bottom_left","c","canvas","size","nodes","start_node","end_node","visited_nodes","stack","current_node","finish_path","myReq","depth_first_search","props","prev_node","push","cancelAnimationFrame","run_solve_maze","stop_depth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","color","check_neighbor_node","shift","find_path","x","y","current_find_node","find","c_n","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","n","new_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet c , canvas , size ,  nodes , start_node , end_node \n    \nlet visited_nodes , stack , current_node ,  finish_path , myReq\n\nconst depth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    nodes = props.nodes \n\n    finish_path = false  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    end_node.prev_node = null\n\n    stack = [start_node]\n    visited_nodes = [start_node]\n    current_node = start_node \n\n    stack.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_depth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < visited_nodes.length; i ++){\n        if(!end_node.prev_node){\n            visited_nodes[i].color = 'MediumBlue' \n        }\n        visited_nodes[i].draw()\n    }\n\n    if(!end_node.prev_node){\n        for(let i = 0 ; i < stack.length ; i ++){\n            stack[i].color = 'LightSkyBlue' \n            stack[i].draw()\n        }\n    }\n\n    if(stack.length > 0 && !end_node.prev_node){\n        current_node = stack[0]\n        if(!check_neighbor_node()){\n            stack.shift()\n        }\n    }\n\n    if(end_node.prev_node){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n\n    if(finish_path || !stack.length){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nconst check_neighbor_node = () => {\n    let {x , y} = current_node // block \n    // let color = \"MidnightBlue\"\n    let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y )\n    let {top , right , bottom , left } = get_top_right_bottom_left(current_node , nodes , size)\n\n    // bottom\n    if(add_node(bottom , current_find_node , 2)) return true \n\n    // right\n    if(add_node(right , current_find_node , 1)) return true \n\n    // top \n    if(add_node(top , current_find_node , 0)) return true \n\n    // left \n    if(add_node(left , current_find_node , 3)) return true \n\n    return false \n}\n\nconst add_node = (neighbor_node , current_find_node , wall_num) => {\n    let color = 'MediumBlue'\n    if(\n        neighbor_node \n        && !current_find_node.walls[wall_num] \n        && !visited_nodes.find(n => n.x === neighbor_node.x  && n.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        if(x === end_node.x && y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let new_block = new Block(x, y, c , size ,color , current_node)\n            stack = [new_block,...stack]\n            visited_nodes.push(new_block)\n        }\n        return true \n    }\n    return false \n}\n\nexport { depth_first_search ,  stop_depth_first_search}"]},"metadata":{},"sourceType":"module"}