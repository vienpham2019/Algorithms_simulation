{"ast":null,"code":"import{Block}from'../helper_method';import{get_top_right_bottom_left}from'./helper_method/algorithms_helper_method';var start_node,end_node,nodes,c,canvas,size;var open_list,close_list,current_node,myReq,finish_path;var greedy_best_first_search=function greedy_best_first_search(props){start_node=props.start_node;end_node=props.end_node;nodes=props.nodes;c=props.c;canvas=props.canvas;size=props.size;end_node.prev_node=null;open_list=[start_node];close_list=[];current_node=null;finish_path=false;cancelAnimationFrame(myReq);run_solve_maze();};var stop_greedy_best_first_search=function stop_greedy_best_first_search(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}for(var _i=0;_i<close_list.length;_i++){if(!end_node.prev_node){close_list[_i].color='MediumBlue';}close_list[_i].draw();}for(var _i2=0;_i2<open_list.length;_i2++){open_list[_i2].color='LightSkyBlue';open_list[_i2].draw();}if(current_node&&end_node.x===current_node.x&&end_node.y===current_node.y){end_node.prev_node=current_node.prev_node;}if(open_list.length>0&&!end_node.prev_node){// h is the distance between current node to end node \ncurrent_node=open_list.sort(function(a,b){return a.h-b.h;})[0];close_list.push(current_node);find_child_node();}if(end_node.prev_node){start_node.draw();end_node.draw();find_path();}if(finish_path||!open_list.length){cancelAnimationFrame(myReq);}};var find_child_node=function find_child_node(){var _get_top_right_bottom=get_top_right_bottom_left(current_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// right (x + size , y)\nadd_node(right,3);// top (x , y - size)\nadd_node(top,2);// left (x - size , y )\nadd_node(left,1);// bottom (x , y + size)\nadd_node(bottom,0);open_list=open_list.filter(function(node){return node.x===current_node.x&&node.y===current_node.y?false:true;});};var add_node=function add_node(neighbor_node,wall_num){if(neighbor_node&&!neighbor_node.walls[wall_num]&&!close_list.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;var node_in_open=open_list.find(function(n){return n.x===x&&n.y===y;});if(!node_in_open)open_list.push(set_node(neighbor_node));}};var find_path=function find_path(){current_node.color=\"LimeGreen\";if(current_node.x===start_node.x&&current_node.y===start_node.y){finish_path=true;return;}current_node=current_node.prev_node;return;};var set_node=function set_node(node){var color='MediumBlue';var x_1=node.x;var y_1=node.y;var x_2=end_node.x;var y_2=end_node.y;var h=(Math.abs(x_1-x_2)+Math.abs(y_1-y_2))*size;var new_node=new Block(x_1,y_1,c,size,color,current_node,null,h);return new_node;};export{greedy_best_first_search,stop_greedy_best_first_search};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/solve_maze/greedy_best_first_search.js"],"names":["Block","get_top_right_bottom_left","start_node","end_node","nodes","c","canvas","size","open_list","close_list","current_node","myReq","finish_path","greedy_best_first_search","props","prev_node","cancelAnimationFrame","run_solve_maze","stop_greedy_best_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","sort","a","b","h","push","find_child_node","find_path","top","right","bottom","left","add_node","filter","node","neighbor_node","wall_num","walls","find","node_in_open","n","set_node","x_1","y_1","x_2","y_2","Math","abs","new_node"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list , close_list , current_node , myReq , finish_path\n\nconst greedy_best_first_search = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    end_node.prev_node = null\n    \n    open_list = [start_node]\n    close_list = []\n    current_node = null \n    finish_path = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_greedy_best_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!end_node.prev_node){\n            close_list[i].color = 'MediumBlue'\n        }\n        close_list[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list.length ; i ++){\n        open_list[i].color = 'LightSkyBlue' \n        open_list[i].draw()\n    }\n\n    if(current_node && end_node.x === current_node.x && end_node.y === current_node.y){\n        end_node.prev_node = current_node.prev_node\n    }\n\n    if(open_list.length > 0 && !end_node.prev_node){\n        // h is the distance between current node to end node \n        current_node = open_list.sort((a,b) => a.h - b.h)[0] \n        close_list.push(current_node)\n        find_child_node()\n    }\n\n    if(end_node.prev_node){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n    if(finish_path || !open_list.length){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node , nodes , size)\n\n    // right (x + size , y)\n    add_node(right , 3)\n\n    // top (x , y - size)\n    add_node(top , 2)\n\n    // left (x - size , y )\n    add_node(left , 1)\n\n    // bottom (x , y + size)\n    add_node(bottom , 0)\n\n    open_list = open_list.filter(node => node.x === current_node.x && node.y === current_node.y ? false : true )\n}\n\nconst add_node = (neighbor_node , wall_num) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        &&!close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        if(!node_in_open) open_list.push(set_node(neighbor_node))\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n    return \n}\n\nconst set_node = (node) => {\n    let color = 'MediumBlue'\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = end_node.x \n    let y_2 = end_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size\n    let new_node = new Block(x_1 , y_1 , c , size , color , current_node , null , h )\n    return new_node \n}\n\nexport {greedy_best_first_search , stop_greedy_best_first_search}"]},"metadata":{},"sourceType":"module"}