{"ast":null,"code":"let steps = [];\n\nconst merge_sort = array => {\n  if (array.length === 1) return array;\n  const midd = Math.floor(array.length / 2);\n  const left_arr = array.slice(0, midd);\n  const right_arr = array.slice(midd, array.length);\n  let merge_array = merge(merge_sort(left_arr), merge_sort(right_arr));\n\n  if (merge_array.length === 100) {\n    console.log(steps);\n  }\n\n  return merge_array;\n};\n\nconst merge = (left_array, right_array) => {\n  let sort_array = [];\n\n  while (left_array.length && right_array.length) {\n    if (left_array[0].height < right_array[0].height) {\n      let left_node = left_array.shift();\n      let right_node = right_array[0];\n      let index = left_node.index;\n      left_node.index = right_node.index;\n      right_node.index = index;\n      sort_array.push(left_node);\n      steps.push(left_node);\n    } else {\n      let right_node = right_array.shift();\n      let left_node = left_array[0];\n      let index = right_node.index;\n      right_node.index = left_node.index;\n      left_node.index = index;\n      sort_array.push(right_node);\n      steps.push(right_node);\n    }\n  }\n\n  while (left_array.length) {\n    let node = left_array.shift();\n    sort_array.push(node);\n    steps.push(node);\n  }\n\n  while (right_array.length) {\n    let node = right_array.shift();\n    sort_array.push(node);\n    steps.push(node);\n  }\n\n  return sort_array;\n};\n\nexport default merge_sort;","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/mergeSort.js"],"names":["steps","merge_sort","array","length","midd","Math","floor","left_arr","slice","right_arr","merge_array","merge","console","log","left_array","right_array","sort_array","height","left_node","shift","right_node","index","push","node"],"mappings":"AAAA,IAAIA,KAAK,GAAG,EAAZ;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACxB,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAuB,OAAOD,KAAP;AAEvB,QAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAb;AACA,QAAMI,QAAQ,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAcJ,IAAd,CAAjB;AACA,QAAMK,SAAS,GAAGP,KAAK,CAACM,KAAN,CAAYJ,IAAZ,EAAkBF,KAAK,CAACC,MAAxB,CAAlB;AAEA,MAAIO,WAAW,GAAGC,KAAK,CAACV,UAAU,CAACM,QAAD,CAAX,EAAuBN,UAAU,CAACQ,SAAD,CAAjC,CAAvB;;AACA,MAAGC,WAAW,CAACP,MAAZ,KAAuB,GAA1B,EAA8B;AAC1BS,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACH;;AACD,SAAOU,WAAP;AACD,CAZH;;AAcE,MAAMC,KAAK,GAAG,CAACG,UAAD,EAAaC,WAAb,KAA6B;AACzC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,SAAMF,UAAU,CAACX,MAAX,IAAqBY,WAAW,CAACZ,MAAvC,EAA8C;AAC5C,QAAGW,UAAU,CAAC,CAAD,CAAV,CAAcG,MAAd,GAAuBF,WAAW,CAAC,CAAD,CAAX,CAAeE,MAAzC,EAAgD;AAC9C,UAAIC,SAAS,GAAGJ,UAAU,CAACK,KAAX,EAAhB;AACA,UAAIC,UAAU,GAAGL,WAAW,CAAC,CAAD,CAA5B;AACA,UAAIM,KAAK,GAAGH,SAAS,CAACG,KAAtB;AACAH,MAAAA,SAAS,CAACG,KAAV,GAAkBD,UAAU,CAACC,KAA7B;AACAD,MAAAA,UAAU,CAACC,KAAX,GAAmBA,KAAnB;AACAL,MAAAA,UAAU,CAACM,IAAX,CAAgBJ,SAAhB;AACAlB,MAAAA,KAAK,CAACsB,IAAN,CAAWJ,SAAX;AACD,KARD,MAQK;AACH,UAAIE,UAAU,GAAGL,WAAW,CAACI,KAAZ,EAAjB;AACA,UAAID,SAAS,GAAGJ,UAAU,CAAC,CAAD,CAA1B;AACA,UAAIO,KAAK,GAAGD,UAAU,CAACC,KAAvB;AACAD,MAAAA,UAAU,CAACC,KAAX,GAAmBH,SAAS,CAACG,KAA7B;AACAH,MAAAA,SAAS,CAACG,KAAV,GAAkBA,KAAlB;AACAL,MAAAA,UAAU,CAACM,IAAX,CAAgBF,UAAhB;AACApB,MAAAA,KAAK,CAACsB,IAAN,CAAWF,UAAX;AACD;AACF;;AAED,SAAMN,UAAU,CAACX,MAAjB,EAAyB;AACrB,QAAIoB,IAAI,GAAGT,UAAU,CAACK,KAAX,EAAX;AACAH,IAAAA,UAAU,CAACM,IAAX,CAAgBC,IAAhB;AACAvB,IAAAA,KAAK,CAACsB,IAAN,CAAWC,IAAX;AACH;;AACD,SAAMR,WAAW,CAACZ,MAAlB,EAA0B;AACtB,QAAIoB,IAAI,GAAGR,WAAW,CAACI,KAAZ,EAAX;AACAH,IAAAA,UAAU,CAACM,IAAX,CAAgBC,IAAhB;AACAvB,IAAAA,KAAK,CAACsB,IAAN,CAAWC,IAAX;AACH;;AACD,SAAOP,UAAP;AACD,CAlCD;;AAoCF,eAAef,UAAf","sourcesContent":["let steps = []\n\nconst merge_sort = array => {\n    if(array.length === 1) return array \n  \n    const midd = Math.floor(array.length / 2)\n    const left_arr = array.slice(0,midd)\n    const right_arr = array.slice(midd, array.length)\n  \n    let merge_array = merge(merge_sort(left_arr), merge_sort(right_arr))\n    if(merge_array.length === 100){\n        console.log(steps)\n    }\n    return merge_array\n  }\n  \n  const merge = (left_array, right_array) => {\n    let sort_array = []\n  \n    while(left_array.length && right_array.length){\n      if(left_array[0].height < right_array[0].height){\n        let left_node = left_array.shift()\n        let right_node = right_array[0]\n        let index = left_node.index\n        left_node.index = right_node.index\n        right_node.index = index\n        sort_array.push(left_node)\n        steps.push(left_node)\n      }else{\n        let right_node = right_array.shift()\n        let left_node = left_array[0]\n        let index = right_node.index\n        right_node.index = left_node.index\n        left_node.index = index\n        sort_array.push(right_node)\n        steps.push(right_node)\n      }\n    }\n  \n    while(left_array.length) {\n        let node = left_array.shift()\n        sort_array.push(node)\n        steps.push(node)\n    }\n    while(right_array.length) {\n        let node = right_array.shift()\n        sort_array.push(node)\n        steps.push(node)\n    } \n    return sort_array\n  }\n\nexport default merge_sort"]},"metadata":{},"sourceType":"module"}