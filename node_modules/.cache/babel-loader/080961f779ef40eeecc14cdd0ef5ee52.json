{"ast":null,"code":"import { Block } from '../helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list_1, close_list_1, current_node_1, open_list_2, close_list_2, current_node_2, myReq, finish_path, find_sorted_path;\n\nconst bidirectional_dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = start_node;\n  current_node_2 = end_node;\n  finish_path = false;\n  find_sorted_path = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < close_list_1.length; i++) {\n    if (!find_sorted_path) {\n      close_list_1[i].color = 'MidnightBlue';\n    }\n\n    close_list_1[i].draw();\n  }\n\n  for (let i = 0; i < open_list_1.length; i++) {\n    open_list_1[i].color = 'DeepSkyBlue';\n    open_list_1[i].draw();\n  }\n\n  for (let i = 0; i < close_list_2.length; i++) {\n    if (!find_sorted_path) {\n      close_list_2[i].color = 'MidnightBlue';\n    }\n\n    close_list_2[i].draw();\n  }\n\n  for (let i = 0; i < open_list_2.length; i++) {\n    open_list_2[i].color = 'DeepSkyBlue';\n    open_list_2[i].draw();\n  }\n\n  if (current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y) {\n    find_sorted_path = true;\n    finish_path = true;\n  }\n\n  if (open_list_1.length > 0 && !find_sorted_path) {\n    current_node_1 = open_list_1.sort((a, b) => a.distance - b.distance)[0];\n    close_list_1.push(current_node_1);\n    find_child_node(current_node_1, open_list_1, close_list_1);\n  }\n\n  if (open_list_2.length > 0 && !find_sorted_path) {\n    current_node_2 = open_list_2.sort((a, b) => a.distance - b.distance)[0];\n    close_list_2.push(current_node_2);\n    find_child_node(current_node_2, open_list_2, close_list_2);\n  } // if(find_sorted_path){\n  //     // start_node.draw()\n  //     // end_node.draw()\n  //     // find_path() \n  //     finish_path = true \n  // }\n\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = (c_node, open_list_array, close_list_array) => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list_array.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list_array.find(n => n.x === right.x && n.y === right.y);\n    right_in_open ? update_node(right_in_open, c_node) : open_list_array.push(create_new_node(right, c_node));\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list_array.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list_array.find(n => n.x === top.x && n.y === top.y);\n    top_in_open ? update_node(top_in_open, c_node) : open_list_array.push(create_new_node(top, c_node));\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list_array.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list_array.find(n => n.x === left.x && n.y === left.y);\n    left_in_open ? update_node(left_in_open, c_node) : open_list_array.push(create_new_node(left, c_node));\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list_array.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list_array.find(n => n.x === bottom.x && n.y === bottom.y);\n    bottom_in_open ? update_node(bottom_in_open, c_node) : open_list_array.push(create_new_node(bottom, c_node));\n  }\n\n  open_list_array = open_list_array.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true);\n}; // const find_path = () => {\n//     current_node.color = \"LimeGreen\"\n//     if(current_node.x === start_node.x && current_node.y === start_node.y){\n//         finish_path = true\n//         return\n//     }\n//     current_node = current_node.prev_node\n//     return \n// }\n\n\nconst create_new_node = (node, c_node) => {\n  let distance = find_distance(node, c_node);\n  return new Block(node.x, node.y, c, size, 'MidnightBlue', c_node, null, null, null, distance);\n};\n\nconst find_distance = (node, c_node) => {\n  // find distance from current node to next node \n  let x_1 = c_node.x;\n  let y_1 = c_node.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + c_node.distance;\n};\n\nconst update_node = (node, c_node) => {\n  if (c_node.distance + size < node.distance) {\n    node.distance = find_distance(node, c_node);\n  }\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nexport { bidirectional_dijkstra, stop_bidirectional_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","start_node","end_node","nodes","c","canvas","size","open_list_1","close_list_1","current_node_1","open_list_2","close_list_2","current_node_2","myReq","finish_path","find_sorted_path","bidirectional_dijkstra","props","distance","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","sort","a","b","push","find_child_node","c_node","open_list_array","close_list_array","top","right","bottom","left","get_top_right_bottom_left","walls","find","node","right_in_open","n","update_node","create_new_node","top_in_open","left_in_open","bottom_in_open","filter","find_distance","x_1","y_1","x_2","y_2","Math","abs","array"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list_1 , close_list_1 , current_node_1 , open_list_2 , close_list_2 , current_node_2 , myReq , finish_path , find_sorted_path\n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n    \n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = start_node\n    current_node_2 = end_node\n\n    finish_path = false \n    find_sorted_path = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list_1.length ; i ++){\n        if(!find_sorted_path){\n            close_list_1[i].color = 'MidnightBlue'\n        }\n        close_list_1[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_1.length ; i ++){\n        open_list_1[i].color = 'DeepSkyBlue'\n        open_list_1[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list_2.length ; i ++){\n        if(!find_sorted_path){\n            close_list_2[i].color = 'MidnightBlue'\n        }\n        close_list_2[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_2.length ; i ++){\n        open_list_2[i].color = 'DeepSkyBlue'\n        open_list_2[i].draw()\n    }\n\n    if(current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y){\n        find_sorted_path = true \n        finish_path = true \n    }\n\n    if(open_list_1.length > 0 && !find_sorted_path){\n        current_node_1 = open_list_1.sort((a,b) => a.distance - b.distance)[0] \n        close_list_1.push(current_node_1)\n        find_child_node(current_node_1 , open_list_1 , close_list_1)\n    }\n\n    if(open_list_2.length > 0 && !find_sorted_path){\n        current_node_2 = open_list_2.sort((a,b) => a.distance - b.distance)[0] \n        close_list_2.push(current_node_2)\n        find_child_node(current_node_2 , open_list_2 , close_list_2)\n    }\n\n    // if(find_sorted_path){\n    //     // start_node.draw()\n    //     // end_node.draw()\n    //     // find_path() \n    //     finish_path = true \n    // }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = (c_node, open_list_array , close_list_array) => {\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes )\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list_array.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list_array.find(n => n.x === right.x  && n.y === right.y)\n\n        right_in_open ? update_node(right_in_open , c_node) : open_list_array.push(create_new_node(right , c_node))\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list_array.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list_array.find(n => n.x === top.x  && n.y === top.y)\n\n        top_in_open ? update_node(top_in_open , c_node) : open_list_array.push(create_new_node(top , c_node))\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list_array.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list_array.find(n => n.x === left.x  && n.y === left.y)\n        \n        left_in_open ? update_node(left_in_open , c_node) : open_list_array.push(create_new_node(left , c_node))\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list_array.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list_array.find(n => n.x === bottom.x  && n.y === bottom.y)\n        \n        bottom_in_open ? update_node(bottom_in_open , c_node) : open_list_array.push(create_new_node(bottom , c_node))\n    }\n\n    open_list_array = open_list_array.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true )\n}\n\n// const find_path = () => {\n//     current_node.color = \"LimeGreen\"\n//     if(current_node.x === start_node.x && current_node.y === start_node.y){\n//         finish_path = true\n//         return\n//     }\n//     current_node = current_node.prev_node\n//     return \n// }\n\nconst create_new_node = (node , c_node) => {\n    let distance = find_distance(node , c_node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , c_node , null , null , null , distance)\n}\n\nconst find_distance = (node , c_node) => {\n    // find distance from current node to next node \n    let x_1 = c_node.x \n    let y_1 = c_node.y \n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + c_node.distance\n}\n\nconst update_node = (node, c_node) => {\n    if(c_node.distance + size < node.distance){\n        node.distance = find_distance(node , c_node)\n    }\n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}