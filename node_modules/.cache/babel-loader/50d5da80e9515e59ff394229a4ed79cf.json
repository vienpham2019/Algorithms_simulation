{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left, add_to_heap, remove_from_heap } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list, close_list, current_node, myReq, finish_path;\n\nconst dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  end_node.prev_node = null;\n  open_list = [start_node];\n  close_list = [];\n  current_node = null;\n  finish_path = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!end_node.prev_node) {\n      close_list[i].color = 'MediumBlue';\n    }\n\n    close_list[i].draw();\n  }\n\n  for (let i = 0; i < open_list.length; i++) {\n    open_list[i].color = 'LightSkyBlue';\n    open_list[i].draw();\n  }\n\n  if (current_node && end_node.x === current_node.x && end_node.y === current_node.y) {\n    end_node.prev_node = current_node.prev_node;\n  }\n\n  if (open_list.length > 0 && !end_node.prev_node) {\n    // current_node = open_list.sort((a,b) => a.distance - b.distance)[0] \n    current_node = open_list[0];\n    close_list.push(current_node);\n    find_child_node();\n  }\n\n  if (end_node.prev_node) {\n    start_node.draw();\n    end_node.draw();\n    find_path();\n  }\n\n  if (finish_path || open_list.length === 0) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = () => {\n  open_list = remove_from_heap(open_list, (a, b) => a.distance < b.distance);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_node, nodes, size); // right (x + size , y)\n\n  add_node(right, 3); // top (x , y - size)\n\n  add_node(top, 2); // left (x - size , y )\n\n  add_node(left, 1); // bottom (x , y + size)\n\n  add_node(bottom, 0);\n  open_list = open_list.filter(node => node.x === current_node.x && node.y === current_node.y ? false : true);\n};\n\nconst add_node = (neighbor_node, wall_num) => {\n  if (neighbor_node && !neighbor_node.walls[wall_num] && !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n    let node_in_open = open_list.find(n => n.x === x && n.y === y);\n\n    if (node_in_open) {\n      update_node(node_in_open);\n    } else {\n      let new_node = create_new_node(neighbor_node);\n      open_list = add_to_heap(new_node, open_list, (a, b) => a.distance < b.distance);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"LimeGreen\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n  return;\n};\n\nconst create_new_node = node => {\n  let distance = find_distance(node);\n  return new Block(node.x, node.y, c, size, 'MediumBlue', current_node, null, null, null, distance);\n};\n\nconst find_distance = node => {\n  // find distance from current node to next node \n  let x_1 = current_node.x;\n  let y_1 = current_node.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + current_node.distance;\n};\n\nconst update_node = node => {\n  if (current_node.distance + size < node.distance) {\n    node.distance = find_distance(node);\n  }\n};\n\nexport { dijkstra, stop_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/src/Algorithms/solve_maze/dijkstra.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","open_list","close_list","current_node","myReq","finish_path","dijkstra","props","distance","prev_node","cancelAnimationFrame","run_solve_maze","stop_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","push","find_child_node","find_path","a","b","top","right","bottom","left","add_node","filter","node","neighbor_node","wall_num","walls","find","node_in_open","n","update_node","new_node","create_new_node","find_distance","x_1","y_1","x_2","y_2","Math","abs"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\n\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list , close_list , current_node , myReq , finish_path\n\nconst dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    end_node.prev_node = null\n    \n    open_list = [start_node]\n    close_list = []\n    current_node = null \n    finish_path = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!end_node.prev_node){\n            close_list[i].color = 'MediumBlue'\n        }\n        close_list[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list.length ; i ++){\n        open_list[i].color = 'LightSkyBlue' \n        open_list[i].draw()\n    }\n\n    if(current_node && end_node.x === current_node.x && end_node.y === current_node.y){\n        end_node.prev_node = current_node.prev_node\n    }\n\n    if(open_list.length > 0 && !end_node.prev_node){\n        // current_node = open_list.sort((a,b) => a.distance - b.distance)[0] \n        current_node = open_list[0] \n        close_list.push(current_node)\n        find_child_node()\n    }\n\n    if(end_node.prev_node){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n\n    if(finish_path || open_list.length === 0){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n    open_list = remove_from_heap(open_list , (a,b) => a.distance < b.distance)\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node , nodes , size)\n\n    // right (x + size , y)\n    add_node(right , 3)\n\n    // top (x , y - size)\n    add_node(top , 2)\n\n    // left (x - size , y )\n    add_node(left , 1)\n\n    // bottom (x , y + size)\n    add_node(bottom , 0)\n\n    open_list = open_list.filter(node => node.x === current_node.x && node.y === current_node.y ? false : true )\n}\n\nconst add_node = (neighbor_node , wall_num) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        &&!close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        \n        if(node_in_open){\n            update_node(node_in_open)\n        }else{\n            let new_node = create_new_node(neighbor_node)\n            open_list = add_to_heap(new_node , open_list , (a,b) => a.distance < b.distance)\n        }\n            \n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n    return \n}\n\nconst create_new_node = (node) => {\n    let distance = find_distance(node)\n    return new Block(node.x , node.y , c , size , 'MediumBlue' , current_node , null , null , null , distance)\n}\n\nconst find_distance = (node) => {\n    // find distance from current node to next node \n    let x_1 = current_node.x \n    let y_1 = current_node.y \n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + current_node.distance\n}\n\nconst update_node = node => {\n    if(current_node.distance + size < node.distance){\n        node.distance = find_distance(node)\n    }\n}\n\nexport {dijkstra , stop_dijkstra}"]},"metadata":{},"sourceType":"module"}