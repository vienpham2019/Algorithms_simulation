{"ast":null,"code":"import _toConsumableArray from\"/Users/vienpham/Desktop/Algorithms_simulation/algorithms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{Block}from'../helper_method';import{get_top_right_bottom_left}from'./helper_method/algorithms_helper_method';var c,canvas,size,nodes,start_node,end_node;var visited_nodes,quere,current_node,finish_path,myReq;var breadth_first_search=function breadth_first_search(props){c=props.c;canvas=props.canvas;size=props.size;visited_nodes=[];nodes=props.nodes;quere=[];finish_path=false;current_node=null;start_node=props.start_node;end_node=props.end_node;end_node.prev_node=null;quere.push(start_node);cancelAnimationFrame(myReq);run_solve_maze();};var stop_breadth_first_search=function stop_breadth_first_search(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}for(var _i=0;_i<visited_nodes.length;_i++){visited_nodes[_i].draw();}if(end_node.prev_node&&!finish_path){find_path();}if(finish_path||!quere.length){cancelAnimationFrame(myReq);}if(!end_node.prev_node&&!finish_path){solve_maze();}};var solve_maze=function solve_maze(){var quere_nodes=_toConsumableArray(quere);quere.shift();// visited_nodes_for_path.push(current_node)\nif(end_node.prev_node){return;}for(var i=0;i<quere_nodes.length;i++){check_neighbor_node(quere_nodes[i]);}};var check_neighbor_node=function check_neighbor_node(node){var current_find_node=nodes.find(function(c_n){return c_n.x===node.x&&c_n.y===node.y;});var _get_top_right_bottom=get_top_right_bottom_left(node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// top \nadd_node(top,node,0,current_find_node);// right\nadd_node(right,node,1,current_find_node);// bottom\nadd_node(bottom,node,2,current_find_node);// left \nadd_node(left,node,3,current_find_node);};var add_node=function add_node(neighbor_node,node,wall_num,current_find_node){var color='MediumBlue';if(neighbor_node&&!current_find_node.walls[wall_num]&&!visited_nodes.find(function(n){return n.x===neighbor_node.x&&n.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;if(x===end_node.x&&y===end_node.y){end_node.prev_node=node;current_node=node;}else{var new_block=new Block(x,y,c,size,color,node);quere.push(new_block);visited_nodes.push(new_block);}}return;};var find_path=function find_path(){current_node.color=\"LimeGreen\";if(!current_node.prev_node){finish_path=true;}current_node=current_node.prev_node;};export{breadth_first_search,stop_breadth_first_search};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/breadth_first_search.js"],"names":["Block","get_top_right_bottom_left","c","canvas","size","nodes","start_node","end_node","visited_nodes","quere","current_node","finish_path","myReq","breadth_first_search","props","prev_node","push","cancelAnimationFrame","run_solve_maze","stop_breadth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","find_path","solve_maze","quere_nodes","shift","check_neighbor_node","node","current_find_node","find","c_n","x","y","top","right","bottom","left","add_node","neighbor_node","wall_num","color","walls","n","new_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet c , canvas , size , nodes , start_node , end_node \n    \nlet visited_nodes ,  quere , current_node , finish_path , myReq\n\nconst breadth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    visited_nodes = []\n    nodes = props.nodes \n\n    quere = []\n    finish_path = false \n    current_node = null  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    end_node.prev_node = null\n\n    quere.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_breadth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < visited_nodes.length; i ++){\n        visited_nodes[i].draw()\n    }\n\n    if(end_node.prev_node && !finish_path){\n        find_path()\n    }\n    \n    if(finish_path || !quere.length){\n        cancelAnimationFrame(myReq)\n    }\n    if(!end_node.prev_node && !finish_path){\n        solve_maze()\n    }\n}\n  \nconst solve_maze = () => {\n    let quere_nodes = [...quere]\n    quere.shift()\n    // visited_nodes_for_path.push(current_node)\n    if(end_node.prev_node){\n        return\n    }\n    for(let i = 0; i < quere_nodes.length ; i ++){\n        check_neighbor_node(quere_nodes[i])\n    }\n}\n  \nconst check_neighbor_node = (node) => {\n    let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y )\n    let { top , right , bottom , left } = get_top_right_bottom_left(node , nodes , size)\n    // top \n    add_node(top , node , 0 , current_find_node)\n\n    // right\n    add_node(right , node , 1 , current_find_node)\n\n    // bottom\n    add_node(bottom , node , 2 , current_find_node)\n\n    // left \n    add_node(left , node , 3 , current_find_node)\n}\n\nconst add_node = (neighbor_node , node , wall_num , current_find_node) => {\n    let color = 'MediumBlue' \n    if(neighbor_node && !current_find_node.walls[wall_num] && !visited_nodes.find(n => n.x === neighbor_node.x && n.y === neighbor_node.y)){\n        let {x , y} = neighbor_node\n        if(x === end_node.x && y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n        }else{\n            let new_block = new Block(x, y , c , size , color, node)\n            quere.push(new_block)\n            visited_nodes.push(new_block)\n        }\n    }\n    return \n}\n  \nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(!current_node.prev_node){\n        finish_path = true\n    }\n    current_node = current_node.prev_node\n}\n\nexport { breadth_first_search ,  stop_breadth_first_search}\n\n"]},"metadata":{},"sourceType":"module"}