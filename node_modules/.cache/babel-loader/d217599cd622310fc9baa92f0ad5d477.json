{"ast":null,"code":"var _jsxFileName = \"/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js\";\nimport React, { Component } from 'react';\nimport { setUp, run_solve_maze, update_info } from './Algorithms/mazeController';\nimport { connect } from 'react-redux';\nimport swal from '@sweetalert/with-react';\nlet select_start = false;\nlet select_end = false;\nlet select_wall = false;\nlet nodes;\nlet draw_grid;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.run_set_point = () => {\n      let canvas = this.refs.maze;\n      let rows = draw_grid ? 25 : this.state.rows;\n      let {\n        width\n      } = this.state;\n      let cols = Math.floor(rows * (window.innerWidth * .95 / (window.innerHeight * .9)));\n      let size = Math.floor(width / cols);\n      let {\n        offsetLeft,\n        offsetTop\n      } = canvas;\n      let start_location = {\n        x: offsetLeft + size / 2,\n        y: offsetTop + size / 2\n      };\n      let end_location = {\n        x: offsetLeft + ((cols - 1) * size + size / 2),\n        y: offsetTop + ((rows - 1) * size + size / 2)\n      };\n      this.setState({\n        start_location,\n        end_location\n      });\n      canvas.addEventListener('mousedown', e => {\n        let {\n          pageX,\n          pageY\n        } = e;\n        let x = Math.floor((pageX - offsetLeft) / size) * size + size / 2 + offsetLeft;\n        let y = Math.floor((pageY - offsetTop) / size) * size + size / 2 + offsetTop;\n\n        if (x < cols * size + offsetLeft && y < rows * size + offsetTop) {\n          if (select_end) {\n            console.log('new');\n            end_location = {\n              x,\n              y\n            };\n            this.setState({\n              end_location\n            });\n            update_info({\n              end_location: {\n                x: x - offsetLeft,\n                y: y - offsetTop\n              }\n            });\n          }\n\n          if (select_start) {\n            console.log('new');\n            start_location = {\n              x,\n              y\n            };\n            this.setState({\n              start_location\n            });\n            update_info({\n              start_location: {\n                x: x - offsetLeft,\n                y: y - offsetTop\n              }\n            });\n          }\n\n          if (select_wall) {\n            let current_wall = nodes.find(n => n.x === x - offsetLeft && n.y === y - offsetTop);\n            if (current_wall) console.log(current_wall); // current_wall.grid = true\n            // current_wall.walls = [!current_wall.walls[0] , !current_wall.walls[0] , !current_wall.walls[0] , !current_wall.walls[0]]\n          }\n        }\n      });\n    };\n\n    this.check_recursive_delay = value => {\n      this.setState({\n        dispay_draw_button: value\n      });\n    };\n\n    this.updateCanvas = (draw_maze = true) => {\n      // rows == min 15 and max 50\n      nodes = [];\n      let {\n        rows,\n        height,\n        width,\n        select_draw_algorithims\n      } = this.state;\n      let speed = this.props.speed[select_draw_algorithims][this.state.speed];\n\n      if (select_draw_algorithims === \"Recursive Division\") {\n        this.check_recursive_delay(false);\n      }\n\n      let cols = Math.floor(rows * (window.innerWidth * .95 / (window.innerHeight * .9)));\n      const canvas = this.refs.maze;\n      const c = canvas.getContext('2d');\n\n      if (rows < 15 || rows > 50) {\n        swal({\n          button: false,\n          content: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              color: 'black'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 13\n            }\n          }, \"Rows should be minimum 15 and maximum 50.\"))\n        });\n        return;\n      }\n\n      if (draw_maze) {\n        draw_grid = false;\n        nodes = setUp({\n          c,\n          canvas,\n          cols,\n          rows,\n          width,\n          height,\n          draw_maze,\n          select_draw_algorithims,\n          check_recursive_delay: this.check_recursive_delay,\n          speed\n        });\n      } else {\n        draw_grid = true;\n        let grid_rows = 25;\n        let grid_cols = Math.floor(grid_rows * (window.innerWidth * .95 / (window.innerHeight * .9)));\n        nodes = setUp({\n          c,\n          canvas,\n          cols: grid_cols,\n          rows: grid_rows,\n          width,\n          height,\n          draw_maze,\n          select_draw_algorithims: \"\",\n          check_recursive_delay: this.check_recursive_delay,\n          speed\n        });\n      }\n    };\n\n    this.state = {\n      width: window.innerWidth * .95,\n      height: window.innerHeight * .92,\n      select_draw_algorithims: \"Depth first search\",\n      select_solve_algorithims: \"A star\",\n      rows: 15,\n      dispay_draw_button: true,\n      speed: \"Normal\",\n      start_location: {\n        x: 40,\n        y: 170\n      },\n      end_location: {\n        x: 40,\n        y: 170\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas(false);\n    this.run_set_point();\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      select_solve_algorithims,\n      dispay_draw_button\n    } = this.state;\n    let {\n      draw_maze_algorithims,\n      solve_maze_algorithims\n    } = this.props;\n    let speed = [\"Slow\", \"Normal\", \"Fast\", \"Supper fast\"];\n    let start_x = this.state.start_location.x;\n    let start_y = this.state.start_location.y;\n    let end_x = this.state.end_location.x;\n    let end_y = this.state.end_location.y;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group p-2\",\n      style: {\n        minWidth: 600\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, \"Algorithms\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      style: {\n        minWidth: 250\n      },\n      onChange: e => this.setState({\n        select_draw_algorithims: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, draw_maze_algorithims.map(algorithm => /*#__PURE__*/React.createElement(\"option\", {\n      value: algorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, algorithm))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, \"Speed\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      style: {\n        maxWidth: 150\n      },\n      onChange: e => this.setState({\n        speed: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, speed.map(s => s === \"Normal\" ? /*#__PURE__*/React.createElement(\"option\", {\n      value: s,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 23\n      }\n    }, s) : /*#__PURE__*/React.createElement(\"option\", {\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 23\n      }\n    }, s))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, \"Size(rows)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      className: \"form-control\",\n      min: \"15\",\n      max: \"50\",\n      placeholder: \"Minimum 15 and Maximum 50\",\n      style: {\n        minWidth: 100\n      },\n      onChange: e => {\n        let rows = Math.floor(e.target.value);\n        this.setState({\n          rows\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, dispay_draw_button ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-light\",\n      type: \"submit\",\n      onClick: () => {\n        this.updateCanvas();\n        this.run_set_point();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, \"Generate Maze\") : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group p-2\",\n      style: {\n        maxWidth: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }\n    }, \"Algorithms\")), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      onChange: e => this.setState({\n        select_solve_algorithims: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, solve_maze_algorithims.map(algorithm => /*#__PURE__*/React.createElement(\"option\", {\n      value: algorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, algorithm))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-light\",\n      type: \"button\",\n      onClick: () => run_solve_maze(select_solve_algorithims),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, \"Solve Maze\"))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-outline-light m-2\",\n      type: \"button\",\n      onClick: () => {\n        this.updateCanvas(false);\n        this.run_set_point();\n      },\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \"Grid\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn m-2\",\n      style: {\n        color: select_start ? 'black' : 'white'\n      },\n      onClick: () => {\n        select_end = select_wall = false;\n        select_start = !select_start;\n        this.setState({});\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-star\",\n      style: {\n        color: select_start ? 'black' : 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }), \" Start Point\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn m-2\",\n      style: {\n        color: select_end ? 'black' : 'white'\n      },\n      onClick: () => {\n        select_start = select_wall = false;\n        select_end = !select_end;\n        this.setState({});\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-bullseye\",\n      style: {\n        color: select_end ? 'black' : 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }), \" End Point\"), draw_grid ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn m-2\",\n      style: {\n        color: select_wall ? 'black' : 'white'\n      },\n      onClick: () => {\n        select_start = select_end = false;\n        select_wall = !select_wall;\n        this.setState({});\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-square\",\n      style: {\n        color: select_wall ? 'black' : 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 15\n      }\n    }), \" Walls\") : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-star\",\n      style: {\n        position: \"absolute\",\n        width: 10,\n        height: 10,\n        top: start_y - 10,\n        left: start_x - 10,\n        backgroundColor: 'transparent'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-bullseye\",\n      style: {\n        position: \"absolute\",\n        width: 6,\n        height: 6,\n        top: end_y - 6,\n        left: end_x - 6,\n        backgroundColor: 'transparent'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"maze\",\n      style: {\n        width,\n        height\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    draw_maze_algorithims: state.draw_maze_algorithims,\n    solve_maze_algorithims: state.solve_maze_algorithims,\n    speed: state.speed\n  };\n};\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js"],"names":["React","Component","setUp","run_solve_maze","update_info","connect","swal","select_start","select_end","select_wall","nodes","draw_grid","App","constructor","run_set_point","canvas","refs","maze","rows","state","width","cols","Math","floor","window","innerWidth","innerHeight","size","offsetLeft","offsetTop","start_location","x","y","end_location","setState","addEventListener","e","pageX","pageY","console","log","current_wall","find","n","check_recursive_delay","value","dispay_draw_button","updateCanvas","draw_maze","height","select_draw_algorithims","speed","props","c","getContext","button","content","color","grid_rows","grid_cols","select_solve_algorithims","componentDidMount","render","draw_maze_algorithims","solve_maze_algorithims","start_x","start_y","end_x","end_y","minWidth","target","map","algorithm","maxWidth","s","position","top","left","backgroundColor","mapStateToProps"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\nimport {setUp , run_solve_maze , update_info} from './Algorithms/mazeController'\nimport {connect} from 'react-redux'\nimport swal from '@sweetalert/with-react'\n\nlet select_start = false\nlet select_end = false \nlet select_wall = false \nlet nodes \nlet draw_grid\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      width: (window.innerWidth * .95),\n      height: (window.innerHeight * .92),\n      select_draw_algorithims: \"Depth first search\", \n      select_solve_algorithims: \"A star\",\n      rows: 15, \n      dispay_draw_button: true , \n      speed: \"Normal\", \n      start_location: {x: 40 , y: 170}, \n\n      end_location: {x: 40 , y: 170}, \n    }\n  }\n\n  componentDidMount(){\n    this.updateCanvas(false)\n    this.run_set_point()\n  }\n\n  run_set_point = () => {\n    let canvas = this.refs.maze\n    let rows = draw_grid ? 25 : this.state.rows \n    let {width} = this.state \n    let cols = Math.floor(rows * ((window.innerWidth * .95) / (window.innerHeight * .9))) \n    let size = Math.floor(width / cols)\n    let {offsetLeft , offsetTop} = canvas\n    let start_location = {x: offsetLeft + (size / 2) , y: offsetTop + (size / 2)}\n    let end_location = {x: offsetLeft + ((cols - 1) * size + (size / 2)) , y: offsetTop + ((rows - 1) * size + (size / 2))}\n    this.setState({start_location , end_location})\n    canvas.addEventListener('mousedown' , (e) => {\n      let {pageX , pageY} = e\n      let x = Math.floor(((pageX - offsetLeft) / size)) * (size) + (size / 2) + offsetLeft\n      let y = Math.floor(((pageY - offsetTop) / size)) * (size) + (size / 2) + offsetTop\n      if(x < (cols * size) + offsetLeft && y < (rows * size) + offsetTop){\n        if(select_end){\n          console.log('new')\n          end_location = {x , y}\n          this.setState({end_location})\n          update_info({end_location: {x: x - offsetLeft ,y: y - offsetTop}})\n        }\n\n        if(select_start){\n          console.log('new')\n          start_location = {x , y}\n          this.setState({start_location})\n          update_info({start_location: {x: x - offsetLeft ,y: y - offsetTop}})\n        }\n\n        if(select_wall){\n          let current_wall = nodes.find(n => n.x === x - offsetLeft && n.y === y - offsetTop)\n          if(current_wall)\n          console.log(current_wall)\n          // current_wall.grid = true\n          // current_wall.walls = [!current_wall.walls[0] , !current_wall.walls[0] , !current_wall.walls[0] , !current_wall.walls[0]]\n        }\n      }\n    })\n  }\n\n  check_recursive_delay = (value) => {\n    this.setState({dispay_draw_button: value})\n  }\n\n  updateCanvas = (draw_maze = true) => {\n    // rows == min 15 and max 50\n    nodes = []\n    let {rows , height , width , select_draw_algorithims} = this.state\n\n    let speed = this.props.speed[select_draw_algorithims][this.state.speed]\n\n    if(select_draw_algorithims === \"Recursive Division\"){\n      this.check_recursive_delay(false)\n    }\n\n    let cols = Math.floor(rows * ((window.innerWidth * .95) / (window.innerHeight * .9))) \n\n    const canvas = this.refs.maze\n    const c = canvas.getContext('2d');\n\n    if(rows < 15 || rows > 50){\n      swal({\n        button: false, \n        content: (\n          <div style={{color: 'black'}}>\n            <h3>Rows should be minimum 15 and maximum 50.</h3>\n          </div>\n        )\n      })\n      return\n    }\n\n    if(draw_maze){\n      draw_grid = false \n      nodes = setUp({c , canvas , cols , rows, width , height , draw_maze , select_draw_algorithims , \n      check_recursive_delay: this.check_recursive_delay , speed})\n    }else{\n      draw_grid = true \n      let grid_rows = 25\n      let grid_cols = Math.floor(grid_rows * ((window.innerWidth * .95) / (window.innerHeight * .9)))\n      nodes = setUp({c , canvas , cols: grid_cols, rows: grid_rows, width , height , draw_maze , select_draw_algorithims: \"\" , check_recursive_delay: this.check_recursive_delay , speed})\n    }\n  }\n  render(){\n    let {width , height , select_solve_algorithims , dispay_draw_button} = this.state\n    let {draw_maze_algorithims , solve_maze_algorithims} = this.props\n    let speed = [\"Slow\", \"Normal\", \"Fast\" , \"Supper fast\"]\n    let start_x = this.state.start_location.x\n    let start_y = this.state.start_location.y\n\n    let end_x = this.state.end_location.x\n    let end_y = this.state.end_location.y\n    return(\n      <div className=\"mt-1\">\n        <nav className=\"navbar\">\n          <div className=\"d-flex flex-wrap\">\n            <div className=\"input-group p-2\" style={{minWidth: 600}}>\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Algorithms</span>\n              </div>\n              <select \n                className=\"custom-select\" \n                id=\"inputGroupSelect04\" \n                aria-label=\"Example select with button addon\"\n                style={{minWidth: 250}}\n                onChange={(e) => this.setState({select_draw_algorithims: e.target.value})}\n              >\n                {draw_maze_algorithims.map(algorithm => \n                  <option value={algorithm}>{algorithm}</option>\n                )}\n              </select>\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Speed</span>\n              </div>\n              <select \n                className=\"custom-select\" \n                id=\"inputGroupSelect04\" \n                aria-label=\"Example select with button addon\"\n                style={{maxWidth: 150}}\n                onChange={(e) => this.setState({speed: e.target.value})}\n              >\n                {speed.map(s => \n                  s === \"Normal\"\n                    ? <option value={s} selected>{s}</option>\n                    : <option value={s} >{s}</option>\n                )}\n              </select>\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Size(rows)</span>\n              </div>\n              <input \n                type=\"number\" \n                className=\"form-control\" \n                min='15'\n                max='50'\n                placeholder=\"Minimum 15 and Maximum 50\"\n                style={{minWidth: 100}}\n                onChange={(e) => {\n                  let rows = Math.floor(e.target.value)\n                  this.setState({rows})\n                }}\n              ></input>\n            <div className=\"input-group-append\">\n              {dispay_draw_button ? \n                <button \n                  className=\"btn btn-outline-light\" \n                  type=\"submit\"\n                  onClick={() => {\n                    this.updateCanvas()\n                    this.run_set_point()\n                  }}\n                >\n                  Generate Maze\n                </button>\n              : null }\n            </div>\n          </div>\n          <div className=\"input-group p-2\" style={{maxWidth: 500}}>\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\">Algorithms</span>\n            </div>\n            <select \n              className=\"custom-select\" \n              id=\"inputGroupSelect04\" \n              aria-label=\"Example select with button addon\"\n              onChange={(e) => this.setState({select_solve_algorithims: e.target.value})}\n            >\n              {solve_maze_algorithims.map(algorithm => \n                <option value={algorithm}>{algorithm}</option>\n              )}\n            </select>\n            <div className=\"input-group-append\">\n              <button \n                className=\"btn btn-outline-light\" \n                type=\"button\"\n                onClick={() => run_solve_maze(select_solve_algorithims)}\n              >\n                Solve Maze\n              </button>\n            </div>\n          </div>\n          <button \n            className=\"btn btn-outline-light m-2\" \n            type=\"button\"\n            onClick={() => {\n              this.updateCanvas(false)\n              this.run_set_point()\n            }}\n            style={{width: 100}}\n          >\n            Grid\n          </button>\n          <button \n            className=\"btn m-2\" \n            style={{color: select_start ? 'black' :'white'}}\n            onClick={() => {\n              select_end = select_wall = false\n              select_start = !select_start\n              this.setState({})\n            }}\n            >\n            <i class=\"fas fa-star\" style={{color: select_start ? 'black' :'white'}}></i> Start Point\n          </button>\n          <button \n            className=\"btn m-2\" \n            style={{color: select_end ? 'black' :'white'}}\n            onClick={() => {\n              select_start = select_wall = false\n              select_end = !select_end \n              this.setState({})\n            }}\n          >\n            <i class=\"fas fa-bullseye\" style={{color: select_end ? 'black' :'white'}}></i> End Point\n          </button>\n          {draw_grid ? \n            <button \n              className=\"btn m-2\" \n              style={{color: select_wall ? 'black' :'white'}}\n              onClick={() => {\n                select_start = select_end = false\n                select_wall = !select_wall\n                this.setState({})\n              }}\n            >\n              <i class=\"fas fa-square\" style={{color: select_wall ? 'black' :'white'}}></i> Walls\n            </button>\n          : null }\n          </div>\n        </nav>\n        <div className=\"m-5\">\n          <i \n            class=\"fas fa-star\" \n            style={{position: \"absolute\", width: 10 , height: 10, top: start_y - 10, left: start_x - 10 , backgroundColor: 'transparent'}}></i>\n\n          <i \n            class=\"fas fa-bullseye\" \n            style={{position: \"absolute\", width: 6, height: 6, top: end_y - 6, left: end_x - 6 , backgroundColor: 'transparent'}}></i>\n          <canvas ref=\"maze\" style={{width, height}}></canvas>\n        </div> \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    draw_maze_algorithims: state.draw_maze_algorithims,\n    solve_maze_algorithims: state.solve_maze_algorithims,\n    speed: state.speed \n  }\n}\n\nexport default connect(mapStateToProps)(App)\n"]},"metadata":{},"sourceType":"module"}