{"ast":null,"code":"let size, nodes, cols, rows, neighbors_node, visited_neighbors_node, current_neighbor_node, canvas, c, myReqDraw;\n\nconst prims_maze = props => {\n  size = props.size;\n  nodes = props.nodes;\n  cols = props.cols;\n  rows = props.rows;\n  canvas = props.canvas;\n  c = props.c;\n  neighbors_node = [];\n  visited_neighbors_node = [];\n  current_neighbor_node = null;\n  cancelAnimationFrame(myReqDraw);\n  setup_prims_maze(nodes, cols, rows);\n};\n\nconst setup_prims_maze = (nodes_array, w, h) => {\n  let midd_x = Math.floor(w / 2) * size + size / 2;\n  let midd_y = Math.floor(h / 2) * size + size / 2;\n  let center_node = nodes_array.find(node => node.x === midd_x && node.y === midd_y);\n  neighbors_node.push(center_node);\n  visited_neighbors_node.push(center_node);\n  current_neighbor_node = center_node;\n  draw_prims_maze();\n};\n\nconst draw_prims_maze = () => {\n  myReqDraw = requestAnimationFrame(draw_prims_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  if (neighbors_node.length === 0) {\n    cancelAnimationFrame(myReqDraw);\n  }\n\n  add_neighbor_node();\n};\n\nconst add_neighbor_node = () => {\n  let {\n    x,\n    y\n  } = current_neighbor_node;\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_neighbor_node, nodes);\n\n  if (top && !visited_neighbors_node.find(node => node.x === x && node.y === y - size) && !neighbors_node.find(node => node.x === x && node.y === y - size)) {\n    neighbors_node.push(top);\n    top.prev_node = current_neighbor_node;\n  }\n\n  if (right && !visited_neighbors_node.find(node => node.x === x + size && node.y === y) && !neighbors_node.find(node => node.x === x + size && node.y === y)) {\n    neighbors_node.push(right);\n    right.prev_node = current_neighbor_node;\n  }\n\n  if (bottom && !visited_neighbors_node.find(node => node.x === x && node.y === y + size) && !neighbors_node.find(node => node.x === x && node.y === y + size)) {\n    neighbors_node.push(bottom);\n    bottom.prev_node = current_neighbor_node;\n  }\n\n  if (left && !visited_neighbors_node.find(node => node.x === x - size && node.y === y) && !neighbors_node.find(node => node.x === x - size && node.y === y)) {\n    neighbors_node.push(left);\n    left.prev_node = current_neighbor_node;\n  }\n\n  neighbors_node = neighbors_node.filter(node => node.x === x && node.y === y ? false : true);\n  link_node_with_random_neighbor();\n};\n\nconst link_node_with_random_neighbor = () => {\n  if (neighbors_node.length === 0) return;\n  let random_num = getRandom(0, neighbors_node.length);\n  let random_neighbor = neighbors_node[random_num];\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(random_neighbor, visited_neighbors_node);\n\n  if (top && top.x === random_neighbor.prev_node.x && top.y === random_neighbor.prev_node.y) {\n    random_neighbor.walls[0] = false;\n    top.walls[2] = false;\n  }\n\n  if (right && right.x === random_neighbor.prev_node.x && right.y === random_neighbor.prev_node.y) {\n    random_neighbor.walls[1] = false;\n    right.walls[3] = false;\n  }\n\n  if (bottom && bottom.x === random_neighbor.prev_node.x && bottom.y === random_neighbor.prev_node.y) {\n    random_neighbor.walls[2] = false;\n    bottom.walls[0] = false;\n  }\n\n  if (left && left.x === random_neighbor.prev_node.x && left.y === random_neighbor.prev_node.y) {\n    random_neighbor.walls[3] = false;\n    left.walls[1] = false;\n  }\n\n  current_neighbor_node = random_neighbor;\n  visited_neighbors_node.push(random_neighbor);\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\nexport { prims_maze };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/draw_maze/prims_maze_generation.js"],"names":["size","nodes","cols","rows","neighbors_node","visited_neighbors_node","current_neighbor_node","canvas","c","myReqDraw","prims_maze","props","cancelAnimationFrame","setup_prims_maze","nodes_array","w","h","midd_x","Math","floor","midd_y","center_node","find","node","x","y","push","draw_prims_maze","requestAnimationFrame","clearRect","width","height","i","length","draw","add_neighbor_node","top","right","bottom","left","get_top_right_bottom_left","prev_node","filter","link_node_with_random_neighbor","random_num","getRandom","random_neighbor","walls","array","n","min","max","random"],"mappings":"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","sourcesContent":["let size , nodes , cols , rows , neighbors_node , visited_neighbors_node , current_neighbor_node , canvas , c , myReqDraw\nconst prims_maze = props => {\n    size = props.size\n    nodes = props.nodes \n    cols = props.cols \n    rows = props.rows \n    canvas = props.canvas \n    c = props.c \n\n    neighbors_node = []\n    visited_neighbors_node = []\n    current_neighbor_node = null \n    \n    cancelAnimationFrame(myReqDraw)\n    setup_prims_maze(nodes , cols , rows)\n}\n\nconst setup_prims_maze = (nodes_array , w , h) => {\n    let midd_x =  Math.floor(w / 2) * size + (size / 2)\n    let midd_y =  Math.floor(h / 2) * size + (size / 2)\n    let center_node = nodes_array.find(node => node.x === midd_x && node.y === midd_y)\n    neighbors_node.push(center_node)\n    visited_neighbors_node.push(center_node)\n    current_neighbor_node = center_node\n\n    draw_prims_maze()\n}\n\nconst draw_prims_maze = () => {\n    myReqDraw = requestAnimationFrame(draw_prims_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    if(neighbors_node.length === 0){\n        cancelAnimationFrame(myReqDraw)\n    }\n\n    add_neighbor_node()\n}\n\nconst add_neighbor_node = () => {\n    let {x , y} = current_neighbor_node\n    \n    let {top , right , bottom , left} = get_top_right_bottom_left(current_neighbor_node , nodes) \n\n    if(\n        top \n        && !visited_neighbors_node.find(node => node.x === x && node.y === y - size)\n        && !neighbors_node.find(node => node.x === x && node.y === y - size)\n    ){\n        neighbors_node.push(top)\n        top.prev_node = current_neighbor_node\n    }\n\n    if(\n        right \n        && !visited_neighbors_node.find(node => node.x === x + size && node.y === y)\n        && !neighbors_node.find(node => node.x === x + size && node.y === y)\n    ){\n        neighbors_node.push(right)\n        right.prev_node = current_neighbor_node\n    }\n\n    if(\n        bottom \n        && !visited_neighbors_node.find(node => node.x === x && node.y === y + size)\n        && !neighbors_node.find(node => node.x === x && node.y === y + size)\n    ){\n        neighbors_node.push(bottom)\n        bottom.prev_node = current_neighbor_node\n    }\n\n    if(\n        left \n        && !visited_neighbors_node.find(node => node.x === x - size && node.y === y)\n        && !neighbors_node.find(node => node.x === x - size && node.y === y)\n    ){\n        neighbors_node.push(left)\n        left.prev_node = current_neighbor_node\n    }\n\n    neighbors_node = neighbors_node.filter(node => node.x === x && node.y === y ? false : true )\n\n    link_node_with_random_neighbor()\n}\n\nconst link_node_with_random_neighbor = () => {\n    if(neighbors_node.length === 0) return\n    let random_num = getRandom(0 , neighbors_node.length)\n    let random_neighbor = neighbors_node[random_num]\n    let {top , right , bottom , left} = get_top_right_bottom_left(random_neighbor,visited_neighbors_node)\n\n    if(top && top.x === random_neighbor.prev_node.x && top.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[0] = false \n        top.walls[2] = false\n    }\n\n    if(right && right.x === random_neighbor.prev_node.x && right.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[1] = false \n        right.walls[3] = false\n    }\n\n    if(bottom && bottom.x === random_neighbor.prev_node.x && bottom.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[2] = false \n        bottom.walls[0] = false\n    }\n\n    if(left && left.x === random_neighbor.prev_node.x && left.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[3] = false \n        left.walls[1] = false\n    }\n\n    current_neighbor_node = random_neighbor\n    visited_neighbors_node.push(random_neighbor)\n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nconst getRandom = (min,max) => {\n    return Math.floor(Math.random() * (max - min) + min)\n}\n\nexport {prims_maze}\n\n"]},"metadata":{},"sourceType":"module"}