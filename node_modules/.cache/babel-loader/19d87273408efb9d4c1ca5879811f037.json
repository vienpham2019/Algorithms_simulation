{"ast":null,"code":"import { Block } from '../helper_method';\nlet nodes, canvas, c, stack, size, cols, rows, frame_per_second, speed;\nlet block, finish_path, myReq, visited_nodes, width, height;\n\nconst depth_first_search_maze = props => {\n  nodes = props.nodes;\n  canvas = props.canvas;\n  c = props.c;\n  stack = props.stack;\n  size = props.size;\n  cols = props.cols;\n  rows = props.rows;\n  frame_per_second = props.frame_per_second;\n  speed = props.speed;\n  block = new Block(size / 2, size / 2, c, size);\n  width = cols * size;\n  height = rows * size;\n  let start_node = nodes.find(n => n.x === size / 2 && n.y === size / 2);\n  finish_path = false;\n  visited_nodes = [start_node];\n  clearInterval(myReq);\n  draw_maze();\n};\n\nconst stop_depth_first_search_draw_maze = () => {\n  clearInterval(myReq);\n};\n\nconst draw_maze = () => {\n  myReq = setTimeout(() => {\n    draw_maze();\n  }, frame_per_second / speed);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  if (stack.length === 0) {\n    clearInterval(myReq);\n  } else {\n    move_block();\n  }\n};\n\nconst move_block = () => {\n  let current_node = stack[0];\n  let neighbor_nodes = [];\n  let x = current_node.x;\n  let y = current_node.y; // top\n\n  if (y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)) {\n    let top = nodes.find(n => n.x === x && n.y === y - size);\n    neighbor_nodes.push(top);\n  } // right \n\n\n  if (x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)) {\n    let right = nodes.find(n => n.x === x + size && n.y === y);\n    neighbor_nodes.push(right);\n  } // bottom\n\n\n  if (y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)) {\n    let bottom = nodes.find(n => n.x === x && n.y === y + size);\n    neighbor_nodes.push(bottom);\n  } // left\n\n\n  if (x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)) {\n    let left = nodes.find(n => n.x === x - size && n.y === y);\n    neighbor_nodes.push(left);\n  }\n\n  if (neighbor_nodes.length > 0) {\n    let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)];\n    stack.unshift(next_node);\n    visited_nodes.push(next_node);\n    let left_right = next_node.x - current_node.x;\n    let up_down = next_node.y - current_node.y;\n\n    if (left_right > 0) {\n      // right \n      current_node.walls[1] = false;\n      next_node.walls[3] = false;\n    } else if (left_right < 0) {\n      // left\n      current_node.walls[3] = false;\n      next_node.walls[1] = false;\n    }\n\n    if (up_down > 0) {\n      // down\n      current_node.walls[2] = false;\n      next_node.walls[0] = false;\n    } else if (up_down < 0) {\n      // up\n      current_node.walls[0] = false;\n      next_node.walls[2] = false;\n    }\n\n    block.x = next_node.x;\n    block.y = next_node.y;\n  } else {\n    block.x = current_node.x;\n    block.y = current_node.y;\n    stack.shift();\n  }\n\n  block.draw();\n};\n\nexport { depth_first_search_maze, stop_depth_first_search_draw_maze };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/draw_maze/depth_first_search_maze_generation.js"],"names":["Block","nodes","canvas","c","stack","size","cols","rows","frame_per_second","speed","block","finish_path","myReq","visited_nodes","width","height","depth_first_search_maze","props","start_node","find","n","x","y","clearInterval","draw_maze","stop_depth_first_search_draw_maze","setTimeout","clearRect","i","length","draw","move_block","current_node","neighbor_nodes","top","push","right","bottom","left","next_node","Math","floor","random","unshift","left_right","up_down","walls","shift"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet nodes , canvas , c , stack , size , cols , rows , frame_per_second , speed \n\nlet block , finish_path , myReq , visited_nodes , width , height \n\nconst depth_first_search_maze = props => {\n    nodes = props.nodes \n    canvas = props.canvas \n    c = props.c \n    stack = props.stack\n    size = props.size\n    cols = props.cols \n    rows = props.rows\n    frame_per_second = props.frame_per_second\n    speed = props.speed\n\n    block = new Block(size / 2,size / 2 , c , size)\n\n    width = cols * size \n    height = rows * size  \n\n    let start_node = nodes.find(n => n.x === (size / 2) && n.y === (size / 2))\n\n    finish_path = false   \n    visited_nodes = [start_node]\n\n    clearInterval(myReq)\n    draw_maze()\n}\n\nconst stop_depth_first_search_draw_maze = () => {\n    clearInterval(myReq)\n}\n\nconst draw_maze = () => {\n    myReq = setTimeout(() => {\n        draw_maze()\n    }, frame_per_second / speed);\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    if(stack.length === 0){\n        clearInterval(myReq)\n    }else{ \n        move_block()  \n    }\n}\n\nconst move_block = () => {\n    let current_node = stack[0]\n    let neighbor_nodes = []\n    let x = current_node.x\n    let y = current_node.y\n\n    // top\n    if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n        let top = nodes.find(n => n.x === x && n.y === y - size)\n        neighbor_nodes.push(top)\n    }\n\n    // right \n    if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n        let right = nodes.find(n => n.x === x + size && n.y === y)\n        neighbor_nodes.push(right)\n    }\n\n    // bottom\n    if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n        let bottom = nodes.find(n => n.x === x && n.y === y + size)\n        neighbor_nodes.push(bottom)\n    }\n\n    // left\n    if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n        let left = nodes.find(n => n.x === x - size && n.y === y)\n        neighbor_nodes.push(left)\n    }\n\n    if(neighbor_nodes.length > 0){\n        let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n        stack.unshift(next_node)\n        visited_nodes.push(next_node)\n        let left_right = next_node.x - current_node.x\n        let up_down = next_node.y - current_node.y\n\n        if(left_right > 0) { // right \n            current_node.walls[1] = false \n            next_node.walls[3] = false \n        }else if(left_right < 0){ // left\n            current_node.walls[3] = false \n            next_node.walls[1] = false \n        } \n\n        if(up_down > 0) { // down\n            current_node.walls[2] = false \n            next_node.walls[0] = false \n        }else if(up_down < 0){ // up\n            current_node.walls[0] = false \n            next_node.walls[2] = false \n        }\n        block.x = next_node.x \n        block.y = next_node.y\n    }else{\n        block.x = current_node.x \n        block.y = current_node.y\n        stack.shift()\n    }\n    block.draw()\n}\n\nexport {depth_first_search_maze , stop_depth_first_search_draw_maze}"]},"metadata":{},"sourceType":"module"}