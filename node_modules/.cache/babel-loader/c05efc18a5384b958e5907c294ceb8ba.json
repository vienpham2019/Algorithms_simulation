{"ast":null,"code":"import{get_top_right_bottom_left}from'../solve_maze/helper_method/algorithms_helper_method';var size,nodes,cols,rows,canvas,c,frame_per_second,speed;var neighbors_node,visited_neighbors_node,current_neighbor_node,myReqDraw;var prims_maze=function prims_maze(props){size=props.size;nodes=props.nodes;cols=props.cols;rows=props.rows;canvas=props.canvas;c=props.c;frame_per_second=props.frame_per_second;speed=props.speed;neighbors_node=[];visited_neighbors_node=[];current_neighbor_node=null;clearInterval(myReqDraw);setup_prims_maze(nodes,cols,rows);};var stop_prims_draw_maze=function stop_prims_draw_maze(){clearInterval(myReqDraw);};var setup_prims_maze=function setup_prims_maze(nodes_array,w,h){var midd_x=Math.floor(w/2)*size+size/2;var midd_y=Math.floor(h/2)*size+size/2;var center_node=nodes_array.find(function(node){return node.x===midd_x&&node.y===midd_y;});neighbors_node.push(center_node);visited_neighbors_node.push(center_node);current_neighbor_node=center_node;draw_prims_maze();};var draw_prims_maze=function draw_prims_maze(){myReqDraw=setTimeout(function(){draw_prims_maze();},frame_per_second/speed);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}if(neighbors_node.length===0){clearInterval(myReqDraw);}add_neighbor_node();};var add_neighbor_node=function add_neighbor_node(){var _current_neighbor_nod=current_neighbor_node,x=_current_neighbor_nod.x,y=_current_neighbor_nod.y;var _get_top_right_bottom=get_top_right_bottom_left(current_neighbor_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// top \ncreate_neighbor_node(top);// right \ncreate_neighbor_node(right);//bottom \ncreate_neighbor_node(bottom);//left \ncreate_neighbor_node(left);neighbors_node=neighbors_node.filter(function(node){return node.x===x&&node.y===y?false:true;});link_node_with_random_neighbor();};var create_neighbor_node=function create_neighbor_node(neighbor_node){if(neighbor_node&&!visited_neighbors_node.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})&&!neighbors_node.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})){neighbors_node.push(neighbor_node);neighbor_node.prev_node=current_neighbor_node;}};var link_node_with_random_neighbor=function link_node_with_random_neighbor(){if(neighbors_node.length===0)return;var random_num=getRandom(0,neighbors_node.length);var random_neighbor=neighbors_node[random_num];var _get_top_right_bottom2=get_top_right_bottom_left(random_neighbor,visited_neighbors_node,size),top=_get_top_right_bottom2.top,right=_get_top_right_bottom2.right,bottom=_get_top_right_bottom2.bottom,left=_get_top_right_bottom2.left;if(top&&top.x===random_neighbor.prev_node.x&&top.y===random_neighbor.prev_node.y){random_neighbor.walls[0]=false;top.walls[2]=false;}if(right&&right.x===random_neighbor.prev_node.x&&right.y===random_neighbor.prev_node.y){random_neighbor.walls[1]=false;right.walls[3]=false;}if(bottom&&bottom.x===random_neighbor.prev_node.x&&bottom.y===random_neighbor.prev_node.y){random_neighbor.walls[2]=false;bottom.walls[0]=false;}if(left&&left.x===random_neighbor.prev_node.x&&left.y===random_neighbor.prev_node.y){random_neighbor.walls[3]=false;left.walls[1]=false;}current_neighbor_node=random_neighbor;visited_neighbors_node.push(random_neighbor);};var getRandom=function getRandom(min,max){return Math.floor(Math.random()*(max-min)+min);};export{prims_maze,stop_prims_draw_maze};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/draw_maze/prims_maze_generation.js"],"names":["get_top_right_bottom_left","size","nodes","cols","rows","canvas","c","frame_per_second","speed","neighbors_node","visited_neighbors_node","current_neighbor_node","myReqDraw","prims_maze","props","clearInterval","setup_prims_maze","stop_prims_draw_maze","nodes_array","w","h","midd_x","Math","floor","midd_y","center_node","find","node","x","y","push","draw_prims_maze","setTimeout","clearRect","width","height","i","length","draw","add_neighbor_node","top","right","bottom","left","create_neighbor_node","filter","link_node_with_random_neighbor","neighbor_node","prev_node","random_num","getRandom","random_neighbor","walls","min","max","random"],"mappings":"AAAA,OAAQA,yBAAR,KAAwC,sDAAxC,CAEA,GAAIC,CAAAA,IAAJ,CAAWC,KAAX,CAAmBC,IAAnB,CAA0BC,IAA1B,CAAiCC,MAAjC,CAA0CC,CAA1C,CAA8CC,gBAA9C,CAAiEC,KAAjE,CACA,GAAIC,CAAAA,cAAJ,CAAqBC,sBAArB,CAA8CC,qBAA9C,CAAsEC,SAAtE,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,KAAK,CAAI,CACxBb,IAAI,CAAGa,KAAK,CAACb,IAAb,CACAC,KAAK,CAAGY,KAAK,CAACZ,KAAd,CACAC,IAAI,CAAGW,KAAK,CAACX,IAAb,CACAC,IAAI,CAAGU,KAAK,CAACV,IAAb,CACAC,MAAM,CAAGS,KAAK,CAACT,MAAf,CACAC,CAAC,CAAGQ,KAAK,CAACR,CAAV,CAEAC,gBAAgB,CAAGO,KAAK,CAACP,gBAAzB,CACAC,KAAK,CAAGM,KAAK,CAACN,KAAd,CAEAC,cAAc,CAAG,EAAjB,CACAC,sBAAsB,CAAG,EAAzB,CACAC,qBAAqB,CAAG,IAAxB,CAEAI,aAAa,CAACH,SAAD,CAAb,CACAI,gBAAgB,CAACd,KAAD,CAASC,IAAT,CAAgBC,IAAhB,CAAhB,CACH,CAjBD,CAmBA,GAAMa,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CAC/BF,aAAa,CAACH,SAAD,CAAb,CACH,CAFD,CAIA,GAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACE,WAAD,CAAeC,CAAf,CAAmBC,CAAnB,CAAyB,CAC9C,GAAIC,CAAAA,MAAM,CAAIC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAAG,CAAf,EAAoBlB,IAApB,CAA4BA,IAAI,CAAG,CAAjD,CACA,GAAIuB,CAAAA,MAAM,CAAIF,IAAI,CAACC,KAAL,CAAWH,CAAC,CAAG,CAAf,EAAoBnB,IAApB,CAA4BA,IAAI,CAAG,CAAjD,CACA,GAAIwB,CAAAA,WAAW,CAAGP,WAAW,CAACQ,IAAZ,CAAiB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,CAAL,GAAWP,MAAX,EAAqBM,IAAI,CAACE,CAAL,GAAWL,MAApC,EAArB,CAAlB,CACAf,cAAc,CAACqB,IAAf,CAAoBL,WAApB,EACAf,sBAAsB,CAACoB,IAAvB,CAA4BL,WAA5B,EACAd,qBAAqB,CAAGc,WAAxB,CAEAM,eAAe,GAClB,CATD,CAWA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1BnB,SAAS,CAAGoB,UAAU,CAAC,UAAM,CACzBD,eAAe,GAClB,CAFqB,CAEnBxB,gBAAgB,CAAGC,KAFA,CAAtB,CAGAF,CAAC,CAAC2B,SAAF,CAAY,CAAZ,CAAc,CAAd,CAAgB5B,MAAM,CAAC6B,KAAvB,CAA8B7B,MAAM,CAAC8B,MAArC,EAEA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGlC,KAAK,CAACmC,MAAzB,CAAiCD,CAAC,EAAlC,CAAsC,CAClClC,KAAK,CAACkC,CAAD,CAAL,CAASE,IAAT,GACH,CAED,GAAG7B,cAAc,CAAC4B,MAAf,GAA0B,CAA7B,CAA+B,CAC3BtB,aAAa,CAACH,SAAD,CAAb,CACH,CAED2B,iBAAiB,GACpB,CAfD,CAiBA,GAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,2BACd5B,qBADc,CACvBiB,CADuB,uBACvBA,CADuB,CACnBC,CADmB,uBACnBA,CADmB,2BAEQ7B,yBAAyB,CAACW,qBAAD,CAAyBT,KAAzB,CAAiCD,IAAjC,CAFjC,CAEvBuC,GAFuB,uBAEvBA,GAFuB,CAEjBC,KAFiB,uBAEjBA,KAFiB,CAETC,MAFS,uBAETA,MAFS,CAEAC,IAFA,uBAEAA,IAFA,CAI5B;AACAC,oBAAoB,CAACJ,GAAD,CAApB,CAEA;AACAI,oBAAoB,CAACH,KAAD,CAApB,CAEA;AACAG,oBAAoB,CAACF,MAAD,CAApB,CAEA;AACAE,oBAAoB,CAACD,IAAD,CAApB,CAEAlC,cAAc,CAAGA,cAAc,CAACoC,MAAf,CAAsB,SAAAlB,IAAI,QAAIA,CAAAA,IAAI,CAACC,CAAL,GAAWA,CAAX,EAAgBD,IAAI,CAACE,CAAL,GAAWA,CAA3B,CAA+B,KAA/B,CAAuC,IAA3C,EAA1B,CAAjB,CAEAiB,8BAA8B,GACjC,CAnBD,CAqBA,GAAMF,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACG,aAAD,CAAmB,CAC5C,GACIA,aAAa,EACV,CAACrC,sBAAsB,CAACgB,IAAvB,CAA4B,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,CAAL,GAAWmB,aAAa,CAACnB,CAAzB,EAA8BD,IAAI,CAACE,CAAL,GAAWkB,aAAa,CAAClB,CAA3D,EAAhC,CADJ,EAEG,CAACpB,cAAc,CAACiB,IAAf,CAAoB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,CAAL,GAAWmB,aAAa,CAACnB,CAAzB,EAA8BD,IAAI,CAACE,CAAL,GAAWkB,aAAa,CAAClB,CAA3D,EAAxB,CAHR,CAIC,CACGpB,cAAc,CAACqB,IAAf,CAAoBiB,aAApB,EACAA,aAAa,CAACC,SAAd,CAA0BrC,qBAA1B,CACH,CACJ,CATD,CAWA,GAAMmC,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,EAAM,CACzC,GAAGrC,cAAc,CAAC4B,MAAf,GAA0B,CAA7B,CAAgC,OAChC,GAAIY,CAAAA,UAAU,CAAGC,SAAS,CAAC,CAAD,CAAKzC,cAAc,CAAC4B,MAApB,CAA1B,CACA,GAAIc,CAAAA,eAAe,CAAG1C,cAAc,CAACwC,UAAD,CAApC,CAHyC,2BAILjD,yBAAyB,CAACmD,eAAD,CAAiBzC,sBAAjB,CAA0CT,IAA1C,CAJpB,CAIpCuC,GAJoC,wBAIpCA,GAJoC,CAI9BC,KAJ8B,wBAI9BA,KAJ8B,CAItBC,MAJsB,wBAItBA,MAJsB,CAIbC,IAJa,wBAIbA,IAJa,CAMzC,GAAGH,GAAG,EAAIA,GAAG,CAACZ,CAAJ,GAAUuB,eAAe,CAACH,SAAhB,CAA0BpB,CAA3C,EAAgDY,GAAG,CAACX,CAAJ,GAAUsB,eAAe,CAACH,SAAhB,CAA0BnB,CAAvF,CAAyF,CACrFsB,eAAe,CAACC,KAAhB,CAAsB,CAAtB,EAA2B,KAA3B,CACAZ,GAAG,CAACY,KAAJ,CAAU,CAAV,EAAe,KAAf,CACH,CAED,GAAGX,KAAK,EAAIA,KAAK,CAACb,CAAN,GAAYuB,eAAe,CAACH,SAAhB,CAA0BpB,CAA/C,EAAoDa,KAAK,CAACZ,CAAN,GAAYsB,eAAe,CAACH,SAAhB,CAA0BnB,CAA7F,CAA+F,CAC3FsB,eAAe,CAACC,KAAhB,CAAsB,CAAtB,EAA2B,KAA3B,CACAX,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAiB,KAAjB,CACH,CAED,GAAGV,MAAM,EAAIA,MAAM,CAACd,CAAP,GAAauB,eAAe,CAACH,SAAhB,CAA0BpB,CAAjD,EAAsDc,MAAM,CAACb,CAAP,GAAasB,eAAe,CAACH,SAAhB,CAA0BnB,CAAhG,CAAkG,CAC9FsB,eAAe,CAACC,KAAhB,CAAsB,CAAtB,EAA2B,KAA3B,CACAV,MAAM,CAACU,KAAP,CAAa,CAAb,EAAkB,KAAlB,CACH,CAED,GAAGT,IAAI,EAAIA,IAAI,CAACf,CAAL,GAAWuB,eAAe,CAACH,SAAhB,CAA0BpB,CAA7C,EAAkDe,IAAI,CAACd,CAAL,GAAWsB,eAAe,CAACH,SAAhB,CAA0BnB,CAA1F,CAA4F,CACxFsB,eAAe,CAACC,KAAhB,CAAsB,CAAtB,EAA2B,KAA3B,CACAT,IAAI,CAACS,KAAL,CAAW,CAAX,EAAgB,KAAhB,CACH,CAEDzC,qBAAqB,CAAGwC,eAAxB,CACAzC,sBAAsB,CAACoB,IAAvB,CAA4BqB,eAA5B,EACH,CA5BD,CA8BA,GAAMD,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACG,GAAD,CAAKC,GAAL,CAAa,CAC3B,MAAOhC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACiC,MAAL,IAAiBD,GAAG,CAAGD,GAAvB,EAA8BA,GAAzC,CAAP,CACH,CAFD,CAIA,OAAQxC,UAAR,CAAqBI,oBAArB","sourcesContent":["import {get_top_right_bottom_left} from '../solve_maze/helper_method/algorithms_helper_method'\n\nlet size , nodes , cols , rows , canvas , c , frame_per_second , speed \nlet neighbors_node , visited_neighbors_node , current_neighbor_node , myReqDraw \nconst prims_maze = props => {\n    size = props.size\n    nodes = props.nodes \n    cols = props.cols \n    rows = props.rows \n    canvas = props.canvas \n    c = props.c \n\n    frame_per_second = props.frame_per_second\n    speed = props.speed\n\n    neighbors_node = []\n    visited_neighbors_node = []\n    current_neighbor_node = null \n    \n    clearInterval(myReqDraw)\n    setup_prims_maze(nodes , cols , rows)\n}\n\nconst stop_prims_draw_maze = () => {\n    clearInterval(myReqDraw)\n}\n\nconst setup_prims_maze = (nodes_array , w , h) => {\n    let midd_x =  Math.floor(w / 2) * size + (size / 2)\n    let midd_y =  Math.floor(h / 2) * size + (size / 2)\n    let center_node = nodes_array.find(node => node.x === midd_x && node.y === midd_y)\n    neighbors_node.push(center_node)\n    visited_neighbors_node.push(center_node)\n    current_neighbor_node = center_node\n\n    draw_prims_maze()\n}\n\nconst draw_prims_maze = () => {\n    myReqDraw = setTimeout(() => {\n        draw_prims_maze()\n    }, frame_per_second / speed)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    if(neighbors_node.length === 0){\n        clearInterval(myReqDraw)\n    }\n\n    add_neighbor_node()\n}\n\nconst add_neighbor_node = () => {\n    let {x , y} = current_neighbor_node\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_neighbor_node , nodes , size) \n\n    // top \n    create_neighbor_node(top)\n\n    // right \n    create_neighbor_node(right)\n\n    //bottom \n    create_neighbor_node(bottom)\n\n    //left \n    create_neighbor_node(left)\n\n    neighbors_node = neighbors_node.filter(node => node.x === x && node.y === y ? false : true )\n\n    link_node_with_random_neighbor()\n}\n\nconst create_neighbor_node = (neighbor_node) => {\n    if(\n        neighbor_node \n        && !visited_neighbors_node.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n        && !neighbors_node.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n    ){\n        neighbors_node.push(neighbor_node)\n        neighbor_node.prev_node = current_neighbor_node\n    }\n}\n\nconst link_node_with_random_neighbor = () => {\n    if(neighbors_node.length === 0) return\n    let random_num = getRandom(0 , neighbors_node.length)\n    let random_neighbor = neighbors_node[random_num]\n    let {top , right , bottom , left} = get_top_right_bottom_left(random_neighbor,visited_neighbors_node , size)\n\n    if(top && top.x === random_neighbor.prev_node.x && top.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[0] = false \n        top.walls[2] = false\n    }\n\n    if(right && right.x === random_neighbor.prev_node.x && right.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[1] = false \n        right.walls[3] = false\n    }\n\n    if(bottom && bottom.x === random_neighbor.prev_node.x && bottom.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[2] = false \n        bottom.walls[0] = false\n    }\n\n    if(left && left.x === random_neighbor.prev_node.x && left.y === random_neighbor.prev_node.y){\n        random_neighbor.walls[3] = false \n        left.walls[1] = false\n    }\n\n    current_neighbor_node = random_neighbor\n    visited_neighbors_node.push(random_neighbor)\n}\n\nconst getRandom = (min,max) => {\n    return Math.floor(Math.random() * (max - min) + min)\n}\n\nexport {prims_maze , stop_prims_draw_maze}\n\n"]},"metadata":{},"sourceType":"module"}