{"ast":null,"code":"import { Node, Block } from './helper_method';\nlet size, width, height, cols, rows;\nlet delay = 40;\nlet canvas, c;\nlet nodes, block;\nlet visited_nodes, stack;\nlet quere, finish_path, nodes_path, path, current_node;\nlet start_node, end_node;\nlet myReq, myReqDraw;\nlet stop = false;\n\nconst setUp = props => {\n  c = props.c;\n  canvas = props.canvas;\n  nodes = [];\n  visited_nodes = [];\n  stack = [];\n  quere = [];\n  nodes_path = [];\n  path = [];\n  finish_path = false;\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = size * cols;\n  height = size * rows;\n  canvas.width = width;\n  canvas.height = height;\n  stop = !stop;\n  cancelAnimationFrame(myReq);\n  draw_divide_maze();\n};\n\nconst draw_divide_maze = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size);\n\n      if (i === 0 && j !== 0) {\n        node.walls[0] = true;\n      } else if (i === rows - 1) {\n        node.walls[2] = true;\n      }\n\n      if (j === 0) {\n        node.walls[3] = true;\n      } else if (j === cols - 1 && i !== rows - 1) {\n        node.walls[1] = true;\n      }\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n        visited_nodes.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  start_node = new Block(size / 2, size / 2, c, size, \"blue\");\n  quere.push(start_node);\n  end_node = new Block((cols - 1) * size + size / 2, (rows - 1) * size + size / 2, c, size, \"green\");\n  let generate_maze = draw_maze(nodes, cols, rows, 0, 0);\n  setInterval(() => {\n    if (generate_maze) {\n      console.log(generate_maze);\n    }\n  }, delay * 2);\n};\n\nconst draw_maze = (nodes_array, x_max, y_max, x_min, y_min) => {\n  if (x_max - x_min < 1 || y_max - y_min < 1 || stop) return;\n  let random_x = getRandom(x_min, x_max);\n  let random_y = getRandom(y_min, y_max);\n  let x_or_y = getRandom(-20, 20);\n\n  for (let i = 0; i < nodes_array.length; i++) {\n    if (x_or_y > 0) {\n      // x\n      if (nodes_array[i].x === random_x * size + size / 2 && nodes_array[i].y <= y_max * size + size / 2 && nodes_array[i].y >= y_min * size + size / 2 && nodes_array[i].x !== (cols - 1) * size + size / 2) {\n        if (nodes_array[i].y !== random_y * size + size / 2) {\n          nodes_array[i].walls[1] = true;\n          let {\n            x,\n            y\n          } = nodes_array[i];\n          let neightbor_node = nodes_array.find(node => node.x === x + size && node.y === y);\n\n          if (neightbor_node) {\n            neightbor_node.walls[3] = true;\n          }\n        }\n      }\n    } else {\n      if (nodes_array[i].y === random_y * size + size / 2 && nodes_array[i].x <= x_max * size + size / 2 && nodes_array[i].x >= x_min * size + size / 2) {\n        if (nodes_array[i].x !== random_x * size + size / 2) {\n          nodes_array[i].walls[2] = true;\n          let {\n            x,\n            y\n          } = nodes_array[i];\n          let neightbor_node = nodes_array.find(node => node.x === x && node.y === y + size);\n\n          if (neightbor_node) {\n            neightbor_node.walls[0] = true;\n          }\n        }\n      }\n    }\n\n    nodes_array[i].draw();\n  }\n\n  setTimeout(() => {\n    if (x_or_y > 0) {\n      setTimeout(() => {\n        draw_maze(nodes_array, random_x, y_max, x_min, y_min); // right \n      }, delay * 2);\n      setTimeout(() => {\n        draw_maze(nodes_array, x_max, y_max, random_x + 1, y_min); // left \n      }, delay * 3);\n    } else {\n      setTimeout(() => {\n        draw_maze(nodes_array, x_max, random_y, x_min, y_min); // top \n      }, delay * 2);\n      setTimeout(() => {\n        draw_maze(nodes_array, x_max, y_max, x_min, random_y + 1); // bottom\n      }, delay * 3);\n    }\n  }, delay * 2);\n  return 'done';\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < nodes_path.length; i++) {\n    nodes_path[i].draw();\n  }\n\n  start_node.draw();\n  end_node.draw();\n\n  if (end_node.prev_node) {\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n\n  if (!end_node.prev_node && !finish_path) {\n    solve_maze();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let x = node.x;\n  let y = node.y;\n  let color = \"MidnightBlue\";\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y); // top \n\n  let top = nodes.find(n => n.x === x && n.y === y - size);\n\n  if (top && !current_find_node.walls[0] && !nodes_path.find(n => n.x === top.x && n.y === top.y)) {\n    let top_x = top.x;\n    let top_y = top.y;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let top_block = new Block(top_x, top_y, c, size, color, node);\n      quere.push(top_block);\n      nodes_path.push(top_block);\n    }\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size && n.y === y);\n\n  if (right && !current_find_node.walls[1] && !nodes_path.find(n => n.x === right.x && n.y === right.y)) {\n    let right_x = right.x;\n    let right_y = right.y;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let right_block = new Block(right_x, right_y, c, size, color, node);\n      quere.push(right_block);\n      nodes_path.push(right_block);\n    }\n  } // bottom\n\n\n  let bottom = nodes.find(n => n.x === x && n.y === y + size);\n\n  if (bottom && !current_find_node.walls[2] && !nodes_path.find(n => n.x === bottom.x && n.y === bottom.y)) {\n    let bottom_x = bottom.x;\n    let bottom_y = bottom.y;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, c, size, color, node);\n      quere.push(bottom_block);\n      nodes_path.push(bottom_block);\n    }\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size && n.y === y);\n\n  if (left && !current_find_node.walls[3] && !nodes_path.find(n => n.x === left.x && n.y === left.y)) {\n    let left_x = left.x;\n    let left_y = left.y;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let left_block = new Block(left_x, left_y, c, size, color, node);\n      quere.push(left_block);\n      nodes_path.push(left_block);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\nexport { setUp, run_solve_maze };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["Node","Block","size","width","height","cols","rows","delay","canvas","c","nodes","block","visited_nodes","stack","quere","finish_path","nodes_path","path","current_node","start_node","end_node","myReq","myReqDraw","stop","setUp","props","cancelAnimationFrame","draw_divide_maze","i","j","x","y","node","walls","push","generate_maze","draw_maze","setInterval","console","log","nodes_array","x_max","y_max","x_min","y_min","random_x","getRandom","random_y","x_or_y","length","neightbor_node","find","draw","setTimeout","run_solve_maze","requestAnimationFrame","clearRect","prev_node","find_path","solve_maze","quere_nodes","shift","check_neighbor_node","color","current_find_node","c_n","top","n","top_x","top_y","top_block","right","right_x","right_y","right_block","bottom","bottom_x","bottom_y","bottom_block","left","left_x","left_y","left_block","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import {Node , Block} from './helper_method'\n\nlet size , width , height , cols , rows \n\nlet delay = 40\n\nlet canvas , c \n\nlet nodes , block \n\nlet visited_nodes , stack \n\nlet quere , finish_path , nodes_path , path , current_node\n \nlet start_node, end_node \n\nlet myReq , myReqDraw\n\nlet stop = false\n\nconst setUp = (props) => {\n  c = props.c\n  canvas = props.canvas \n  nodes = []\n  visited_nodes = []\n  stack = []\n  quere = []\n  nodes_path = []\n  path = []\n  finish_path = false \n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = size * cols \n  height = size * rows\n\n  canvas.width = width\n  canvas.height = height\n\n  stop = !stop \n  cancelAnimationFrame(myReq)\n  draw_divide_maze()\n}\n\nconst draw_divide_maze = () => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n        let x = j * size + (size / 2)\n        let y = i * size + (size / 2)\n        let node = new Node(x, y , c , size )\n        if(i === 0 && j !== 0) {\n            node.walls[0] = true\n        }else if(i === rows - 1){\n            node.walls[2] = true\n        }\n\n        if(j === 0){\n            node.walls[3] = true \n        }else if(j === cols - 1 && i !== rows - 1){\n            node.walls[1] = true\n        }\n\n        if(i === 0 && j === 0){\n            stack.push(node)\n            visited_nodes.push(node)\n        }\n        nodes.push(node)\n    }\n  }\n\n  start_node = new Block(size / 2,size / 2 , c , size , \"blue\")\n  quere.push(start_node)\n  end_node = new Block((cols - 1) * size + (size / 2),( rows - 1 ) * size + (size / 2) , c , size , \"green\" )\n  let generate_maze = draw_maze(nodes , cols, rows, 0, 0)\n  setInterval(() => {\n    if(generate_maze){\n      console.log(generate_maze)\n    }\n  }, delay * 2);\n}\n\nconst draw_maze = (nodes_array , x_max, y_max, x_min , y_min) => {\n\n  if(x_max - x_min < 1 || y_max - y_min < 1 || stop) return\n\n  let random_x = getRandom(x_min,x_max)\n  let random_y = getRandom(y_min,y_max)\n  let x_or_y = getRandom(-20, 20)\n  \n  for(let i = 0; i < nodes_array.length; i ++){\n      if(x_or_y > 0) { // x\n          if (\n              nodes_array[i].x === random_x * size + (size / 2) \n              && nodes_array[i].y <= y_max * size + (size / 2)\n              && nodes_array[i].y >= y_min * size + (size / 2)\n              && nodes_array[i].x !== (cols - 1) * size + (size / 2)\n              ){\n              if (nodes_array[i].y !== random_y * size + (size / 2)){\n                  nodes_array[i].walls[1] = true\n                  let {x , y} = nodes_array[i]\n                  let neightbor_node = nodes_array.find(node => node.x === x + size && node.y === y) \n                  if(neightbor_node){\n                      neightbor_node.walls[3] = true\n                  } \n              }\n          }\n      }else{\n          if(\n              nodes_array[i].y === random_y * size + (size / 2)\n              && nodes_array[i].x <= x_max * size + (size / 2)\n              && nodes_array[i].x >= x_min * size + (size / 2)\n              ){\n              if(nodes_array[i].x !== random_x * size + (size / 2)){\n                  nodes_array[i].walls[2] = true\n                  let {x , y} = nodes_array[i]\n                  let neightbor_node = nodes_array.find(node => node.x === x && node.y === y + size) \n                  if(neightbor_node){\n                      neightbor_node.walls[0] = true\n                  } \n              }\n          }\n      }\n      nodes_array[i].draw()\n  }\n\n  setTimeout(() => {\n      if(x_or_y > 0){ \n          setTimeout(() => {\n              draw_maze(nodes_array, random_x, y_max, x_min, y_min) // right \n          }, delay * 2);\n          setTimeout(() => {\n              draw_maze(nodes_array, x_max, y_max, random_x + 1, y_min) // left \n          }, delay * 3);\n      }else{\n          setTimeout(() => {\n              draw_maze(nodes_array, x_max, random_y, x_min, y_min) // top \n          }, delay * 2);\n          setTimeout(() => {\n              draw_maze(nodes_array, x_max, y_max, x_min , random_y + 1) // bottom\n          }, delay * 3);\n      }\n  }, delay * 2);\n  return 'done'\n}\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze)\n  c.clearRect(0,0,canvas.width, canvas.height)\n\n  for(let i = 0; i < nodes.length; i ++){\n      nodes[i].draw()\n  }\n\n  for(let i = 0; i < nodes_path.length; i ++){\n      nodes_path[i].draw()\n  }\n\n  start_node.draw()\n  end_node.draw()\n  if(end_node.prev_node){\n    find_path()\n  }\n  if(finish_path){\n    cancelAnimationFrame(myReq)\n  }\n  if(!end_node.prev_node && !finish_path){\n    solve_maze()\n  }\n}\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere]\n  quere.shift()\n  // visited_nodes_for_path.push(current_node)\n  if(end_node.prev_node){\n      return\n  }\n  for(let i = 0; i < quere_nodes.length ; i ++){\n      check_neighbor_node(quere_nodes[i])\n  }\n}\n\nconst check_neighbor_node = (node) => {\n  let x = node.x\n  let y = node.y\n  let color = \"MidnightBlue\"\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y )\n  // top \n  let top = nodes.find(n => n.x === x && n.y === y - size)\n  if(top && !current_find_node.walls[0] && !nodes_path.find(n => n.x === top.x && n.y === top.y)){\n      let top_x = top.x\n      let top_y = top.y\n      if(top_x === end_node.x && top_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let top_block = new Block(top_x, top_y , c , size , color, node)\n          quere.push(top_block)\n          nodes_path.push(top_block)\n      }\n  }\n\n  // right\n  let right = nodes.find(n => n.x === x + size && n.y === y )\n  if(right && !current_find_node.walls[1] && !nodes_path.find(n => n.x === right.x  && n.y === right.y)){\n      let right_x = right.x \n      let right_y = right.y \n      if(right_x === end_node.x && right_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let right_block = new Block(right_x, right_y, c , size , color ,node)\n          quere.push(right_block)\n          nodes_path.push(right_block)\n      }\n  }\n\n  // bottom\n  let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n  if(bottom && !current_find_node.walls[2] && !nodes_path.find(n => n.x === bottom.x  && n.y === bottom.y )){\n      let bottom_x = bottom.x \n      let bottom_y = bottom.y \n      if(bottom_x === end_node.x && bottom_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let bottom_block = new Block(bottom_x, bottom_y, c , size ,color ,node)\n          quere.push(bottom_block)\n          nodes_path.push(bottom_block)\n      }\n  }\n\n  // left \n  let left = nodes.find(n => n.x === x - size && n.y === y)\n  if(left && !current_find_node.walls[3] && !nodes_path.find(n => n.x === left.x && n.y === left.y)){\n      let left_x = left.x \n      let left_y = left.y \n      if(left_x === end_node.x && left_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let left_block = new Block(left_x,left_y, c, size , color , node)\n          quere.push(left_block)\n          nodes_path.push(left_block)\n      }\n  }\n\n}\n\nconst find_path = () => {\n  current_node.color = \"green\"\n  if(current_node.x === start_node.x && current_node.y === start_node.y){\n      finish_path = true\n      return\n  }\n  current_node = current_node.prev_node\n}\n\nconst getRandom = (min,max) => {\n  return Math.floor(Math.random() * (max - min) + min)\n}\n\nexport {setUp , run_solve_maze}\n"]},"metadata":{},"sourceType":"module"}