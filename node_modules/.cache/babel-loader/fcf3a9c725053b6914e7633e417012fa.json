{"ast":null,"code":"import{Block}from'../helper_method';var nodes,canvas,c,stack,size,cols,rows,frame_per_second,speed;var block,finish_path,myReq,visited_nodes,width,height;var depth_first_search_maze=function depth_first_search_maze(props){nodes=props.nodes;canvas=props.canvas;c=props.c;stack=props.stack;size=props.size;cols=props.cols;rows=props.rows;frame_per_second=props.frame_per_second;speed=props.speed;block=new Block(size/2,size/2,c,size);width=cols*size;height=rows*size;var start_node=nodes.find(function(n){return n.x===size/2&&n.y===size/2;});finish_path=false;visited_nodes=[start_node];clearInterval(myReq);draw_maze();};var stop_depth_first_search_draw_maze=function stop_depth_first_search_draw_maze(){clearInterval(myReq);};var draw_maze=function draw_maze(){myReq=setTimeout(function(){draw_maze();},frame_per_second/speed);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}if(stack.length===0){clearInterval(myReq);}else{move_block();}};var move_block=function move_block(){var current_node=stack[0];var neighbor_nodes=[];var x=current_node.x;var y=current_node.y;// top\nif(y-size>0&&!visited_nodes.find(function(n){return n.x===x&&n.y===y-size;})){var top=nodes.find(function(n){return n.x===x&&n.y===y-size;});neighbor_nodes.push(top);}// right \nif(x+size<width&&!visited_nodes.find(function(n){return n.x===x+size&&n.y===y;})){var right=nodes.find(function(n){return n.x===x+size&&n.y===y;});neighbor_nodes.push(right);}// bottom\nif(y+size<height&&!visited_nodes.find(function(n){return n.x===x&&n.y===y+size;})){var bottom=nodes.find(function(n){return n.x===x&&n.y===y+size;});neighbor_nodes.push(bottom);}// left\nif(x-size>0&&!visited_nodes.find(function(n){return n.x===x-size&&n.y===y;})){var left=nodes.find(function(n){return n.x===x-size&&n.y===y;});neighbor_nodes.push(left);}if(neighbor_nodes.length>0){var next_node=neighbor_nodes[Math.floor(Math.random()*neighbor_nodes.length)];stack.unshift(next_node);visited_nodes.push(next_node);var left_right=next_node.x-current_node.x;var up_down=next_node.y-current_node.y;if(left_right>0){// right \ncurrent_node.walls[1]=false;next_node.walls[3]=false;}else if(left_right<0){// left\ncurrent_node.walls[3]=false;next_node.walls[1]=false;}if(up_down>0){// down\ncurrent_node.walls[2]=false;next_node.walls[0]=false;}else if(up_down<0){// up\ncurrent_node.walls[0]=false;next_node.walls[2]=false;}block.x=next_node.x;block.y=next_node.y;}else{block.x=current_node.x;block.y=current_node.y;stack.shift();}block.draw();};export{depth_first_search_maze,stop_depth_first_search_draw_maze};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/draw_maze/depth_first_search_maze_generation.js"],"names":["Block","nodes","canvas","c","stack","size","cols","rows","frame_per_second","speed","block","finish_path","myReq","visited_nodes","width","height","depth_first_search_maze","props","start_node","find","n","x","y","clearInterval","draw_maze","stop_depth_first_search_draw_maze","setTimeout","clearRect","i","length","draw","move_block","current_node","neighbor_nodes","top","push","right","bottom","left","next_node","Math","floor","random","unshift","left_right","up_down","walls","shift"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet nodes , canvas , c , stack , size , cols , rows , frame_per_second , speed \n\nlet block , finish_path , myReq , visited_nodes , width , height \n\nconst depth_first_search_maze = props => {\n    nodes = props.nodes \n    canvas = props.canvas \n    c = props.c \n    stack = props.stack\n    size = props.size\n    cols = props.cols \n    rows = props.rows\n    frame_per_second = props.frame_per_second\n    speed = props.speed\n\n    block = new Block(size / 2,size / 2 , c , size)\n\n    width = cols * size \n    height = rows * size  \n\n    let start_node = nodes.find(n => n.x === (size / 2) && n.y === (size / 2))\n\n    finish_path = false   \n    visited_nodes = [start_node]\n\n    clearInterval(myReq)\n    draw_maze()\n}\n\nconst stop_depth_first_search_draw_maze = () => {\n    clearInterval(myReq)\n}\n\nconst draw_maze = () => {\n    myReq = setTimeout(() => {\n        draw_maze()\n    }, frame_per_second / speed);\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    if(stack.length === 0){\n        clearInterval(myReq)\n    }else{ \n        move_block()  \n    }\n}\n\nconst move_block = () => {\n    let current_node = stack[0]\n    let neighbor_nodes = []\n    let x = current_node.x\n    let y = current_node.y\n\n    // top\n    if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n        let top = nodes.find(n => n.x === x && n.y === y - size)\n        neighbor_nodes.push(top)\n    }\n\n    // right \n    if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n        let right = nodes.find(n => n.x === x + size && n.y === y)\n        neighbor_nodes.push(right)\n    }\n\n    // bottom\n    if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n        let bottom = nodes.find(n => n.x === x && n.y === y + size)\n        neighbor_nodes.push(bottom)\n    }\n\n    // left\n    if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n        let left = nodes.find(n => n.x === x - size && n.y === y)\n        neighbor_nodes.push(left)\n    }\n\n    if(neighbor_nodes.length > 0){\n        let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n        stack.unshift(next_node)\n        visited_nodes.push(next_node)\n        let left_right = next_node.x - current_node.x\n        let up_down = next_node.y - current_node.y\n\n        if(left_right > 0) { // right \n            current_node.walls[1] = false \n            next_node.walls[3] = false \n        }else if(left_right < 0){ // left\n            current_node.walls[3] = false \n            next_node.walls[1] = false \n        } \n\n        if(up_down > 0) { // down\n            current_node.walls[2] = false \n            next_node.walls[0] = false \n        }else if(up_down < 0){ // up\n            current_node.walls[0] = false \n            next_node.walls[2] = false \n        }\n        block.x = next_node.x \n        block.y = next_node.y\n    }else{\n        block.x = current_node.x \n        block.y = current_node.y\n        stack.shift()\n    }\n    block.draw()\n}\n\nexport {depth_first_search_maze , stop_depth_first_search_draw_maze}"]},"metadata":{},"sourceType":"module"}