{"ast":null,"code":"import { Block } from '../helper_method';\nlet c, canvas, size, visited_nodes, nodes, stack, current_node, start_node, end_node, finish_path, myReq;\n\nconst depth_first_search = props => {\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  nodes = props.nodes;\n  finish_path = false;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  stack = [start_node];\n  visited_nodes = [start_node];\n  current_node = start_node;\n  stack.push(start_node);\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_depth_first_search = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < visited_nodes.length; i++) {\n    visited_nodes[i].draw();\n  }\n\n  if (stack.length > 0 && !end_node.prev_node) {\n    current_node = stack[0];\n    let is_neighbor = check_neighbor_node();\n\n    if (!is_neighbor) {\n      let remove_node = stack.shift();\n      remove_node.color = 'red';\n      remove_node.draw();\n    }\n  }\n\n  if (end_node.prev_node) {\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nconst check_neighbor_node = () => {\n  let {\n    x,\n    y\n  } = current_node; // block \n\n  let color = \"MidnightBlue\";\n  let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y); // bottom\n\n  let bottom = nodes.find(n => n.x === x && n.y === y + size);\n\n  if (bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x && n.y === bottom.y)) {\n    let bottom_x = bottom.x;\n    let bottom_y = bottom.y;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, c, size, color, current_node);\n      stack = [bottom_block, ...stack];\n      visited_nodes.push(bottom_block); // current_node = bottom_block\n    }\n\n    return true;\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size && n.y === y);\n\n  if (right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x && n.y === right.y)) {\n    let right_x = right.x;\n    let right_y = right.y;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let right_block = new Block(right_x, right_y, c, size, color, current_node);\n      stack = [right_block, ...stack];\n      visited_nodes.push(right_block); // current_node = right_block\n    }\n\n    return true;\n  } // top \n\n\n  let top = nodes.find(n => n.x === x && n.y === y - size);\n\n  if (top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)) {\n    let top_x = top.x;\n    let top_y = top.y;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let top_block = new Block(top_x, top_y, c, size, color, current_node);\n      stack = [top_block, ...stack];\n      visited_nodes.push(top_block); // current_node = top_block\n    }\n\n    return true;\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size && n.y === y);\n\n  if (left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)) {\n    let left_x = left.x;\n    let left_y = left.y;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let left_block = new Block(left_x, left_y, c, size, color, current_node);\n      stack = [left_block, ...stack];\n      visited_nodes.push(left_block); // current_node = left_block\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nexport { depth_first_search, stop_depth_first_search };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/depth_first_search.js"],"names":["Block","c","canvas","size","visited_nodes","nodes","stack","current_node","start_node","end_node","finish_path","myReq","depth_first_search","props","push","cancelAnimationFrame","run_solve_maze","stop_depth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","prev_node","is_neighbor","check_neighbor_node","remove_node","shift","color","find_path","x","y","current_find_node","find","c_n","bottom","n","walls","bottom_x","bottom_y","bottom_block","right","right_x","right_y","right_block","top","top_x","top_y","top_block","left","left_x","left_y","left_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet \n    c , \n    canvas , \n    size , \n    visited_nodes , \n    nodes , \n    stack , \n    current_node , \n    start_node , \n    end_node , \n    finish_path , \n    myReq\n\nconst depth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    nodes = props.nodes \n\n    finish_path = false  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    stack = [start_node]\n    visited_nodes = [start_node]\n    current_node = start_node \n\n    stack.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_depth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < visited_nodes.length; i ++){\n        visited_nodes[i].draw()\n    }\n\n    if(stack.length > 0 && !end_node.prev_node){\n        current_node = stack[0]\n        let is_neighbor = check_neighbor_node()\n        if(!is_neighbor){\n            let remove_node = stack.shift()\n            remove_node.color = 'red'\n            remove_node.draw()\n        }\n    }\n\n    if(end_node.prev_node){\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"green\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nconst check_neighbor_node = () => {\n    let {x , y} = current_node // block \n    let color = \"MidnightBlue\"\n    let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y )\n\n    // bottom\n    let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n    if(bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x  && n.y === bottom.y )){\n        let bottom_x = bottom.x \n        let bottom_y = bottom.y \n        if(bottom_x === end_node.x && bottom_y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let bottom_block = new Block(bottom_x, bottom_y, c , size ,color , current_node)\n            stack = [bottom_block,...stack]\n            visited_nodes.push(bottom_block)\n            // current_node = bottom_block\n        }\n        return true \n    }\n\n    // right\n    let right = nodes.find(n => n.x === x + size && n.y === y )\n    if(right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x  && n.y === right.y)){\n        let right_x = right.x \n        let right_y = right.y \n        if(right_x === end_node.x && right_y === end_node.y){\n            end_node.prev_node = current_node \n        }else{\n            let right_block = new Block(right_x, right_y, c , size , color ,current_node)\n            stack = [right_block,...stack]\n            visited_nodes.push(right_block)\n            // current_node = right_block\n        }\n        return true \n    }\n\n    // top \n    let top = nodes.find(n => n.x === x && n.y === y - size)\n    if(top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)){\n        let top_x = top.x\n        let top_y = top.y\n        if(top_x === end_node.x && top_y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let top_block = new Block(top_x, top_y , c , size , color, current_node)\n            stack = [top_block,...stack]\n            visited_nodes.push(top_block)\n            // current_node = top_block\n        }\n        return true\n    }\n\n    // left \n    let left = nodes.find(n => n.x === x - size && n.y === y)\n    if(left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)){\n        let left_x = left.x \n        let left_y = left.y \n        if(left_x === end_node.x && left_y === end_node.y){\n            end_node.prev_node = current_node \n        }else{\n            let left_block = new Block(left_x,left_y, c, size , color , current_node)\n            stack = [left_block,...stack]\n            visited_nodes.push(left_block)\n            // current_node = left_block\n        }\n        return true \n    }\n\n    return false \n}\n\nexport { depth_first_search ,  stop_depth_first_search}"]},"metadata":{},"sourceType":"module"}