{"ast":null,"code":"import { Block } from '../helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet close_list, open_list_1, current_node_1, open_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size; // end_node.prev_node = null\n\n  close_list = [];\n  open_list_1 = [start_node];\n  open_list_2 = [end_node];\n  current_node_1 = start_node;\n  current_node_2 = end_node;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < open_list_1.length; i++) {\n    open_list_2[i].color = 'DeepSkyBlue';\n    open_list_2[i].draw();\n  }\n\n  for (let i = 0; i < open_list_2.length; i++) {\n    open_list_2[i].color = 'DeepSkyBlue';\n    open_list_2[i].draw();\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = 'MidnightBlue';\n    }\n\n    close_list[i].draw();\n  }\n\n  if (current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y) {\n    finish_search = true;\n    finish_path = true;\n  }\n\n  if (open_list_2.length > 0 && !finish_path) {\n    current_node_2 = open_list_2.sort((a, b) => a.distance - b.distance)[0];\n    close_list.push(current_node_2);\n    find_child_node();\n  } // if(end_node.prev_node){\n  //     start_node.draw()\n  //     end_node.draw()\n  //     find_path() \n  // }\n\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = () => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_node_2, nodes); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list_2.find(n => n.x === right.x && n.y === right.y);\n    right_in_open ? update_node(right_in_open) : open_list_2.push(create_new_node(right));\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list_2.find(n => n.x === top.x && n.y === top.y);\n    top_in_open ? update_node(top_in_open) : open_list_2.push(create_new_node(top));\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list_2.find(n => n.x === left.x && n.y === left.y);\n    left_in_open ? update_node(left_in_open) : open_list_2.push(create_new_node(left));\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list_2.find(n => n.x === bottom.x && n.y === bottom.y);\n    bottom_in_open ? update_node(bottom_in_open) : open_list_2.push(create_new_node(bottom));\n  }\n\n  open_list_2 = open_list_2.filter(node => node.x === current_node_2.x && node.y === current_node_2.y ? false : true);\n};\n\nconst find_path = () => {\n  current_node_2.color = \"LimeGreen\";\n\n  if (current_node_2.x === start_node.x && current_node_2.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node_2 = current_node_2.prev_node;\n  return;\n};\n\nconst create_new_node = node => {\n  let distance = find_distance(node);\n  return new Block(node.x, node.y, c, size, 'MidnightBlue', current_node_2, null, null, null, distance);\n};\n\nconst find_distance = node => {\n  // find distance from current node to next node \n  let x_1 = current_node_2.x;\n  let y_1 = current_node_2.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + current_node_2.distance;\n};\n\nconst update_node = node => {\n  if (current_node_2.distance + size < node.distance) {\n    node.distance = find_distance(node);\n  }\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nexport { bidirectional_dijkstra, stop_bidirectional_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","start_node","end_node","nodes","c","canvas","size","close_list","open_list_1","current_node_1","open_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_dijkstra","props","distance","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","sort","a","b","push","find_child_node","top","right","bottom","left","get_top_right_bottom_left","walls","find","node","right_in_open","n","update_node","create_new_node","top_in_open","left_in_open","bottom_in_open","filter","find_path","prev_node","find_distance","x_1","y_1","x_2","y_2","Math","abs","array"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet close_list , open_list_1 , current_node_1 , open_list_2, current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    // end_node.prev_node = null\n\n    close_list = []\n    \n    open_list_1 = [start_node]\n\n    open_list_2 = [end_node]\n\n    current_node_1 = start_node\n    current_node_2 = end_node \n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_1.length ; i ++){\n        open_list_2[i].color = 'DeepSkyBlue'\n        open_list_2[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_2.length ; i ++){\n        open_list_2[i].color = 'DeepSkyBlue'\n        open_list_2[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = 'MidnightBlue'\n        }\n        close_list[i].draw()\n    }\n\n    if(current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y){\n        finish_search = true \n        finish_path = true \n    }\n\n    if(open_list_2.length > 0 && !finish_path){\n        current_node_2 = open_list_2.sort((a,b) => a.distance - b.distance)[0] \n        close_list.push(current_node_2)\n        find_child_node()\n    }\n\n    // if(end_node.prev_node){\n    //     start_node.draw()\n    //     end_node.draw()\n    //     find_path() \n    // }\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node_2 , nodes )\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list_2.find(n => n.x === right.x  && n.y === right.y)\n\n        right_in_open ? update_node(right_in_open) : open_list_2.push(create_new_node(right))\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list_2.find(n => n.x === top.x  && n.y === top.y)\n\n        top_in_open ? update_node(top_in_open) : open_list_2.push(create_new_node(top))\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list_2.find(n => n.x === left.x  && n.y === left.y)\n        \n        left_in_open ? update_node(left_in_open) : open_list_2.push(create_new_node(left))\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list_2.find(n => n.x === bottom.x  && n.y === bottom.y)\n        \n        bottom_in_open ? update_node(bottom_in_open) : open_list_2.push(create_new_node(bottom))\n    }\n\n    open_list_2 = open_list_2.filter(node => node.x === current_node_2.x && node.y === current_node_2.y ? false : true )\n}\n\nconst find_path = () => {\n    current_node_2.color = \"LimeGreen\"\n    if(current_node_2.x === start_node.x && current_node_2.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node_2 = current_node_2.prev_node\n    return \n}\n\nconst create_new_node = (node) => {\n    let distance = find_distance(node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , current_node_2 , null , null , null , distance)\n}\n\nconst find_distance = (node) => {\n    // find distance from current node to next node \n    let x_1 = current_node_2.x \n    let y_1 = current_node_2.y \n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + current_node_2.distance\n}\n\nconst update_node = node => {\n    if(current_node_2.distance + size < node.distance){\n        node.distance = find_distance(node)\n    }\n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}