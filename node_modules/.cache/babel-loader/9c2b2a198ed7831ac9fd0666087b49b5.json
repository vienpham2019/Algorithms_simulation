{"ast":null,"code":"let size = 40; // let width = size * 70\n// let height = size * 40\n\nlet width = size * 35;\nlet height = size * 20;\nlet canvas = document.getElementById(\"maze\"); // canvas.width = width\n// canvas.height = height\n\ncanvas.style.background = \"black\";\nlet c = canvas.getContext(\"2d\");\nlet nodes = [];\nlet cols = width / size;\nlet rows = height / size;\nlet block;\nlet visited_nodes = [];\nlet stack = [];\nlet quere = [];\nlet finish_path = false;\nlet nodes_path = [];\nlet path = [];\nlet current_node;\nlet start_node, end_node;\nlet myReq;\n\nconst Node = function (x, y, neighbor_node = [], prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.neighbor_node = neighbor_node;\n  this.prev_node = prev_node;\n  this.walls = [true, true, true, true]; // [top, right , bottom , left ]\n\n  this.draw = (color = \"white\") => {\n    let x = this.x - size / 2;\n    let y = this.y - size / 2; // Top \n\n    if (this.walls[0]) {\n      c.beginPath();\n      c.moveTo(x, y);\n      c.lineTo(x + size, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // right\n\n\n    if (this.walls[1]) {\n      c.beginPath();\n      c.moveTo(x + size, y);\n      c.lineTo(x + size, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // bottom\n\n\n    if (this.walls[2]) {\n      c.beginPath();\n      c.moveTo(x + size, y + size);\n      c.lineTo(x, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // left \n\n\n    if (this.walls[3]) {\n      c.beginPath();\n      c.moveTo(x, y + size);\n      c.lineTo(x, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    }\n  };\n};\n\nconst Block = function (x, y, color = \"red\", prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.dx = size;\n  this.dy = size;\n  this.prev_node = prev_node;\n  this.color = color;\n\n  this.draw = () => {\n    c.beginPath();\n    c.rect(this.x + size / 8, this.y + size / 8, size * (3 / 4), size * (3 / 4));\n    c.fillStyle = this.color;\n    c.fill();\n  };\n\n  this.move = () => {\n    let current_node = stack[0];\n    let neighbor_nodes = [];\n    let x = current_node.x;\n    let y = current_node.y; // top\n\n    if (y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)) {\n      let top = nodes.find(n => n.x === x && n.y === y - size);\n      neighbor_nodes.push(top);\n    } // right \n\n\n    if (x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)) {\n      let right = nodes.find(n => n.x === x + size && n.y === y);\n      neighbor_nodes.push(right);\n    } // bottom\n\n\n    if (y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)) {\n      let bottom = nodes.find(n => n.x === x && n.y === y + size);\n      neighbor_nodes.push(bottom);\n    } // left\n\n\n    if (x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)) {\n      let left = nodes.find(n => n.x === x - size && n.y === y);\n      neighbor_nodes.push(left);\n    }\n\n    if (neighbor_nodes.length > 0) {\n      let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)];\n      stack.unshift(next_node);\n      visited_nodes.push(next_node);\n      this.dx = next_node.x - current_node.x;\n      this.dy = next_node.y - current_node.y;\n      this.x += this.dx;\n      this.y += this.dy;\n\n      if (this.dx > 0) {\n        // right \n        current_node.walls[1] = false;\n        next_node.walls[3] = false;\n      } else if (this.dx < 0) {\n        // left\n        current_node.walls[3] = false;\n        next_node.walls[1] = false;\n      }\n\n      if (this.dy > 0) {\n        // down\n        current_node.walls[2] = false;\n        next_node.walls[0] = false;\n      } else if (this.dy < 0) {\n        // up\n        current_node.walls[0] = false;\n        next_node.walls[2] = false;\n      }\n    } else {\n      let dx = current_node.x - (this.x + size / 2);\n      let dy = current_node.y - (this.y + size / 2);\n      this.x += dx;\n      this.y += dy;\n      stack.shift();\n    }\n\n    this.draw();\n  };\n};\n\nconst setUp = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y);\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n        visited_nodes.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  block = new Block(0, 0);\n  start_node = new Block(0, 0, \"blue\");\n  quere.push(start_node);\n  end_node = new Block(width - size, height - size, \"green\");\n  draw_maze();\n};\n\nconst draw_maze = () => {\n  myReq = requestAnimationFrame(draw_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < nodes_path.length; i++) {\n    nodes_path[i].draw();\n  }\n\n  if (stack.length === 0) {\n    start_node.draw();\n    end_node.draw();\n\n    if (end_node.prev_node) {\n      find_path();\n    } else if (finish_path) {\n      cancelAnimationFrame(myReq);\n    } else {\n      solve_maze();\n    }\n  } else {\n    block.move();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let x = node.x;\n  let y = node.y;\n  let color = \"purple\"; // top \n\n  let top = nodes.find(n => n.x === x + size / 2 && n.y === y - size / 2);\n\n  if (top && !top.walls[2] && !nodes_path.find(n => n.x === top.x - size / 2 && n.y === top.y - size / 2)) {\n    let top_x = top.x - size / 2;\n    let top_y = top.y - size / 2;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let top_block = new Block(top_x, top_y, color, node);\n      quere.push(top_block);\n      nodes_path.push(top_block);\n    }\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size * 3 / 2 && n.y === y + size / 2);\n\n  if (right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - size / 2 && n.y === right.y - size / 2)) {\n    let right_x = right.x - size / 2;\n    let right_y = right.y - size / 2;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let right_block = new Block(right_x, right_y, color, node);\n      quere.push(right_block);\n      nodes_path.push(right_block);\n    }\n  } // bottom\n\n\n  let bottom = nodes.find(n => n.x === x + size / 2 && n.y === y + size * 3 / 2);\n\n  if (bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - size / 2 && n.y === bottom.y - size / 2)) {\n    let bottom_x = bottom.x - size / 2;\n    let bottom_y = bottom.y - size / 2;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, color, node);\n      quere.push(bottom_block);\n      nodes_path.push(bottom_block);\n    }\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size / 2 && n.y === y + size / 2);\n\n  if (left && !left.walls[1] && !nodes_path.find(n => n.x === left.x - size / 2 && n.y === left.y - size / 2)) {\n    let left_x = left.x - size / 2;\n    let left_y = left.y - size / 2;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let left_block = new Block(left_x, left_y, color, node);\n      quere.push(left_block);\n      nodes_path.push(left_block);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === 0 && current_node.y === 0) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nexport { setUp };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["size","width","height","canvas","document","getElementById","style","background","c","getContext","nodes","cols","rows","block","visited_nodes","stack","quere","finish_path","nodes_path","path","current_node","start_node","end_node","myReq","Node","x","y","neighbor_node","prev_node","walls","draw","color","beginPath","moveTo","lineTo","lineWidth","lineCap","strokeStyle","stroke","Block","dx","dy","rect","fillStyle","fill","move","neighbor_nodes","find","n","top","push","right","bottom","left","length","next_node","Math","floor","random","unshift","shift","setUp","i","j","node","draw_maze","requestAnimationFrame","clearRect","find_path","cancelAnimationFrame","solve_maze","quere_nodes","check_neighbor_node","top_x","top_y","top_block","right_x","right_y","right_block","bottom_x","bottom_y","bottom_block","left_x","left_y","left_block"],"mappings":"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","sourcesContent":["let size = 40 \n// let width = size * 70\n// let height = size * 40\nlet width = size * 35\nlet height = size * 20\nlet canvas = document.getElementById(\"maze\")\n// canvas.width = width\n// canvas.height = height\ncanvas.style.background = \"black\"\n\nlet c = canvas.getContext(\"2d\")\nlet nodes = []\n\nlet cols = width / size \nlet rows = height / size \n\nlet block \n\nlet visited_nodes = []\nlet stack = []\n\nlet quere = []\nlet finish_path = false \nlet nodes_path = []\nlet path = []\nlet current_node \nlet start_node, end_node \n\nlet myReq\n\nconst Node = function(x , y , neighbor_node = [], prev_node = null){\n    this.x = x\n    this.y = y\n    this.neighbor_node = neighbor_node\n    this.prev_node = prev_node \n    this.walls = [true,true,true,true] // [top, right , bottom , left ]\n\n    this.draw = (color = \"white\") => {\n        let x = this.x - (size / 2)\n        let y = this.y - (size / 2)\n\n        // Top \n        if(this.walls[0]){\n            c.beginPath()\n            c.moveTo(x, y)\n            c.lineTo(x + size , y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // right\n        if(this.walls[1]){\n            c.beginPath()\n            c.moveTo(x + size, y)\n            c.lineTo(x + size , y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // bottom\n        if(this.walls[2]){\n            c.beginPath()\n            c.moveTo(x + size, y + size)\n            c.lineTo(x, y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // left \n        if(this.walls[3]){\n            c.beginPath()\n            c.moveTo(x, y + size)\n            c.lineTo(x, y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n    }\n}\n\nconst Block = function(x , y , color = \"red\", prev_node = null){\n    this.x = x \n    this.y = y \n    this.dx = size\n    this.dy = size\n    this.prev_node  = prev_node\n    this.color = color\n\n    this.draw = () => {\n        c.beginPath()\n        c.rect(this.x + size / 8 , this.y + size / 8, size * (3 / 4), size * (3 /4))\n        c.fillStyle = this.color\n        c.fill()\n    }\n\n    this.move = () => {\n        let current_node = stack[0]\n        let neighbor_nodes = []\n        let x = current_node.x\n        let y = current_node.y\n\n        // top\n        if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n            let top = nodes.find(n => n.x === x && n.y === y - size)\n            neighbor_nodes.push(top)\n        }\n\n        // right \n        if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n            let right = nodes.find(n => n.x === x + size && n.y === y)\n            neighbor_nodes.push(right)\n        }\n\n        // bottom\n        if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n            let bottom = nodes.find(n => n.x === x && n.y === y + size)\n            neighbor_nodes.push(bottom)\n        }\n\n        // left\n        if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n            let left = nodes.find(n => n.x === x - size && n.y === y)\n            neighbor_nodes.push(left)\n        }\n\n        if(neighbor_nodes.length > 0){\n            let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n            stack.unshift(next_node)\n            visited_nodes.push(next_node)\n            this.dx = next_node.x - current_node.x\n            this.dy = next_node.y - current_node.y\n\n            this.x += this.dx \n            this.y += this.dy\n\n            if(this.dx > 0) { // right \n                current_node.walls[1] = false \n                next_node.walls[3] = false \n            }else if(this.dx < 0){ // left\n                current_node.walls[3] = false \n                next_node.walls[1] = false \n            } \n\n            if(this.dy > 0) { // down\n                current_node.walls[2] = false \n                next_node.walls[0] = false \n            }else if(this.dy < 0){ // up\n                current_node.walls[0] = false \n                next_node.walls[2] = false \n            }\n        }else{\n            let dx = current_node.x  - (this.x + (size / 2))\n            let dy = current_node.y  - (this.y + (size / 2))\n            this.x += dx \n            this.y += dy\n            stack.shift()\n        }\n        this.draw()\n    }\n\n}\n\nconst setUp = () => {\n    for(let i = 0; i < rows ; i ++){\n        for(let j = 0; j < cols ; j ++){\n            let x = j * size + (size / 2)\n            let y = i * size + (size / 2)\n            let node = new Node(x, y)\n            if(i === 0 && j === 0){\n                stack.push(node)\n                visited_nodes.push(node)\n            }\n            nodes.push(node)\n        }\n    }\n\n    block = new Block(0 , 0)\n    start_node = new Block(0 , 0 , \"blue\")\n    quere.push(start_node)\n    end_node = new Block(width - size,height - size , \"green\")\n    draw_maze()\n}\n\n\nconst draw_maze = () => {\n    myReq = requestAnimationFrame(draw_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < nodes_path.length; i ++){\n        nodes_path[i].draw()\n    }\n\n    if(stack.length === 0){\n        start_node.draw()\n        end_node.draw()\n        if(end_node.prev_node){\n            find_path()\n        }else if(finish_path){\n            cancelAnimationFrame(myReq)\n        }else{\n            solve_maze()\n        }\n    }else{ \n        block.move()  \n    }\n}\n\nconst solve_maze = () => {\n    let quere_nodes = [...quere]\n    quere.shift()\n    // visited_nodes_for_path.push(current_node)\n    if(end_node.prev_node){\n        return\n    }\n    for(let i = 0; i < quere_nodes.length ; i ++){\n        check_neighbor_node(quere_nodes[i])\n    }\n}\n\nconst check_neighbor_node = (node) => {\n    let x = node.x\n    let y = node.y\n    let color = \"purple\"\n    // top \n    let top = nodes.find(n => n.x === x + (size / 2) && n.y === y - (size / 2))\n    if(top && !top.walls[2] && !nodes_path.find(n => n.x === top.x  - (size / 2) && n.y === top.y - (size / 2))){\n        let top_x = top.x  - (size / 2)\n        let top_y = top.y  - (size / 2)\n        if(top_x === end_node.x && top_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let top_block = new Block(top_x, top_y, color, node)\n            quere.push(top_block)\n            nodes_path.push(top_block)\n        }\n    }\n\n    // right\n    let right = nodes.find(n => n.x === x + (size * 3 / 2) && n.y === y + (size / 2))\n    if(right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - (size / 2) && n.y === right.y - (size / 2))){\n        let right_x = right.x - (size / 2)\n        let right_y = right.y - (size / 2)\n        if(right_x === end_node.x && right_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let right_block = new Block(right_x, right_y, color ,node)\n            quere.push(right_block)\n            nodes_path.push(right_block)\n        }\n    }\n\n    // bottom\n    let bottom = nodes.find(n => n.x === x + (size / 2) && n.y === y + (size * 3 / 2) ) \n    if(bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - (size / 2) && n.y === bottom.y  - (size / 2))){\n        let bottom_x = bottom.x - (size / 2)\n        let bottom_y = bottom.y - (size / 2)\n        if(bottom_x === end_node.x && bottom_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let bottom_block = new Block(bottom_x, bottom_y, color ,node)\n            quere.push(bottom_block)\n            nodes_path.push(bottom_block)\n        }\n    }\n\n    // left \n    let left = nodes.find(n => n.x === x - (size / 2) && n.y === y + (size / 2))\n    if(left && !left.walls[1] && !nodes_path.find(n => n.x === left.x  - (size / 2) && n.y === left.y - (size / 2))){\n        let left_x = left.x - (size / 2)\n        let left_y = left.y - (size / 2)\n        if(left_x === end_node.x && left_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let left_block = new Block(left_x,left_y, color , node)\n            quere.push(left_block)\n            nodes_path.push(left_block)\n        }\n    }\n\n}\n\nconst find_path = () => {\n    current_node.color = \"green\"\n    if(current_node.x === 0 && current_node.y === 0){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nexport {setUp}\n"]},"metadata":{},"sourceType":"module"}