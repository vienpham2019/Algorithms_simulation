{"ast":null,"code":"import { Node } from './helper_method';\nlet size, width, height, cols, rows;\nlet canvas, c;\nlet nodes, block;\nlet visited_nodes, stack;\nlet quere, finish_path, nodes_path, path, current_node;\nlet start_node, end_node;\nlet myReq;\n\nconst Block = function (x, y, color = \"red\", prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.dx = size;\n  this.dy = size;\n  this.prev_node = prev_node;\n  this.color = color;\n\n  this.draw = () => {\n    c.beginPath();\n    c.rect(this.x + size / 8, this.y + size / 8, size * (3 / 4), size * (3 / 4));\n    c.fillStyle = this.color;\n    c.fill();\n  }; // this.move = () => {\n  //     let current_node = stack[0]\n  //     let neighbor_nodes = []\n  //     let x = current_node.x\n  //     let y = current_node.y\n  //     // top\n  //     if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n  //         let top = nodes.find(n => n.x === x && n.y === y - size)\n  //         neighbor_nodes.push(top)\n  //     }\n  //     // right \n  //     if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n  //         let right = nodes.find(n => n.x === x + size && n.y === y)\n  //         neighbor_nodes.push(right)\n  //     }\n  //     // bottom\n  //     if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n  //         let bottom = nodes.find(n => n.x === x && n.y === y + size)\n  //         neighbor_nodes.push(bottom)\n  //     }\n  //     // left\n  //     if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n  //         let left = nodes.find(n => n.x === x - size && n.y === y)\n  //         neighbor_nodes.push(left)\n  //     }\n  //     if(neighbor_nodes.length > 0){\n  //         let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n  //         stack.unshift(next_node)\n  //         visited_nodes.push(next_node)\n  //         this.dx = next_node.x - current_node.x\n  //         this.dy = next_node.y - current_node.y\n  //         this.x += this.dx \n  //         this.y += this.dy\n  //         if(this.dx > 0) { // right \n  //             current_node.walls[1] = false \n  //             next_node.walls[3] = false \n  //         }else if(this.dx < 0){ // left\n  //             current_node.walls[3] = false \n  //             next_node.walls[1] = false \n  //         } \n  //         if(this.dy > 0) { // down\n  //             current_node.walls[2] = false \n  //             next_node.walls[0] = false \n  //         }else if(this.dy < 0){ // up\n  //             current_node.walls[0] = false \n  //             next_node.walls[2] = false \n  //         }\n  //     }else{\n  //         let dx = current_node.x  - (this.x + (size / 2))\n  //         let dy = current_node.y  - (this.y + (size / 2))\n  //         this.x += dx \n  //         this.y += dy\n  //         stack.shift()\n  //     }\n  //     this.draw()\n  // }\n\n};\n\nconst setUp = props => {\n  c = props.c;\n  canvas = props.canvas;\n  canvas.width = width;\n  canvas.height = height;\n  nodes = [];\n  visited_nodes = [];\n  stack = [];\n  quere = [];\n  nodes_path = [];\n  path = [];\n  finish_path = false;\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = size * cols;\n  height = size * rows;\n  draw_first_search_maze();\n};\n\nconst draw_first_search_maze = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size);\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n        visited_nodes.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  block = new Block(0, 0);\n  start_node = new Block(0, 0, \"blue\");\n  quere.push(start_node);\n  end_node = new Block(width - size, height - size, \"green\");\n  draw_maze();\n};\n\nconst draw_maze = () => {\n  myReq = requestAnimationFrame(draw_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < nodes_path.length; i++) {\n    nodes_path[i].draw();\n  }\n\n  if (stack.length === 0) {\n    start_node.draw();\n    end_node.draw();\n\n    if (end_node.prev_node) {\n      find_path();\n    } else if (finish_path) {\n      cancelAnimationFrame(myReq);\n    } else {\n      solve_maze();\n    }\n  } else {\n    block.move();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let x = node.x;\n  let y = node.y;\n  let color = \"purple\"; // top \n\n  let top = nodes.find(n => n.x === x + size / 2 && n.y === y - size / 2);\n\n  if (top && !top.walls[2] && !nodes_path.find(n => n.x === top.x - size / 2 && n.y === top.y - size / 2)) {\n    let top_x = top.x - size / 2;\n    let top_y = top.y - size / 2;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let top_block = new Block(top_x, top_y, color, node);\n      quere.push(top_block);\n      nodes_path.push(top_block);\n    }\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size * 3 / 2 && n.y === y + size / 2);\n\n  if (right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - size / 2 && n.y === right.y - size / 2)) {\n    let right_x = right.x - size / 2;\n    let right_y = right.y - size / 2;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let right_block = new Block(right_x, right_y, color, node);\n      quere.push(right_block);\n      nodes_path.push(right_block);\n    }\n  } // bottom\n\n\n  let bottom = nodes.find(n => n.x === x + size / 2 && n.y === y + size * 3 / 2);\n\n  if (bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - size / 2 && n.y === bottom.y - size / 2)) {\n    let bottom_x = bottom.x - size / 2;\n    let bottom_y = bottom.y - size / 2;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, color, node);\n      quere.push(bottom_block);\n      nodes_path.push(bottom_block);\n    }\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size / 2 && n.y === y + size / 2);\n\n  if (left && !left.walls[1] && !nodes_path.find(n => n.x === left.x - size / 2 && n.y === left.y - size / 2)) {\n    let left_x = left.x - size / 2;\n    let left_y = left.y - size / 2;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let left_block = new Block(left_x, left_y, color, node);\n      quere.push(left_block);\n      nodes_path.push(left_block);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === 0 && current_node.y === 0) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nexport { setUp };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["Node","size","width","height","cols","rows","canvas","c","nodes","block","visited_nodes","stack","quere","finish_path","nodes_path","path","current_node","start_node","end_node","myReq","Block","x","y","color","prev_node","dx","dy","draw","beginPath","rect","fillStyle","fill","setUp","props","draw_first_search_maze","i","j","node","push","draw_maze","requestAnimationFrame","clearRect","length","find_path","cancelAnimationFrame","solve_maze","move","quere_nodes","shift","check_neighbor_node","top","find","n","walls","top_x","top_y","top_block","right","right_x","right_y","right_block","bottom","bottom_x","bottom_y","bottom_block","left","left_x","left_y","left_block"],"mappings":"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","sourcesContent":["import {Node} from './helper_method'\n\nlet size , width , height , cols , rows \n\nlet canvas , c \n\nlet nodes , block \n\nlet visited_nodes , stack \n\nlet quere , finish_path , nodes_path , path , current_node\n \nlet start_node, end_node \n\nlet myReq\n\nconst Block = function(x , y , color = \"red\", prev_node = null){\n  this.x = x \n  this.y = y \n  this.dx = size\n  this.dy = size\n  this.prev_node  = prev_node\n  this.color = color\n\n  this.draw = () => {\n      c.beginPath()\n      c.rect(this.x + size / 8 , this.y + size / 8, size * (3 / 4), size * (3 /4))\n      c.fillStyle = this.color\n      c.fill()\n  }\n\n  // this.move = () => {\n  //     let current_node = stack[0]\n  //     let neighbor_nodes = []\n  //     let x = current_node.x\n  //     let y = current_node.y\n\n  //     // top\n  //     if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n  //         let top = nodes.find(n => n.x === x && n.y === y - size)\n  //         neighbor_nodes.push(top)\n  //     }\n\n  //     // right \n  //     if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n  //         let right = nodes.find(n => n.x === x + size && n.y === y)\n  //         neighbor_nodes.push(right)\n  //     }\n\n  //     // bottom\n  //     if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n  //         let bottom = nodes.find(n => n.x === x && n.y === y + size)\n  //         neighbor_nodes.push(bottom)\n  //     }\n\n  //     // left\n  //     if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n  //         let left = nodes.find(n => n.x === x - size && n.y === y)\n  //         neighbor_nodes.push(left)\n  //     }\n\n  //     if(neighbor_nodes.length > 0){\n  //         let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n  //         stack.unshift(next_node)\n  //         visited_nodes.push(next_node)\n  //         this.dx = next_node.x - current_node.x\n  //         this.dy = next_node.y - current_node.y\n\n  //         this.x += this.dx \n  //         this.y += this.dy\n\n  //         if(this.dx > 0) { // right \n  //             current_node.walls[1] = false \n  //             next_node.walls[3] = false \n  //         }else if(this.dx < 0){ // left\n  //             current_node.walls[3] = false \n  //             next_node.walls[1] = false \n  //         } \n\n  //         if(this.dy > 0) { // down\n  //             current_node.walls[2] = false \n  //             next_node.walls[0] = false \n  //         }else if(this.dy < 0){ // up\n  //             current_node.walls[0] = false \n  //             next_node.walls[2] = false \n  //         }\n  //     }else{\n  //         let dx = current_node.x  - (this.x + (size / 2))\n  //         let dy = current_node.y  - (this.y + (size / 2))\n  //         this.x += dx \n  //         this.y += dy\n  //         stack.shift()\n  //     }\n  //     this.draw()\n  // }\n}\n\nconst setUp = (props) => {\n    c = props.c\n    canvas = props.canvas \n    canvas.width = width\n    canvas.height = height\n    nodes = []\n    visited_nodes = []\n    stack = []\n    quere = []\n    nodes_path = []\n    path = []\n    finish_path = false \n\n    cols = props.cols \n    rows = props.rows \n    size = props.size \n    width = size * cols \n    height = size * rows\n\n    draw_first_search_maze()\n}\n\nconst draw_first_search_maze = () => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n        let x = j * size + (size / 2)\n        let y = i * size + (size / 2)\n        let node = new Node(x, y , c , size )\n        if(i === 0 && j === 0){\n            stack.push(node)\n            visited_nodes.push(node)\n        }\n        nodes.push(node)\n    }\n  }\n\n  block = new Block(0 , 0)\n  start_node = new Block(0 , 0 , \"blue\")\n  quere.push(start_node)\n  end_node = new Block(width - size,height - size , \"green\")\n  draw_maze() \n}\n\n\nconst draw_maze = () => {\n    myReq = requestAnimationFrame(draw_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < nodes_path.length; i ++){\n        nodes_path[i].draw()\n    }\n\n    if(stack.length === 0){\n        start_node.draw()\n        end_node.draw()\n        if(end_node.prev_node){\n            find_path()\n        }else if(finish_path){\n            cancelAnimationFrame(myReq)\n        }else{\n            solve_maze()\n        }\n    }else{ \n        block.move()  \n    }\n}\n\nconst solve_maze = () => {\n    let quere_nodes = [...quere]\n    quere.shift()\n    // visited_nodes_for_path.push(current_node)\n    if(end_node.prev_node){\n        return\n    }\n    for(let i = 0; i < quere_nodes.length ; i ++){\n        check_neighbor_node(quere_nodes[i])\n    }\n}\n\nconst check_neighbor_node = (node) => {\n    let x = node.x\n    let y = node.y\n    let color = \"purple\"\n    // top \n    let top = nodes.find(n => n.x === x + (size / 2) && n.y === y - (size / 2))\n    if(top && !top.walls[2] && !nodes_path.find(n => n.x === top.x  - (size / 2) && n.y === top.y - (size / 2))){\n        let top_x = top.x  - (size / 2)\n        let top_y = top.y  - (size / 2)\n        if(top_x === end_node.x && top_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let top_block = new Block(top_x, top_y, color, node)\n            quere.push(top_block)\n            nodes_path.push(top_block)\n        }\n    }\n\n    // right\n    let right = nodes.find(n => n.x === x + (size * 3 / 2) && n.y === y + (size / 2))\n    if(right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - (size / 2) && n.y === right.y - (size / 2))){\n        let right_x = right.x - (size / 2)\n        let right_y = right.y - (size / 2)\n        if(right_x === end_node.x && right_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let right_block = new Block(right_x, right_y, color ,node)\n            quere.push(right_block)\n            nodes_path.push(right_block)\n        }\n    }\n\n    // bottom\n    let bottom = nodes.find(n => n.x === x + (size / 2) && n.y === y + (size * 3 / 2) ) \n    if(bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - (size / 2) && n.y === bottom.y  - (size / 2))){\n        let bottom_x = bottom.x - (size / 2)\n        let bottom_y = bottom.y - (size / 2)\n        if(bottom_x === end_node.x && bottom_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let bottom_block = new Block(bottom_x, bottom_y, color ,node)\n            quere.push(bottom_block)\n            nodes_path.push(bottom_block)\n        }\n    }\n\n    // left \n    let left = nodes.find(n => n.x === x - (size / 2) && n.y === y + (size / 2))\n    if(left && !left.walls[1] && !nodes_path.find(n => n.x === left.x  - (size / 2) && n.y === left.y - (size / 2))){\n        let left_x = left.x - (size / 2)\n        let left_y = left.y - (size / 2)\n        if(left_x === end_node.x && left_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let left_block = new Block(left_x,left_y, color , node)\n            quere.push(left_block)\n            nodes_path.push(left_block)\n        }\n    }\n\n}\n\nconst find_path = () => {\n    current_node.color = \"green\"\n    if(current_node.x === 0 && current_node.y === 0){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nexport {setUp}\n"]},"metadata":{},"sourceType":"module"}