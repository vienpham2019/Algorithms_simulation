{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left } from './helper_method/algorithms_helper_method';\nlet c, canvas, size, nodes, start_node, end_node;\nlet visited_nodes, quere, current_node, finish_path, myReq;\n\nconst breadth_first_search = props => {\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  visited_nodes = [];\n  nodes = props.nodes;\n  quere = [];\n  finish_path = false;\n  current_node = null;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  end_node.prev_node = null;\n  quere.push(start_node);\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_breadth_first_search = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < visited_nodes.length; i++) {\n    visited_nodes[i].draw();\n  }\n\n  if (end_node.prev_node && current_node) {\n    current_node.color = \"LimeGreen\";\n    current_node.draw();\n    current_node = current_node.prev_node;\n  }\n\n  if (finish_path || !quere.length) {\n    cancelAnimationFrame(myReq);\n  }\n\n  if (!end_node.prev_node && !finish_path) {\n    solve_maze();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(node, nodes, size); // top \n\n  add_node(top, node, 0, current_find_node); // right\n\n  add_node(right, node, 1, current_find_node); // bottom\n\n  add_node(bottom, node, 2, current_find_node); // left \n\n  add_node(left, node, 3, current_find_node);\n};\n\nconst add_node = (neighbor_node, node, wall_num, current_find_node) => {\n  let color = 'MediumBlue';\n\n  if (neighbor_node && !current_find_node.walls[wall_num] && !visited_nodes.find(n => n.x === neighbor_node.x && n.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n\n    if (x === end_node.x && y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n    } else {\n      let new_block = new Block(x, y, c, size, color, node);\n      quere.push(new_block);\n      visited_nodes.push(new_block);\n    }\n  }\n\n  return;\n};\n\nconst find_path = () => {\n  current_node.color = \"LimeGreen\";\n  current_node.draw();\n  current_node = current_node.prev_node;\n};\n\nexport { breadth_first_search, stop_breadth_first_search };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/breadth_first_search.js"],"names":["Block","get_top_right_bottom_left","c","canvas","size","nodes","start_node","end_node","visited_nodes","quere","current_node","finish_path","myReq","breadth_first_search","props","prev_node","push","cancelAnimationFrame","run_solve_maze","stop_breadth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","color","solve_maze","quere_nodes","shift","check_neighbor_node","node","current_find_node","find","c_n","x","y","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","n","new_block","find_path"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet c , canvas , size , nodes , start_node , end_node \n    \nlet visited_nodes ,  quere , current_node , finish_path , myReq\n\nconst breadth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    visited_nodes = []\n    nodes = props.nodes \n\n    quere = []\n    finish_path = false \n    current_node = null  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    end_node.prev_node = null\n\n    quere.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_breadth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < visited_nodes.length; i ++){\n        visited_nodes[i].draw()\n    }\n\n    if(end_node.prev_node && current_node){\n        current_node.color = \"LimeGreen\"\n        current_node.draw()\n        current_node = current_node.prev_node\n    }\n    if(finish_path || !quere.length){\n        cancelAnimationFrame(myReq)\n    }\n    if(!end_node.prev_node && !finish_path){\n        solve_maze()\n    }\n}\n  \nconst solve_maze = () => {\n    let quere_nodes = [...quere]\n    quere.shift()\n    // visited_nodes_for_path.push(current_node)\n    if(end_node.prev_node){\n        return\n    }\n    for(let i = 0; i < quere_nodes.length ; i ++){\n        check_neighbor_node(quere_nodes[i])\n    }\n}\n  \nconst check_neighbor_node = (node) => {\n    let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y )\n    let { top , right , bottom , left } = get_top_right_bottom_left(node , nodes , size)\n    // top \n    add_node(top , node , 0 , current_find_node)\n\n    // right\n    add_node(right , node , 1 , current_find_node)\n\n    // bottom\n    add_node(bottom , node , 2 , current_find_node)\n\n    // left \n    add_node(left , node , 3 , current_find_node)\n}\n\nconst add_node = (neighbor_node , node , wall_num , current_find_node) => {\n    let color = 'MediumBlue' \n    if(neighbor_node && !current_find_node.walls[wall_num] && !visited_nodes.find(n => n.x === neighbor_node.x && n.y === neighbor_node.y)){\n        let {x , y} = neighbor_node\n        if(x === end_node.x && y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n        }else{\n            let new_block = new Block(x, y , c , size , color, node)\n            quere.push(new_block)\n            visited_nodes.push(new_block)\n        }\n    }\n    return \n}\n  \nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    current_node.draw()\n    current_node = current_node.prev_node\n}\n\nexport { breadth_first_search ,  stop_breadth_first_search}\n\n"]},"metadata":{},"sourceType":"module"}