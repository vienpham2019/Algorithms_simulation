{"ast":null,"code":"import { Block } from '../helper_method';\nimport { print_close_and_open_list } from './bidirectional_helper_method/helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list_1, close_list_1, current_node_1, open_list_2, close_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_a_star = props => {\n  start_node = props.start_node;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = null;\n  current_node_2 = null;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_a_star = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  print_close_and_open_list(close_list_1, open_list_1, 'MidnightBlue', 'DeepSkyBlue', finish_search);\n  print_close_and_open_list(close_list_2, open_list_2, 'DarkCyan', 'Cyan', finish_search);\n\n  if (open_list_1.length > 0 && !finish_search) {\n    current_node_1 = open_list_1.sort((a, b) => a.f - b.f)[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, end_node, open_list_1, close_list_1, close_list_2);\n  }\n\n  if (open_list_2.length > 0 && !finish_search) {\n    current_node_2 = open_list_2.sort((a, b) => a.f - b.f)[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, start_node, open_list_2, close_list_2, close_list_1);\n  }\n\n  if (finish_search) {\n    start_node.draw();\n    end_node.draw();\n\n    if (!current_node_1 && !current_node_2) {\n      finish_path = true;\n    }\n\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst check_for_mix_node = (target_close_list, x, y) => {\n  let node = target_close_list.find(node => node.x === x && node.y === y);\n\n  if (node) {\n    finish_search = true;\n\n    if (close_list_1.find(node => node.x === x && node.y === y)) {\n      current_node_1 = node;\n    } else {\n      current_node_2 = node;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst find_child_node = (c_node, target_node, open_list, close_list, target_close_list) => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list.find(n => n.x === right.x && n.y === right.y);\n    let r_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, right.x, right.y)) {\n      right_in_open && r_g < right_in_open.g ? update_node(right_in_open, r_g, c_node) : open_list.push(set_node(right, r_g, c_node, target_node));\n    }\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list.find(n => n.x === top.x && n.y === top.y);\n    let t_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, top.x, top.y)) {\n      top_in_open && t_g < top_in_open.g ? update_node(top_in_open, c_node) : open_list.push(set_node(top, t_g, c_node, target_node));\n    }\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list.find(n => n.x === left.x && n.y === left.y);\n    let l_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, left.x, left.y)) {\n      left_in_open && l_g < left_in_open.g ? update_node(left_in_open, c_node) : open_list.push(set_node(left, l_g, c_node, target_node));\n    }\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list.find(n => n.x === bottom.x && n.y === bottom.y);\n    let b_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, bottom.x, bottom.y)) {\n      bottom_in_open && b_g < bottom_in_open.g ? update_node(bottom_in_open, c_node) : open_list.push(set_node(bottom, b_g, c_node, target_node));\n    }\n  }\n\n  return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true);\n};\n\nconst find_path = () => {\n  let color = \"LimeGreen\";\n\n  if (current_node_1) {\n    current_node_1.color = color;\n    current_node_1 = current_node_1.prev_node;\n  }\n\n  if (current_node_2) {\n    current_node_2.color = color;\n    current_node_2 = current_node_2.prev_node;\n  }\n};\n\nconst set_node = (node, g, c_node, target_node) => {\n  let color = \"MidnightBlue\";\n  let x_1 = node.x;\n  let y_1 = node.y;\n  let x_2 = target_node.x;\n  let y_2 = target_node.y;\n  let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size;\n  let f = h + g;\n  let new_node = new Block(x_1, y_1, c, size, color, c_node, g, h, f);\n  return new_node;\n};\n\nconst update_node = (node, g, parent) => {\n  node.g = g;\n  node.f = g + node.h;\n  node.parent = parent;\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nexport { bidirectional_a_star, stop_bidirectional_a_star };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_a_star.js"],"names":["Block","print_close_and_open_list","start_node","end_node","nodes","c","canvas","size","open_list_1","close_list_1","current_node_1","open_list_2","close_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_a_star","props","cancelAnimationFrame","run_solve_maze","stop_bidirectional_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","sort","a","b","f","push","find_child_node","find_path","check_for_mix_node","target_close_list","x","y","node","find","c_node","target_node","open_list","close_list","top","right","bottom","left","get_top_right_bottom_left","walls","right_in_open","n","r_g","g","update_node","set_node","top_in_open","t_g","left_in_open","l_g","bottom_in_open","b_g","filter","color","prev_node","x_1","y_1","x_2","y_2","h","Math","abs","new_node","parent","array"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {print_close_and_open_list} from './bidirectional_helper_method/helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list_1 , close_list_1 , current_node_1 , open_list_2 , close_list_2 , current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = null \n    current_node_2 = null \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MidnightBlue' , 'DeepSkyBlue' , finish_search)\n    print_close_and_open_list(close_list_2 , open_list_2 , 'DarkCyan' , 'Cyan' , finish_search)\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1= open_list_1.sort((a,b) => a.f - b.f)[0]\n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , end_node, open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2= open_list_2.sort((a,b) => a.f - b.f)[0]\n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , start_node, open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst check_for_mix_node = (target_close_list , x , y) => {\n    let node = target_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , target_node , open_list , close_list , target_close_list) => {\n\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes )\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list.find(n => n.x === right.x  && n.y === right.y)\n        let r_g = c_node.g + size\n\n        if(!check_for_mix_node(target_close_list , right.x , right.y)){\n            right_in_open && r_g < right_in_open.g \n                ? update_node(right_in_open, r_g , c_node )\n                : open_list.push(set_node(right , r_g , c_node , target_node))\n        }\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list.find(n => n.x === top.x  && n.y === top.y)\n        let t_g = c_node.g + size \n\n        if(!check_for_mix_node(target_close_list , top.x , top.y)){\n            top_in_open && t_g < top_in_open.g \n                ? update_node(top_in_open , c_node)\n                : open_list.push(set_node(top , t_g , c_node , target_node))\n        }\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list.find(n => n.x === left.x  && n.y === left.y)\n        let l_g = c_node.g + size\n        if(!check_for_mix_node(target_close_list , left.x , left.y)){\n            left_in_open && l_g < left_in_open.g \n                ? update_node(left_in_open , c_node)\n                : open_list.push(set_node(left , l_g , c_node , target_node))\n        }\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list.find(n => n.x === bottom.x  && n.y === bottom.y)\n        let b_g = c_node.g + size \n        if(!check_for_mix_node(target_close_list , bottom.x , bottom.y)){\n            bottom_in_open && b_g < bottom_in_open.g \n                ? update_node(bottom_in_open , c_node)\n                : open_list.push(set_node(bottom , b_g , c_node , target_node))\n        }\n    }\n\n    return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true ) \n}\n\nconst find_path = () => {\n    let color = \"LimeGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst set_node = (node, g , c_node , target_node) => {\n    let color = \"MidnightBlue\"\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = target_node.x \n    let y_2 = target_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , c_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nexport {bidirectional_a_star , stop_bidirectional_a_star}"]},"metadata":{},"sourceType":"module"}