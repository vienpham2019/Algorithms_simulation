{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left, add_to_heap, remove_from_heap } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet close_list_1, close_list_2, open_list_1, current_node_1, open_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  end_node.distance = 0;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = start_node;\n  current_node_2 = end_node;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  print_close_and_open_list(close_list_1, open_list_1, 'MediumBlue', 'LightSkyBlue');\n  print_close_and_open_list(close_list_2, open_list_2, 'CadetBlue', 'LightCyan');\n\n  if (open_list_2.length > 0 && !finish_search) {\n    current_node_2 = open_list_2[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, open_list_2, close_list_2, close_list_1);\n  }\n\n  if (open_list_1.length > 0 && !finish_search) {\n    current_node_1 = open_list_1[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, open_list_1, close_list_1, close_list_2);\n  }\n\n  if (finish_search) {\n    start_node.draw();\n    end_node.draw();\n\n    if (!current_node_1 && !current_node_2) {\n      finish_path = true;\n    }\n\n    find_path();\n  }\n\n  if (finish_path || !open_list_1.length && !open_list_2.length) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst print_close_and_open_list = (close_list, open_list, close_color, open_color) => {\n  if (!finish_search) {\n    for (let i = 0; i < open_list.length; i++) {\n      open_list[i].color = open_color;\n      open_list[i].draw();\n    }\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = close_color;\n    }\n\n    close_list[i].draw();\n  }\n};\n\nconst check_for_mix_node = (next_close_list, x, y) => {\n  let node = next_close_list.find(node => node.x === x && node.y === y);\n\n  if (node) {\n    finish_search = true;\n\n    if (close_list_1.find(node => node.x === x && node.y === y)) {\n      current_node_1 = node;\n    } else {\n      current_node_2 = node;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst find_child_node = (c_node, open_list, close_list, next_close_list) => {\n  open_list = remove_from_heap(open_list, (a, b) => a.distance < b.distance);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes, size); // Right (x + size , y)\n\n  open_list = add_node(right, c_node, 3, close_list, open_list, next_close_list); // 3\n  // top (x , y - size)\n\n  open_list = add_node(top, c_node, 2, close_list, open_list, next_close_list); // 2\n  // left (x - size , y )\n\n  open_list = add_node(left, c_node, 1, close_list, open_list, next_close_list); // 1\n  // bottom (x , y + size)\n\n  open_list = add_node(bottom, c_node, 0, close_list, open_list, next_close_list); // 0\n\n  return open_list;\n};\n\nconst add_node = (neighbor_node, c_node, wall_num, close_list, open_list, neighbor_close_list) => {\n  if (neighbor_node && !neighbor_node.walls[wall_num] && !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n    let node_in_open = open_list.find(n => n.x === x && n.y === y);\n\n    if (!check_for_mix_node(neighbor_close_list, x, y)) {\n      if (node_in_open) {\n        update_node(node_in_open, c_node);\n      } else {\n        let new_node = create_new_node(neighbor_node, c_node);\n        open_list = add_to_heap(new_node, open_list, (a, b) => a.distance < b.distance);\n      }\n    }\n  }\n\n  return open_list;\n};\n\nconst find_path = () => {\n  let color = \"LimeGreen\";\n\n  if (current_node_1) {\n    current_node_1.color = color;\n    current_node_1 = current_node_1.prev_node;\n  }\n\n  if (current_node_2) {\n    current_node_2.color = color;\n    current_node_2 = current_node_2.prev_node;\n  }\n};\n\nconst create_new_node = (node, c_node) => {\n  let distance = find_distance(node, c_node);\n  return new Block(node.x, node.y, c, size, 'MidnightBlue', c_node, null, null, null, distance);\n};\n\nconst find_distance = (node, c_node) => {\n  // find distance from current node to next node \n  let x_1 = c_node.x;\n  let y_1 = c_node.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + c_node.distance;\n};\n\nconst update_node = (node, c_node) => {\n  if (c_node.distance + size < node.distance) {\n    node.distance = find_distance(node, c_node);\n  }\n\n  return node;\n};\n\nexport { bidirectional_dijkstra, stop_bidirectional_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","close_list_1","close_list_2","open_list_1","current_node_1","open_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_dijkstra","props","distance","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","next_close_list","x","y","node","find","c_node","a","b","top","right","bottom","left","add_node","neighbor_node","wall_num","neighbor_close_list","walls","node_in_open","n","update_node","new_node","create_new_node","prev_node","find_distance","x_1","y_1","x_2","y_2","Math","abs"],"mappings":"AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAAQC,yBAAR,EAAoCC,WAApC,EAAkDC,gBAAlD,QAAyE,0CAAzE;AAEA,IAAIC,UAAJ,EAAiBC,QAAjB,EAA4BC,KAA5B,EAAoCC,CAApC,EAAwCC,MAAxC,EAAiDC,IAAjD;AAEA,IAAIC,YAAJ,EAAmBC,YAAnB,EAAkCC,WAAlC,EAAgDC,cAAhD,EAAiEC,WAAjE,EAA8EC,cAA9E,EAA+FC,KAA/F,EAAuGC,WAAvG,EAAqHC,aAArH;;AAEA,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AACpChB,EAAAA,UAAU,GAAGgB,KAAK,CAAChB,UAAnB;AACAA,EAAAA,UAAU,CAACiB,QAAX,GAAsB,CAAtB;AAEAhB,EAAAA,QAAQ,GAAGe,KAAK,CAACf,QAAjB;AACAA,EAAAA,QAAQ,CAACgB,QAAT,GAAoB,CAApB;AAEAf,EAAAA,KAAK,GAAGc,KAAK,CAACd,KAAd;AACAC,EAAAA,CAAC,GAAGa,KAAK,CAACb,CAAV;AACAC,EAAAA,MAAM,GAAGY,KAAK,CAACZ,MAAf;AACAC,EAAAA,IAAI,GAAGW,KAAK,CAACX,IAAb;AAEAG,EAAAA,WAAW,GAAG,CAACR,UAAD,CAAd;AACAM,EAAAA,YAAY,GAAG,EAAf;AAEAI,EAAAA,WAAW,GAAG,CAACT,QAAD,CAAd;AACAM,EAAAA,YAAY,GAAG,EAAf;AAEAE,EAAAA,cAAc,GAAGT,UAAjB;AACAW,EAAAA,cAAc,GAAGV,QAAjB;AAEAY,EAAAA,WAAW,GAAG,KAAd;AACAC,EAAAA,aAAa,GAAG,KAAhB;AAEAI,EAAAA,oBAAoB,CAACN,KAAD,CAApB;AACAO,EAAAA,cAAc;AACjB,CA1BD;;AA4BA,MAAMC,2BAA2B,GAAG,MAAM;AACtCF,EAAAA,oBAAoB,CAACN,KAAD,CAApB;AACH,CAFD;;AAIA,MAAMO,cAAc,GAAG,MAAM;AACzBP,EAAAA,KAAK,GAAGS,qBAAqB,CAACF,cAAD,CAA7B;AACAhB,EAAAA,CAAC,CAACmB,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgBlB,MAAM,CAACmB,KAAvB,EAA8BnB,MAAM,CAACoB,MAArC;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGvB,KAAK,CAACwB,MAA1B,EAAmCD,CAAC,EAApC,EAAwC;AACpCvB,IAAAA,KAAK,CAACuB,CAAD,CAAL,CAASE,IAAT;AACH;;AAEDC,EAAAA,yBAAyB,CAACtB,YAAD,EAAgBE,WAAhB,EAA8B,YAA9B,EAA6C,cAA7C,CAAzB;AACAoB,EAAAA,yBAAyB,CAACrB,YAAD,EAAgBG,WAAhB,EAA8B,WAA9B,EAA4C,WAA5C,CAAzB;;AAEA,MAAGA,WAAW,CAACgB,MAAZ,GAAqB,CAArB,IAA0B,CAACZ,aAA9B,EAA4C;AACxCH,IAAAA,cAAc,GAAGD,WAAW,CAAC,CAAD,CAA5B;AACAH,IAAAA,YAAY,CAACsB,IAAb,CAAkBlB,cAAlB;AACAD,IAAAA,WAAW,GAAGoB,eAAe,CAACnB,cAAD,EAAkBD,WAAlB,EAAgCH,YAAhC,EAA+CD,YAA/C,CAA7B;AACH;;AAED,MAAGE,WAAW,CAACkB,MAAZ,GAAqB,CAArB,IAA0B,CAACZ,aAA9B,EAA4C;AACxCL,IAAAA,cAAc,GAAGD,WAAW,CAAC,CAAD,CAA5B;AACAF,IAAAA,YAAY,CAACuB,IAAb,CAAkBpB,cAAlB;AACAD,IAAAA,WAAW,GAAGsB,eAAe,CAACrB,cAAD,EAAkBD,WAAlB,EAAgCF,YAAhC,EAA+CC,YAA/C,CAA7B;AACH;;AAED,MAAGO,aAAH,EAAiB;AACbd,IAAAA,UAAU,CAAC2B,IAAX;AACA1B,IAAAA,QAAQ,CAAC0B,IAAT;;AAEA,QAAG,CAAClB,cAAD,IAAmB,CAACE,cAAvB,EAAsC;AAClCE,MAAAA,WAAW,GAAG,IAAd;AACH;;AAEDkB,IAAAA,SAAS;AACZ;;AAED,MAAGlB,WAAW,IAAK,CAACL,WAAW,CAACkB,MAAb,IAAuB,CAAChB,WAAW,CAACgB,MAAvD,EAA+D;AAC3DR,IAAAA,oBAAoB,CAACN,KAAD,CAApB;AACH;AACJ,CArCD;;AAuCA,MAAMgB,yBAAyB,GAAG,CAACI,UAAD,EAAcC,SAAd,EAA0BC,WAA1B,EAAwCC,UAAxC,KAAwD;AACtF,MAAG,CAACrB,aAAJ,EAAkB;AACd,SAAI,IAAIW,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGQ,SAAS,CAACP,MAA9B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCQ,MAAAA,SAAS,CAACR,CAAD,CAAT,CAAaW,KAAb,GAAqBD,UAArB;AACAF,MAAAA,SAAS,CAACR,CAAD,CAAT,CAAaE,IAAb;AACH;AACJ;;AAED,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGO,UAAU,CAACN,MAA/B,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,QAAG,CAACX,aAAJ,EAAkB;AACdkB,MAAAA,UAAU,CAACP,CAAD,CAAV,CAAcW,KAAd,GAAsBF,WAAtB;AACH;;AACDF,IAAAA,UAAU,CAACP,CAAD,CAAV,CAAcE,IAAd;AACH;AACJ,CAdD;;AAgBA,MAAMU,kBAAkB,GAAG,CAACC,eAAD,EAAmBC,CAAnB,EAAuBC,CAAvB,KAA6B;AACpD,MAAIC,IAAI,GAAGH,eAAe,CAACI,IAAhB,CAAqBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWA,CAAX,IAAgBE,IAAI,CAACD,CAAL,KAAWA,CAAxD,CAAX;;AACA,MAAGC,IAAH,EAAQ;AACJ3B,IAAAA,aAAa,GAAG,IAAhB;;AACA,QAAGR,YAAY,CAACoC,IAAb,CAAkBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWA,CAAX,IAAiBE,IAAI,CAACD,CAAL,KAAWA,CAAtD,CAAH,EAA4D;AACxD/B,MAAAA,cAAc,GAAGgC,IAAjB;AACH,KAFD,MAEK;AACD9B,MAAAA,cAAc,GAAG8B,IAAjB;AACH;;AACD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAZD;;AAcA,MAAMX,eAAe,GAAG,CAACa,MAAD,EAAUV,SAAV,EAAsBD,UAAtB,EAAmCM,eAAnC,KAAuD;AAC3EL,EAAAA,SAAS,GAAGlC,gBAAgB,CAACkC,SAAD,EAAa,CAACW,CAAD,EAAGC,CAAH,KAASD,CAAC,CAAC3B,QAAF,GAAa4B,CAAC,CAAC5B,QAArC,CAA5B;AACA,MAAI;AAAC6B,IAAAA,GAAD;AAAOC,IAAAA,KAAP;AAAeC,IAAAA,MAAf;AAAwBC,IAAAA;AAAxB,MAAgCpD,yBAAyB,CAAC8C,MAAD,EAAUzC,KAAV,EAAkBG,IAAlB,CAA7D,CAF2E,CAI3E;;AACA4B,EAAAA,SAAS,GAAGiB,QAAQ,CAACH,KAAD,EAASJ,MAAT,EAAkB,CAAlB,EAAsBX,UAAtB,EAAmCC,SAAnC,EAA+CK,eAA/C,CAApB,CAL2E,CAKS;AAEpF;;AACAL,EAAAA,SAAS,GAAGiB,QAAQ,CAACJ,GAAD,EAAOH,MAAP,EAAgB,CAAhB,EAAoBX,UAApB,EAAiCC,SAAjC,EAA6CK,eAA7C,CAApB,CAR2E,CAQO;AAElF;;AACAL,EAAAA,SAAS,GAAGiB,QAAQ,CAACD,IAAD,EAAQN,MAAR,EAAiB,CAAjB,EAAqBX,UAArB,EAAkCC,SAAlC,EAA8CK,eAA9C,CAApB,CAX2E,CAWQ;AAEnF;;AACAL,EAAAA,SAAS,GAAGiB,QAAQ,CAACF,MAAD,EAAUL,MAAV,EAAmB,CAAnB,EAAuBX,UAAvB,EAAoCC,SAApC,EAAgDK,eAAhD,CAApB,CAd2E,CAcU;;AAErF,SAAOL,SAAP;AACH,CAjBD;;AAmBA,MAAMiB,QAAQ,GAAG,CAACC,aAAD,EAAiBR,MAAjB,EAA0BS,QAA1B,EAAqCpB,UAArC,EAAkDC,SAAlD,EAA8DoB,mBAA9D,KAAsF;AACnG,MAAGF,aAAa,IAAI,CAACA,aAAa,CAACG,KAAd,CAAoBF,QAApB,CAAlB,IAAkD,CAACpB,UAAU,CAACU,IAAX,CAAgBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWY,aAAa,CAACZ,CAAzB,IAA8BE,IAAI,CAACD,CAAL,KAAWW,aAAa,CAACX,CAA/E,CAAtD,EAAwI;AACpI,QAAI;AAACD,MAAAA,CAAD;AAAKC,MAAAA;AAAL,QAAUW,aAAd;AACA,QAAII,YAAY,GAAGtB,SAAS,CAACS,IAAV,CAAec,CAAC,IAAIA,CAAC,CAACjB,CAAF,KAAQA,CAAR,IAAciB,CAAC,CAAChB,CAAF,KAAQA,CAA1C,CAAnB;;AAEA,QAAG,CAACH,kBAAkB,CAACgB,mBAAD,EAAuBd,CAAvB,EAA2BC,CAA3B,CAAtB,EAAoD;AAChD,UAAGe,YAAH,EAAgB;AACZE,QAAAA,WAAW,CAACF,YAAD,EAAgBZ,MAAhB,CAAX;AACH,OAFD,MAEM;AACF,YAAIe,QAAQ,GAAGC,eAAe,CAACR,aAAD,EAAiBR,MAAjB,CAA9B;AACAV,QAAAA,SAAS,GAAGnC,WAAW,CAAC4D,QAAD,EAAYzB,SAAZ,EAAwB,CAACW,CAAD,EAAGC,CAAH,KAASD,CAAC,CAAC3B,QAAF,GAAa4B,CAAC,CAAC5B,QAAhD,CAAvB;AACH;AACJ;AACJ;;AACD,SAAOgB,SAAP;AACH,CAfD;;AAiBA,MAAMF,SAAS,GAAG,MAAM;AACpB,MAAIK,KAAK,GAAG,WAAZ;;AACA,MAAG3B,cAAH,EAAkB;AACdA,IAAAA,cAAc,CAAC2B,KAAf,GAAuBA,KAAvB;AACA3B,IAAAA,cAAc,GAAGA,cAAc,CAACmD,SAAhC;AACH;;AACD,MAAGjD,cAAH,EAAkB;AACdA,IAAAA,cAAc,CAACyB,KAAf,GAAuBA,KAAvB;AACAzB,IAAAA,cAAc,GAAGA,cAAc,CAACiD,SAAhC;AACH;AACJ,CAVD;;AAYA,MAAMD,eAAe,GAAG,CAAClB,IAAD,EAAQE,MAAR,KAAmB;AACvC,MAAI1B,QAAQ,GAAG4C,aAAa,CAACpB,IAAD,EAAQE,MAAR,CAA5B;AACA,SAAO,IAAI/C,KAAJ,CAAU6C,IAAI,CAACF,CAAf,EAAmBE,IAAI,CAACD,CAAxB,EAA4BrC,CAA5B,EAAgCE,IAAhC,EAAuC,cAAvC,EAAwDsC,MAAxD,EAAiE,IAAjE,EAAwE,IAAxE,EAA+E,IAA/E,EAAsF1B,QAAtF,CAAP;AACH,CAHD;;AAKA,MAAM4C,aAAa,GAAG,CAACpB,IAAD,EAAQE,MAAR,KAAmB;AACrC;AACA,MAAImB,GAAG,GAAGnB,MAAM,CAACJ,CAAjB;AACA,MAAIwB,GAAG,GAAGpB,MAAM,CAACH,CAAjB;AAEA,MAAIwB,GAAG,GAAGvB,IAAI,CAACF,CAAf;AACA,MAAI0B,GAAG,GAAGxB,IAAI,CAACD,CAAf;AAED,SAAQ,CAAC0B,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGE,GAAf,IAAsBE,IAAI,CAACC,GAAL,CAASJ,GAAG,GAAGE,GAAf,CAAvB,IAA8C5D,IAA/C,GAAwDsC,MAAM,CAAC1B,QAAtE;AACF,CATD;;AAWA,MAAMwC,WAAW,GAAG,CAAChB,IAAD,EAAQE,MAAR,KAAmB;AACnC,MAAGA,MAAM,CAAC1B,QAAP,GAAkBZ,IAAlB,GAAyBoC,IAAI,CAACxB,QAAjC,EAA0C;AACtCwB,IAAAA,IAAI,CAACxB,QAAL,GAAgB4C,aAAa,CAACpB,IAAD,EAAQE,MAAR,CAA7B;AACH;;AACD,SAAOF,IAAP;AACH,CALD;;AAOA,SAAQ1B,sBAAR,EAAiCK,2BAAjC","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet close_list_1 , close_list_2 , open_list_1 , current_node_1 , open_list_2, current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    \n    end_node = props.end_node \n    end_node.distance = 0\n\n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n    \n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = start_node\n    current_node_2 = end_node \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MediumBlue' , 'LightSkyBlue' )\n    print_close_and_open_list(close_list_2 , open_list_2 , 'CadetBlue' , 'LightCyan')\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2 = open_list_2[0] \n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1 = open_list_1[0] \n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n\n        find_path() \n    }\n\n    if(finish_path || (!open_list_1.length && !open_list_2.length)){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color ) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (next_close_list , x , y) => {\n    let node = next_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , open_list , close_list , next_close_list) => {\n    open_list = remove_from_heap(open_list , (a,b) => a.distance < b.distance)\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // Right (x + size , y)\n    open_list = add_node(right , c_node , 3 , close_list , open_list , next_close_list) // 3\n\n    // top (x , y - size)\n    open_list = add_node(top , c_node , 2 , close_list , open_list , next_close_list) // 2\n\n    // left (x - size , y )\n    open_list = add_node(left , c_node , 1 , close_list , open_list , next_close_list) // 1\n\n    // bottom (x , y + size)\n    open_list = add_node(bottom , c_node , 0 , close_list , open_list , next_close_list) // 0\n\n    return open_list\n}\n\nconst add_node = (neighbor_node , c_node , wall_num , close_list , open_list , neighbor_close_list) => {\n    if(neighbor_node && !neighbor_node.walls[wall_num] &&!close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        \n        if(!check_for_mix_node(neighbor_close_list , x , y)){\n            if(node_in_open){\n                update_node(node_in_open , c_node) \n            } else{\n                let new_node = create_new_node(neighbor_node , c_node)\n                open_list = add_to_heap(new_node , open_list , (a,b) => a.distance < b.distance)\n            }\n        }\n    }\n    return open_list\n}\n\nconst find_path = () => {\n    let color = \"LimeGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst create_new_node = (node , c_node) => {\n    let distance = find_distance(node , c_node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , c_node , null , null , null , distance)\n}\n\nconst find_distance = (node , c_node) => {\n    // find distance from current node to next node \n    let x_1 = c_node.x \n    let y_1 = c_node.y\n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + c_node.distance\n}\n\nconst update_node = (node , c_node) => {\n    if(c_node.distance + size < node.distance){\n        node.distance = find_distance(node , c_node)\n    }\n    return node\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}