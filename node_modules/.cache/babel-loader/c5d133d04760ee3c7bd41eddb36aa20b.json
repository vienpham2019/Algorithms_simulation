{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length === 1) return array;\n  const midd_num = Math.floor(array / 2);\n  const left_array = array.slice(0, midd_num);\n  const right_array = array.slice(mid_num, array.length);\n  return merge(mergeSort(left_array), mergeSort(right_array));\n};\n\nconst merge = (left_arr, right_arr) => {\n  let sort_arr = [];\n\n  while (left_arr.lenght && right_arr.length) {\n    if (left_arr[0] < right_arr[0]) {\n      sort_arr.push(left_arr.shift());\n    } else {\n      sort_arr.push(right_arr.shift());\n    }\n  }\n\n  while (left_arr.lenght) sort_arr.push(left_arr.shift());\n\n  while (right_arr.lenght) sort_arr.push(right_arr.shift());\n\n  return sort_arr;\n};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/mergeSort.js"],"names":["mergeSort","array","length","midd_num","Math","floor","left_array","slice","right_array","mid_num","merge","left_arr","right_arr","sort_arr","lenght","push","shift"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAChC,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAuB,OAAOD,KAAP;AAEvB,QAAME,QAAQ,GAAIC,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAG,CAAnB,CAAlB;AACA,QAAMK,UAAU,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAgBJ,QAAhB,CAAnB;AACA,QAAMK,WAAW,GAAGP,KAAK,CAACM,KAAN,CAAYE,OAAZ,EAAsBR,KAAK,CAACC,MAA5B,CAApB;AAEA,SAAOQ,KAAK,CAACV,SAAS,CAACM,UAAD,CAAV,EAAwBN,SAAS,CAACQ,WAAD,CAAjC,CAAZ;AACH,CARM;;AAUP,MAAME,KAAK,GAAG,CAACC,QAAD,EAAYC,SAAZ,KAA2B;AACrC,MAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAMF,QAAQ,CAACG,MAAT,IAAmBF,SAAS,CAACV,MAAnC,EAA0C;AACtC,QAAGS,QAAQ,CAAC,CAAD,CAAR,GAAcC,SAAS,CAAC,CAAD,CAA1B,EAA8B;AAC1BC,MAAAA,QAAQ,CAACE,IAAT,CAAcJ,QAAQ,CAACK,KAAT,EAAd;AACH,KAFD,MAEK;AACDH,MAAAA,QAAQ,CAACE,IAAT,CAAcH,SAAS,CAACI,KAAV,EAAd;AACH;AACJ;;AAED,SAAML,QAAQ,CAACG,MAAf,EAAuBD,QAAQ,CAACE,IAAT,CAAcJ,QAAQ,CAACK,KAAT,EAAd;;AACvB,SAAMJ,SAAS,CAACE,MAAhB,EAAwBD,QAAQ,CAACE,IAAT,CAAcH,SAAS,CAACI,KAAV,EAAd;;AAExB,SAAOH,QAAP;AACH,CAfD","sourcesContent":["export const mergeSort = (array) => {\n    if(array.length === 1) return array\n\n    const midd_num  = Math.floor(array / 2)\n    const left_array = array.slice(0 , midd_num) \n    const right_array = array.slice(mid_num , array.length)\n\n    return merge(mergeSort(left_array), mergeSort(right_array))\n}\n\nconst merge = (left_arr , right_arr ) => {\n    let sort_arr = []\n\n    while(left_arr.lenght && right_arr.length){\n        if(left_arr[0] < right_arr[0]){\n            sort_arr.push(left_arr.shift())\n        }else{\n            sort_arr.push(right_arr.shift())\n        }\n    }\n\n    while(left_arr.lenght) sort_arr.push(left_arr.shift())\n    while(right_arr.lenght) sort_arr.push(right_arr.shift())\n\n    return sort_arr\n}"]},"metadata":{},"sourceType":"module"}