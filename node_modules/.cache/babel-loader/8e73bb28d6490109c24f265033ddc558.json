{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list_1, close_list_1, current_node_1, open_list_2, close_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_a_star = props => {\n  start_node = props.start_node;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = null;\n  current_node_2 = null;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_a_star = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  print_close_and_open_list(close_list_1, open_list_1, 'MediumBlue', 'LightSkyBlue');\n  print_close_and_open_list(close_list_2, open_list_2, 'DarkTurquoise', 'LightCyan');\n\n  if (open_list_1.length > 0 && !finish_search) {\n    current_node_1 = open_list_1.sort((a, b) => a.f - b.f)[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, end_node, open_list_1, close_list_1, close_list_2);\n  }\n\n  if (open_list_2.length > 0 && !finish_search) {\n    current_node_2 = open_list_2.sort((a, b) => a.f - b.f)[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, start_node, open_list_2, close_list_2, close_list_1);\n  }\n\n  if (finish_search) {\n    start_node.draw();\n    end_node.draw();\n\n    if (!current_node_1 && !current_node_2) {\n      finish_path = true;\n    }\n\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst print_close_and_open_list = (close_list, open_list, close_color, open_color) => {\n  if (!finish_search) {\n    for (let i = 0; i < open_list.length; i++) {\n      open_list[i].color = open_color;\n      open_list[i].draw();\n    }\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = close_color;\n    }\n\n    close_list[i].draw();\n  }\n};\n\nconst check_for_mix_node = (target_close_list, x, y) => {\n  let node = target_close_list.find(node => node.x === x && node.y === y);\n\n  if (node) {\n    finish_search = true;\n\n    if (close_list_1.find(node => node.x === x && node.y === y)) {\n      current_node_1 = node;\n    } else {\n      current_node_2 = node;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst find_child_node = (c_node, target_node, open_list, close_list, target_close_list) => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes, size); // right (x + size , y)\n\n  open_list = add_node(c_node, right, 3, close_list, open_list, target_close_list, target_node); // top (x , y - size)\n\n  open_list = add_node(c_node, top, 2, close_list, open_list, target_close_list, target_node); // left (x - size , y )\n\n  open_list = add_node(c_node, left, 1, close_list, open_list, target_close_list, target_node); // bottom (x , y + size)\n\n  open_list = add_node(c_node, bottom, 0, close_list, open_list, target_close_list, target_node);\n  return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true);\n};\n\nconst add_node = (c_node, neighbor_node, wall_num, close_list, open_list, target_close_list, target_node) => {\n  if (neighbor_node && !neighbor_node.walls[wall_num] && !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n    let node_in_open = open_list.find(n => n.x === x && n.y === y);\n    let n_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, x, y)) {\n      node_in_open && n_g < node_in_open.g ? update_node(node_in_open, n_g, c_node) : open_list.push(set_node(neighbor_node, n_g, c_node, target_node));\n    }\n  }\n\n  return open_list;\n};\n\nconst find_path = () => {\n  let color = \"MediumSeaGreen\";\n\n  if (current_node_1) {\n    current_node_1.color = color;\n    current_node_1 = current_node_1.prev_node;\n  }\n\n  if (current_node_2) {\n    current_node_2.color = color;\n    current_node_2 = current_node_2.prev_node;\n  }\n};\n\nconst set_node = (node, g, c_node, target_node) => {\n  let color = \"SpringGreen\";\n  let x_1 = node.x;\n  let y_1 = node.y;\n  let x_2 = target_node.x;\n  let y_2 = target_node.y;\n  let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size;\n  let f = h + g;\n  let new_node = new Block(x_1, y_1, c, size, color, c_node, g, h, f);\n  return new_node;\n};\n\nconst update_node = (node, g, parent) => {\n  node.g = g;\n  node.f = g + node.h;\n  node.parent = parent;\n};\n\nexport { bidirectional_a_star, stop_bidirectional_a_star };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_a_star.js"],"names":["Block","get_top_right_bottom_left","start_node","end_node","nodes","c","canvas","size","open_list_1","close_list_1","current_node_1","open_list_2","close_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_a_star","props","cancelAnimationFrame","run_solve_maze","stop_bidirectional_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","sort","a","b","f","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","target_close_list","x","y","node","find","c_node","target_node","top","right","bottom","left","add_node","filter","neighbor_node","wall_num","walls","node_in_open","n","n_g","g","update_node","set_node","prev_node","x_1","y_1","x_2","y_2","h","Math","abs","new_node","parent"],"mappings":"AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAAQC,yBAAR,QAAwC,0CAAxC;AAEA,IAAIC,UAAJ,EAAiBC,QAAjB,EAA4BC,KAA5B,EAAoCC,CAApC,EAAwCC,MAAxC,EAAiDC,IAAjD;AAEA,IAAIC,WAAJ,EAAkBC,YAAlB,EAAiCC,cAAjC,EAAkDC,WAAlD,EAAgEC,YAAhE,EAA+EC,cAA/E,EAAgGC,KAAhG,EAAwGC,WAAxG,EAAsHC,aAAtH;;AAEA,MAAMC,oBAAoB,GAAGC,KAAK,IAAI;AAClChB,EAAAA,UAAU,GAAGgB,KAAK,CAAChB,UAAnB;AACAC,EAAAA,QAAQ,GAAGe,KAAK,CAACf,QAAjB;AACAC,EAAAA,KAAK,GAAGc,KAAK,CAACd,KAAd;AACAC,EAAAA,CAAC,GAAGa,KAAK,CAACb,CAAV;AACAC,EAAAA,MAAM,GAAGY,KAAK,CAACZ,MAAf;AACAC,EAAAA,IAAI,GAAGW,KAAK,CAACX,IAAb;AAEAC,EAAAA,WAAW,GAAG,CAACN,UAAD,CAAd;AACAO,EAAAA,YAAY,GAAG,EAAf;AAEAE,EAAAA,WAAW,GAAG,CAACR,QAAD,CAAd;AACAS,EAAAA,YAAY,GAAG,EAAf;AAEAF,EAAAA,cAAc,GAAG,IAAjB;AACAG,EAAAA,cAAc,GAAG,IAAjB;AAEAE,EAAAA,WAAW,GAAG,KAAd;AACAC,EAAAA,aAAa,GAAG,KAAhB;AAEAG,EAAAA,oBAAoB,CAACL,KAAD,CAApB;AACAM,EAAAA,cAAc;AACjB,CAtBD;;AAwBA,MAAMC,yBAAyB,GAAG,MAAM;AACpCF,EAAAA,oBAAoB,CAACL,KAAD,CAApB;AACH,CAFD;;AAIA,MAAMM,cAAc,GAAG,MAAM;AACzBN,EAAAA,KAAK,GAAGQ,qBAAqB,CAACF,cAAD,CAA7B;AACAf,EAAAA,CAAC,CAACkB,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgBjB,MAAM,CAACkB,KAAvB,EAA8BlB,MAAM,CAACmB,MAArC;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGtB,KAAK,CAACuB,MAA1B,EAAmCD,CAAC,EAApC,EAAwC;AACpCtB,IAAAA,KAAK,CAACsB,CAAD,CAAL,CAASE,IAAT;AACH;;AAEDC,EAAAA,yBAAyB,CAACpB,YAAD,EAAgBD,WAAhB,EAA8B,YAA9B,EAA6C,cAA7C,CAAzB;AACAqB,EAAAA,yBAAyB,CAACjB,YAAD,EAAgBD,WAAhB,EAA8B,eAA9B,EAAgD,WAAhD,CAAzB;;AAEA,MAAGH,WAAW,CAACmB,MAAZ,GAAqB,CAArB,IAA0B,CAACX,aAA9B,EAA4C;AACxCN,IAAAA,cAAc,GAAEF,WAAW,CAACsB,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CAAlC,EAAqC,CAArC,CAAhB;AACAxB,IAAAA,YAAY,CAACyB,IAAb,CAAkBxB,cAAlB;AACAF,IAAAA,WAAW,GAAG2B,eAAe,CAACzB,cAAD,EAAkBP,QAAlB,EAA4BK,WAA5B,EAA0CC,YAA1C,EAAyDG,YAAzD,CAA7B;AACH;;AAED,MAAGD,WAAW,CAACgB,MAAZ,GAAqB,CAArB,IAA0B,CAACX,aAA9B,EAA4C;AACxCH,IAAAA,cAAc,GAAEF,WAAW,CAACmB,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CAAlC,EAAqC,CAArC,CAAhB;AACArB,IAAAA,YAAY,CAACsB,IAAb,CAAkBrB,cAAlB;AACAF,IAAAA,WAAW,GAAGwB,eAAe,CAACtB,cAAD,EAAkBX,UAAlB,EAA8BS,WAA9B,EAA4CC,YAA5C,EAA2DH,YAA3D,CAA7B;AACH;;AAED,MAAGO,aAAH,EAAiB;AACbd,IAAAA,UAAU,CAAC0B,IAAX;AACAzB,IAAAA,QAAQ,CAACyB,IAAT;;AAEA,QAAG,CAAClB,cAAD,IAAmB,CAACG,cAAvB,EAAsC;AAClCE,MAAAA,WAAW,GAAG,IAAd;AACH;;AACDqB,IAAAA,SAAS;AACZ;;AAED,MAAGrB,WAAH,EAAe;AACXI,IAAAA,oBAAoB,CAACL,KAAD,CAApB;AACH;AACJ,CApCD;;AAsCA,MAAMe,yBAAyB,GAAG,CAACQ,UAAD,EAAcC,SAAd,EAA0BC,WAA1B,EAAwCC,UAAxC,KAAuD;AACrF,MAAG,CAACxB,aAAJ,EAAkB;AACd,SAAI,IAAIU,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGY,SAAS,CAACX,MAA9B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCY,MAAAA,SAAS,CAACZ,CAAD,CAAT,CAAae,KAAb,GAAqBD,UAArB;AACAF,MAAAA,SAAS,CAACZ,CAAD,CAAT,CAAaE,IAAb;AACH;AACJ;;AAED,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGW,UAAU,CAACV,MAA/B,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,QAAG,CAACV,aAAJ,EAAkB;AACdqB,MAAAA,UAAU,CAACX,CAAD,CAAV,CAAce,KAAd,GAAsBF,WAAtB;AACH;;AACDF,IAAAA,UAAU,CAACX,CAAD,CAAV,CAAcE,IAAd;AACH;AACJ,CAdD;;AAgBA,MAAMc,kBAAkB,GAAG,CAACC,iBAAD,EAAqBC,CAArB,EAAyBC,CAAzB,KAA+B;AACtD,MAAIC,IAAI,GAAGH,iBAAiB,CAACI,IAAlB,CAAuBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWA,CAAX,IAAgBE,IAAI,CAACD,CAAL,KAAWA,CAA1D,CAAX;;AACA,MAAGC,IAAH,EAAQ;AACJ9B,IAAAA,aAAa,GAAG,IAAhB;;AACA,QAAGP,YAAY,CAACsC,IAAb,CAAkBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWA,CAAX,IAAiBE,IAAI,CAACD,CAAL,KAAWA,CAAtD,CAAH,EAA4D;AACxDnC,MAAAA,cAAc,GAAGoC,IAAjB;AACH,KAFD,MAEK;AACDjC,MAAAA,cAAc,GAAGiC,IAAjB;AACH;;AACD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAZD;;AAcA,MAAMX,eAAe,GAAG,CAACa,MAAD,EAAUC,WAAV,EAAwBX,SAAxB,EAAoCD,UAApC,EAAiDM,iBAAjD,KAAuE;AAE3F,MAAI;AAACO,IAAAA,GAAD;AAAOC,IAAAA,KAAP;AAAeC,IAAAA,MAAf;AAAwBC,IAAAA;AAAxB,MAAgCpD,yBAAyB,CAAC+C,MAAD,EAAU5C,KAAV,EAAkBG,IAAlB,CAA7D,CAF2F,CAI3F;;AACA+B,EAAAA,SAAS,GAAGgB,QAAQ,CAACN,MAAD,EAAUG,KAAV,EAAkB,CAAlB,EAAsBd,UAAtB,EAAmCC,SAAnC,EAA+CK,iBAA/C,EAAmEM,WAAnE,CAApB,CAL2F,CAO3F;;AACAX,EAAAA,SAAS,GAAGgB,QAAQ,CAACN,MAAD,EAAUE,GAAV,EAAgB,CAAhB,EAAoBb,UAApB,EAAiCC,SAAjC,EAA6CK,iBAA7C,EAAiEM,WAAjE,CAApB,CAR2F,CAU3F;;AACAX,EAAAA,SAAS,GAAGgB,QAAQ,CAACN,MAAD,EAAUK,IAAV,EAAiB,CAAjB,EAAqBhB,UAArB,EAAkCC,SAAlC,EAA8CK,iBAA9C,EAAkEM,WAAlE,CAApB,CAX2F,CAa3F;;AACAX,EAAAA,SAAS,GAAGgB,QAAQ,CAACN,MAAD,EAAUI,MAAV,EAAmB,CAAnB,EAAuBf,UAAvB,EAAoCC,SAApC,EAAgDK,iBAAhD,EAAoEM,WAApE,CAApB;AAEA,SAAOX,SAAS,CAACiB,MAAV,CAAiBT,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWI,MAAM,CAACJ,CAAlB,IAAuBE,IAAI,CAACD,CAAL,KAAWG,MAAM,CAACH,CAAzC,GAA6C,KAA7C,GAAqD,IAA9E,CAAP;AACH,CAjBD;;AAmBA,MAAMS,QAAQ,GAAG,CAACN,MAAD,EAAUQ,aAAV,EAA0BC,QAA1B,EAAqCpB,UAArC,EAAkDC,SAAlD,EAA8DK,iBAA9D,EAAkFM,WAAlF,KAAkG;AAC/G,MACIO,aAAa,IACV,CAACA,aAAa,CAACE,KAAd,CAAoBD,QAApB,CADJ,IAEG,CAACpB,UAAU,CAACU,IAAX,CAAgBD,IAAI,IAAIA,IAAI,CAACF,CAAL,KAAWY,aAAa,CAACZ,CAAzB,IAA+BE,IAAI,CAACD,CAAL,KAAWW,aAAa,CAACX,CAAhF,CAHR,EAIC;AACG,QAAI;AAACD,MAAAA,CAAD;AAAKC,MAAAA;AAAL,QAAUW,aAAd;AACA,QAAIG,YAAY,GAAGrB,SAAS,CAACS,IAAV,CAAea,CAAC,IAAIA,CAAC,CAAChB,CAAF,KAAQA,CAAR,IAAcgB,CAAC,CAACf,CAAF,KAAQA,CAA1C,CAAnB;AACA,QAAIgB,GAAG,GAAGb,MAAM,CAACc,CAAP,GAAWvD,IAArB;;AAEA,QAAG,CAACmC,kBAAkB,CAACC,iBAAD,EAAqBC,CAArB,EAAyBC,CAAzB,CAAtB,EAAkD;AAC9Cc,MAAAA,YAAY,IAAIE,GAAG,GAAGF,YAAY,CAACG,CAAnC,GACMC,WAAW,CAACJ,YAAD,EAAeE,GAAf,EAAqBb,MAArB,CADjB,GAEMV,SAAS,CAACJ,IAAV,CAAe8B,QAAQ,CAACR,aAAD,EAAiBK,GAAjB,EAAuBb,MAAvB,EAAgCC,WAAhC,CAAvB,CAFN;AAGH;AACJ;;AACD,SAAOX,SAAP;AACH,CAjBD;;AAmBA,MAAMF,SAAS,GAAG,MAAM;AACpB,MAAIK,KAAK,GAAG,gBAAZ;;AACA,MAAG/B,cAAH,EAAkB;AACdA,IAAAA,cAAc,CAAC+B,KAAf,GAAuBA,KAAvB;AACA/B,IAAAA,cAAc,GAAGA,cAAc,CAACuD,SAAhC;AACH;;AACD,MAAGpD,cAAH,EAAkB;AACdA,IAAAA,cAAc,CAAC4B,KAAf,GAAuBA,KAAvB;AACA5B,IAAAA,cAAc,GAAGA,cAAc,CAACoD,SAAhC;AACH;AACJ,CAVD;;AAYA,MAAMD,QAAQ,GAAG,CAAClB,IAAD,EAAOgB,CAAP,EAAWd,MAAX,EAAoBC,WAApB,KAAoC;AACjD,MAAIR,KAAK,GAAG,aAAZ;AACA,MAAIyB,GAAG,GAAGpB,IAAI,CAACF,CAAf;AACA,MAAIuB,GAAG,GAAGrB,IAAI,CAACD,CAAf;AACA,MAAIuB,GAAG,GAAGnB,WAAW,CAACL,CAAtB;AACA,MAAIyB,GAAG,GAAGpB,WAAW,CAACJ,CAAtB;AACA,MAAIyB,CAAC,GAAG,CAACC,IAAI,CAACC,GAAL,CAASN,GAAG,GAAGE,GAAf,IAAsBG,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGE,GAAf,CAAvB,IAA8C9D,IAAtD;AACA,MAAI0B,CAAC,GAAGqC,CAAC,GAAGR,CAAZ;AACA,MAAIW,QAAQ,GAAG,IAAIzE,KAAJ,CAAUkE,GAAV,EAAgBC,GAAhB,EAAsB9D,CAAtB,EAA0BE,IAA1B,EAAiCkC,KAAjC,EAAyCO,MAAzC,EAAkDc,CAAlD,EAAsDQ,CAAtD,EAA0DrC,CAA1D,CAAf;AACA,SAAOwC,QAAP;AACH,CAVD;;AAYA,MAAMV,WAAW,GAAG,CAACjB,IAAD,EAAQgB,CAAR,EAAYY,MAAZ,KAAuB;AACvC5B,EAAAA,IAAI,CAACgB,CAAL,GAASA,CAAT;AACAhB,EAAAA,IAAI,CAACb,CAAL,GAAS6B,CAAC,GAAGhB,IAAI,CAACwB,CAAlB;AACAxB,EAAAA,IAAI,CAAC4B,MAAL,GAAcA,MAAd;AACH,CAJD;;AAMA,SAAQzD,oBAAR,EAA+BI,yBAA/B","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list_1 , close_list_1 , current_node_1 , open_list_2 , close_list_2 , current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = null \n    current_node_2 = null \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MediumBlue' , 'LightSkyBlue' )\n    print_close_and_open_list(close_list_2 , open_list_2 , 'DarkTurquoise' , 'LightCyan')\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1= open_list_1.sort((a,b) => a.f - b.f)[0]\n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , end_node, open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2= open_list_2.sort((a,b) => a.f - b.f)[0]\n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , start_node, open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (target_close_list , x , y) => {\n    let node = target_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , target_node , open_list , close_list , target_close_list) => {\n\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // right (x + size , y)\n    open_list = add_node(c_node , right , 3 , close_list , open_list , target_close_list , target_node)\n\n    // top (x , y - size)\n    open_list = add_node(c_node , top , 2 , close_list , open_list , target_close_list , target_node)\n\n    // left (x - size , y )\n    open_list = add_node(c_node , left , 1 , close_list , open_list , target_close_list , target_node)\n\n    // bottom (x , y + size)\n    open_list = add_node(c_node , bottom , 0 , close_list , open_list , target_close_list , target_node)\n\n    return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true ) \n}\n\nconst add_node = (c_node , neighbor_node , wall_num , close_list , open_list , target_close_list , target_node) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        && !close_list.find(node => node.x === neighbor_node.x  && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node \n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        let n_g = c_node.g + size\n\n        if(!check_for_mix_node(target_close_list , x , y)){\n            node_in_open && n_g < node_in_open.g \n                ? update_node(node_in_open, n_g , c_node )\n                : open_list.push(set_node(neighbor_node , n_g , c_node , target_node))\n        }\n    }\n    return open_list\n}\n\nconst find_path = () => {\n    let color = \"MediumSeaGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst set_node = (node, g , c_node , target_node) => {\n    let color = \"SpringGreen\"\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = target_node.x \n    let y_2 = target_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , c_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nexport {bidirectional_a_star , stop_bidirectional_a_star}"]},"metadata":{},"sourceType":"module"}