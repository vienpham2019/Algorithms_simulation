{"ast":null,"code":"import { Block } from '../helper_method';\nlet nodes, canvas, c, start_node, end_node, stack, size, cols, rows;\nlet block, finish_path, myReq, visited_nodes, width, height;\n\nconst depth_first_search_maze = props => {\n  nodes = props.nodes;\n  canvas = props.canvas;\n  c = props.c;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  stack = props.stack;\n  size = props.size;\n  cols = props.cols;\n  rows = props.rows;\n  block = new Block(size / 2, size / 2, c, size);\n  width = cols * size;\n  height = rows * size;\n  finish_path = false;\n  visited_nodes = [];\n  cancelAnimationFrame(myReq);\n  draw_maze();\n};\n\nconst draw_maze = () => {\n  setTimeout(() => {\n    myReq = requestAnimationFrame(draw_maze);\n  }, 100);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  if (stack.length === 0) {\n    start_node.draw();\n    end_node.draw();\n\n    if (finish_path) {\n      cancelAnimationFrame(myReq);\n    }\n  } else {\n    move_block();\n  }\n};\n\nconst move_block = () => {\n  let current_node = stack[0];\n  let neighbor_nodes = [];\n  let x = current_node.x;\n  let y = current_node.y; // top\n\n  if (y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)) {\n    let top = nodes.find(n => n.x === x && n.y === y - size);\n    neighbor_nodes.push(top);\n  } // right \n\n\n  if (x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)) {\n    let right = nodes.find(n => n.x === x + size && n.y === y);\n    neighbor_nodes.push(right);\n  } // bottom\n\n\n  if (y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)) {\n    let bottom = nodes.find(n => n.x === x && n.y === y + size);\n    neighbor_nodes.push(bottom);\n  } // left\n\n\n  if (x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)) {\n    let left = nodes.find(n => n.x === x - size && n.y === y);\n    neighbor_nodes.push(left);\n  }\n\n  if (neighbor_nodes.length > 0) {\n    let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)];\n    stack.unshift(next_node);\n    visited_nodes.push(next_node);\n    block.dx = next_node.x - current_node.x;\n    block.dy = next_node.y - current_node.y;\n    block.x += block.dx;\n    block.y += block.dy;\n\n    if (block.dx > 0) {\n      // right \n      current_node.walls[1] = false;\n      next_node.walls[3] = false;\n    } else if (block.dx < 0) {\n      // left\n      current_node.walls[3] = false;\n      next_node.walls[1] = false;\n    }\n\n    if (block.dy > 0) {\n      // down\n      current_node.walls[2] = false;\n      next_node.walls[0] = false;\n    } else if (block.dy < 0) {\n      // up\n      current_node.walls[0] = false;\n      next_node.walls[2] = false;\n    }\n  } else {\n    let dx = current_node.x - (block.x + size);\n    let dy = current_node.y - (block.y + size);\n    block.x += dx;\n    block.y += dy;\n    stack.shift();\n  }\n\n  block.draw();\n};\n\nexport { depth_first_search_maze };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/draw_maze/depth_first_search_maze_generation.js"],"names":["Block","nodes","canvas","c","start_node","end_node","stack","size","cols","rows","block","finish_path","myReq","visited_nodes","width","height","depth_first_search_maze","props","cancelAnimationFrame","draw_maze","setTimeout","requestAnimationFrame","clearRect","i","length","draw","move_block","current_node","neighbor_nodes","x","y","find","n","top","push","right","bottom","left","next_node","Math","floor","random","unshift","dx","dy","walls","shift"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet nodes , canvas , c , start_node , end_node , stack , size , cols , rows\n\nlet block , finish_path , myReq , visited_nodes , width , height \n\nconst depth_first_search_maze = props => {\n    nodes = props.nodes \n    canvas = props.canvas \n    c = props.c \n    start_node = props.start_node  \n    end_node = props.end_node\n    stack = props.stack\n    size = props.size\n    cols = props.cols \n    rows = props.rows\n\n    block = new Block(size / 2,size / 2 , c , size)\n\n    width = cols * size \n    height = rows * size  \n\n    finish_path = false   \n    visited_nodes = []\n\n    cancelAnimationFrame(myReq)\n\n    draw_maze()\n}\nconst draw_maze = () => {\n    setTimeout(() => {\n        myReq = requestAnimationFrame(draw_maze)\n    }, 100);\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    if(stack.length === 0){\n        start_node.draw()\n        end_node.draw()\n       if(finish_path){\n            cancelAnimationFrame(myReq)\n        }\n    }else{ \n        move_block()  \n    }\n}\n\nconst move_block = () => {\n    let current_node = stack[0]\n    let neighbor_nodes = []\n    let x = current_node.x\n    let y = current_node.y\n\n    // top\n    if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n        let top = nodes.find(n => n.x === x && n.y === y - size)\n        neighbor_nodes.push(top)\n    }\n\n    // right \n    if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n        let right = nodes.find(n => n.x === x + size && n.y === y)\n        neighbor_nodes.push(right)\n    }\n\n    // bottom\n    if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n        let bottom = nodes.find(n => n.x === x && n.y === y + size)\n        neighbor_nodes.push(bottom)\n    }\n\n    // left\n    if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n        let left = nodes.find(n => n.x === x - size && n.y === y)\n        neighbor_nodes.push(left)\n    }\n\n    if(neighbor_nodes.length > 0){\n        let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n        stack.unshift(next_node)\n        visited_nodes.push(next_node)\n        block.dx = next_node.x - current_node.x\n        block.dy = next_node.y - current_node.y\n\n        block.x += block.dx \n        block.y += block.dy\n\n        if(block.dx > 0) { // right \n            current_node.walls[1] = false \n            next_node.walls[3] = false \n        }else if(block.dx < 0){ // left\n            current_node.walls[3] = false \n            next_node.walls[1] = false \n        } \n\n        if(block.dy > 0) { // down\n            current_node.walls[2] = false \n            next_node.walls[0] = false \n        }else if(block.dy < 0){ // up\n            current_node.walls[0] = false \n            next_node.walls[2] = false \n        }\n    }else{\n        let dx = current_node.x  - (block.x + (size))\n        let dy = current_node.y  - (block.y + (size))\n        block.x += dx \n        block.y += dy\n        stack.shift()\n    }\n    block.draw()\n}\n\nexport {depth_first_search_maze}"]},"metadata":{},"sourceType":"module"}