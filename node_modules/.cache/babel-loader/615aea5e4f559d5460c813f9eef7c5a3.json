{"ast":null,"code":"import { Node, Block } from './helper_method';\nimport { breadth_first_search, stop_breadth_first_search } from './solve_maze/breadth_first_search';\nimport { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'; // import { prims_maze } from './draw_maze/prims_maze_generation'\n// import { depth_first_search_maze } from './draw_maze/depth_first_search_maze_generation'\n\nlet size, width, height, cols, rows;\nlet delay, speed, canvas, c, start_node, end_node, nodes, stack, frame_per_second, maze_speed, myTimeOut;\n\nconst setUp = props => {\n  stop_breadth_first_search();\n  c = props.c;\n  canvas = props.canvas;\n  nodes = [];\n  stack = [];\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = size * cols;\n  height = size * rows;\n  delay = 0;\n  speed = 100;\n  maze_speed = 10;\n  frame_per_second = 1000;\n  canvas.width = width;\n  canvas.height = height;\n  clearTimeout(myTimeOut);\n  draw_divide_maze();\n};\n\nconst draw_divide_maze = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size);\n\n      if (i === 0 && j !== 0) {\n        node.walls[0] = true;\n      } else if (i === rows - 1) {\n        node.walls[2] = true;\n      }\n\n      if (j === 0) {\n        node.walls[3] = true;\n      } else if (j === cols - 1 && i !== rows - 1) {\n        node.walls[1] = true;\n      }\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  start_node = new Block(size / 2, size / 2, c, size, \"blue\");\n  end_node = new Block((cols - 1) * size + size / 2, (rows - 1) * size + size / 2, c, size, \"green\"); // depth_first_search_maze({nodes , canvas , c , start_node , end_node , stack , size \n  // , cols , rows , frame_per_second , speed })\n  // prims_maze({size , nodes , cols , rows , canvas , c , frame_per_second , speed})\n\n  let draw_delay = recursive_dividion_maze({\n    delay,\n    maze_speed,\n    size,\n    cols,\n    rows,\n    nodes\n  });\n\n  if (draw_delay) {\n    myTimeOut = setTimeout(() => {\n      breadth_first_search({\n        nodes,\n        start_node,\n        end_node,\n        c,\n        canvas,\n        size\n      });\n    }, draw_delay * maze_speed);\n  }\n};\n\nexport { setUp };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["Node","Block","breadth_first_search","stop_breadth_first_search","recursive_dividion_maze","size","width","height","cols","rows","delay","speed","canvas","c","start_node","end_node","nodes","stack","frame_per_second","maze_speed","myTimeOut","setUp","props","clearTimeout","draw_divide_maze","i","j","x","y","node","walls","push","draw_delay","setTimeout"],"mappings":"AAAA,SAASA,IAAT,EAAgBC,KAAhB,QAA6B,iBAA7B;AACA,SAASC,oBAAT,EAAgCC,yBAAhC,QAAgE,mCAAhE;AACA,SAASC,uBAAT,QAAwC,gDAAxC,C,CACA;AACA;;AAEA,IAAIC,IAAJ,EAAWC,KAAX,EAAmBC,MAAnB,EAA4BC,IAA5B,EAAmCC,IAAnC;AAEA,IAAIC,KAAJ,EAAYC,KAAZ,EAAoBC,MAApB,EAA6BC,CAA7B,EAAiCC,UAAjC,EAA6CC,QAA7C,EAAwDC,KAAxD,EAAgEC,KAAhE,EAAwEC,gBAAxE,EAA2FC,UAA3F,EAAwGC,SAAxG;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvBnB,EAAAA,yBAAyB;AACzBU,EAAAA,CAAC,GAAGS,KAAK,CAACT,CAAV;AACAD,EAAAA,MAAM,GAAGU,KAAK,CAACV,MAAf;AACAI,EAAAA,KAAK,GAAG,EAAR;AACAC,EAAAA,KAAK,GAAG,EAAR;AAEAT,EAAAA,IAAI,GAAGc,KAAK,CAACd,IAAb;AACAC,EAAAA,IAAI,GAAGa,KAAK,CAACb,IAAb;AACAJ,EAAAA,IAAI,GAAGiB,KAAK,CAACjB,IAAb;AACAC,EAAAA,KAAK,GAAGD,IAAI,GAAGG,IAAf;AACAD,EAAAA,MAAM,GAAGF,IAAI,GAAGI,IAAhB;AAEAC,EAAAA,KAAK,GAAG,CAAR;AACAC,EAAAA,KAAK,GAAG,GAAR;AACAQ,EAAAA,UAAU,GAAG,EAAb;AAEAD,EAAAA,gBAAgB,GAAG,IAAnB;AAEAN,EAAAA,MAAM,CAACN,KAAP,GAAeA,KAAf;AACAM,EAAAA,MAAM,CAACL,MAAP,GAAgBA,MAAhB;AAEAgB,EAAAA,YAAY,CAACH,SAAD,CAAZ;AACAI,EAAAA,gBAAgB;AACjB,CAxBD;;AA0BA,MAAMA,gBAAgB,GAAG,MAAM;AAC7B,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGhB,IAAnB,EAA0BgB,CAAC,EAA3B,EAA+B;AAC7B,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,IAAnB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC3B,UAAIC,CAAC,GAAGD,CAAC,GAAGrB,IAAJ,GAAYA,IAAI,GAAG,CAA3B;AACA,UAAIuB,CAAC,GAAGH,CAAC,GAAGpB,IAAJ,GAAYA,IAAI,GAAG,CAA3B;AACA,UAAIwB,IAAI,GAAG,IAAI7B,IAAJ,CAAS2B,CAAT,EAAYC,CAAZ,EAAgBf,CAAhB,EAAoBR,IAApB,CAAX;;AACA,UAAGoB,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAApB,EAAuB;AACnBG,QAAAA,IAAI,CAACC,KAAL,CAAW,CAAX,IAAgB,IAAhB;AACH,OAFD,MAEM,IAAGL,CAAC,KAAKhB,IAAI,GAAG,CAAhB,EAAkB;AACpBoB,QAAAA,IAAI,CAACC,KAAL,CAAW,CAAX,IAAgB,IAAhB;AACH;;AAED,UAAGJ,CAAC,KAAK,CAAT,EAAW;AACPG,QAAAA,IAAI,CAACC,KAAL,CAAW,CAAX,IAAgB,IAAhB;AACH,OAFD,MAEM,IAAGJ,CAAC,KAAKlB,IAAI,GAAG,CAAb,IAAkBiB,CAAC,KAAKhB,IAAI,GAAG,CAAlC,EAAoC;AACtCoB,QAAAA,IAAI,CAACC,KAAL,CAAW,CAAX,IAAgB,IAAhB;AACH;;AAED,UAAGL,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAApB,EAAsB;AAClBT,QAAAA,KAAK,CAACc,IAAN,CAAWF,IAAX;AACH;;AACDb,MAAAA,KAAK,CAACe,IAAN,CAAWF,IAAX;AACH;AACF;;AAEDf,EAAAA,UAAU,GAAG,IAAIb,KAAJ,CAAUI,IAAI,GAAG,CAAjB,EAAmBA,IAAI,GAAG,CAA1B,EAA8BQ,CAA9B,EAAkCR,IAAlC,EAAyC,MAAzC,CAAb;AACAU,EAAAA,QAAQ,GAAG,IAAId,KAAJ,CAAU,CAACO,IAAI,GAAG,CAAR,IAAaH,IAAb,GAAqBA,IAAI,GAAG,CAAtC,EAAyC,CAAEI,IAAI,GAAG,CAAT,IAAeJ,IAAf,GAAuBA,IAAI,GAAG,CAAvE,EAA4EQ,CAA5E,EAAgFR,IAAhF,EAAuF,OAAvF,CAAX,CA1B6B,CA2B7B;AACA;AACA;;AACA,MAAI2B,UAAU,GAAG5B,uBAAuB,CAAC;AAACM,IAAAA,KAAD;AAASS,IAAAA,UAAT;AAAsBd,IAAAA,IAAtB;AAA6BG,IAAAA,IAA7B;AAAoCC,IAAAA,IAApC;AAA2CO,IAAAA;AAA3C,GAAD,CAAxC;;AACA,MAAGgB,UAAH,EAAc;AACZZ,IAAAA,SAAS,GAAGa,UAAU,CAAC,MAAM;AAC3B/B,MAAAA,oBAAoB,CAAC;AAACc,QAAAA,KAAD;AAASF,QAAAA,UAAT;AAAsBC,QAAAA,QAAtB;AAAiCF,QAAAA,CAAjC;AAAqCD,QAAAA,MAArC;AAA8CP,QAAAA;AAA9C,OAAD,CAApB;AACD,KAFqB,EAEnB2B,UAAU,GAAGb,UAFM,CAAtB;AAGD;AACF,CApCD;;AAsCA,SAAQE,KAAR","sourcesContent":["import { Node , Block } from './helper_method'\nimport { breadth_first_search , stop_breadth_first_search }from './solve_maze/breadth_first_search'\nimport { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'\n// import { prims_maze } from './draw_maze/prims_maze_generation'\n// import { depth_first_search_maze } from './draw_maze/depth_first_search_maze_generation'\n\nlet size , width , height , cols , rows \n\nlet delay , speed , canvas , c , start_node, end_node , nodes , stack , frame_per_second , maze_speed , myTimeOut\n\nconst setUp = (props) => {\n  stop_breadth_first_search()\n  c = props.c\n  canvas = props.canvas \n  nodes = []\n  stack = []\n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = size * cols \n  height = size * rows\n\n  delay = 0 \n  speed = 100\n  maze_speed = 10\n\n  frame_per_second = 1000\n\n  canvas.width = width\n  canvas.height = height\n\n  clearTimeout(myTimeOut)\n  draw_divide_maze()\n}\n\nconst draw_divide_maze = () => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n        let x = j * size + (size / 2)\n        let y = i * size + (size / 2)\n        let node = new Node(x, y , c , size )\n        if(i === 0 && j !== 0) {\n            node.walls[0] = true\n        }else if(i === rows - 1){\n            node.walls[2] = true\n        }\n\n        if(j === 0){\n            node.walls[3] = true \n        }else if(j === cols - 1 && i !== rows - 1){\n            node.walls[1] = true\n        }\n\n        if(i === 0 && j === 0){\n            stack.push(node)\n        }\n        nodes.push(node)\n    }\n  }\n\n  start_node = new Block(size / 2,size / 2 , c , size , \"blue\")\n  end_node = new Block((cols - 1) * size + (size / 2),( rows - 1 ) * size + (size / 2) , c , size , \"green\" )\n  // depth_first_search_maze({nodes , canvas , c , start_node , end_node , stack , size \n  // , cols , rows , frame_per_second , speed })\n  // prims_maze({size , nodes , cols , rows , canvas , c , frame_per_second , speed})\n  let draw_delay = recursive_dividion_maze({delay , maze_speed , size , cols , rows , nodes})\n  if(draw_delay){\n    myTimeOut = setTimeout(() => {\n      breadth_first_search({nodes , start_node , end_node , c , canvas , size})\n    }, draw_delay * maze_speed);\n  }\n}\n\nexport {setUp}\n"]},"metadata":{},"sourceType":"module"}