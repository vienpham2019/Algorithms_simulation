{"ast":null,"code":"import { Block } from '../helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet close_list, open_list_1, current_node_1, open_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size; // end_node.prev_node = null\n\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = start_node;\n  current_node_2 = end_node;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < open_list_1.length; i++) {\n    open_list_1[i].color = 'DeepSkyBlue';\n    open_list_1[i].draw();\n  }\n\n  for (let i = 0; i < open_list_2.length; i++) {\n    open_list_2[i].color = 'DeepSkyBlue';\n    open_list_2[i].draw();\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = 'MidnightBlue';\n    }\n\n    close_list[i].draw();\n  }\n\n  if (current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y) {\n    finish_search = true;\n    finish_path = true;\n  }\n\n  if (open_list_2.length > 0 && !finish_path) {\n    current_node_2 = open_list_2.sort((a, b) => a.distance - b.distance)[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, open_list_2, close_list_2);\n  }\n\n  if (open_list_1.length > 0 && !finish_path) {\n    current_node_1 = open_list_1.sort((a, b) => a.distance - b.distance)[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, open_list_1, close_list_1);\n  } // if(end_node.prev_node){\n  //     start_node.draw()\n  //     end_node.draw()\n  //     find_path() \n  // }\n\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = (c_node, open_list, close_list) => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list.find(n => n.x === right.x && n.y === right.y);\n    right_in_open ? update_node(right_in_open, c_node) : open_list.push(create_new_node(right, c_node));\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list.find(n => n.x === top.x && n.y === top.y);\n    top_in_open ? update_node(top_in_open, c_node) : open_list.push(create_new_node(top, c_node));\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list.find(n => n.x === left.x && n.y === left.y);\n    left_in_open ? update_node(left_in_open, c_node) : open_list.push(create_new_node(left, c_node));\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list.find(n => n.x === bottom.x && n.y === bottom.y);\n    bottom_in_open ? update_node(bottom_in_open, c_node) : open_list.push(create_new_node(bottom, c_node));\n  }\n\n  return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true);\n}; // const find_path = () => {\n//     current_node_2.color = \"LimeGreen\"\n//     if(current_node_2.x === start_node.x && current_node_2.y === start_node.y){\n//         finish_path = true\n//         return\n//     }\n//     current_node_2 = current_node_2.prev_node\n//     return \n// }\n\n\nconst create_new_node = (node, c_node) => {\n  let distance = find_distance(node, c_node);\n  return new Block(node.x, node.y, c, size, 'MidnightBlue', c_node, null, null, null, distance);\n};\n\nconst find_distance = (node, c_node) => {\n  // find distance from current node to next node \n  let x_1 = c_node.x;\n  let y_1 = c_node.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + c_node.distance;\n};\n\nconst update_node = (node, c_node) => {\n  if (c_node.distance + size < node.distance) {\n    node.distance = find_distance(node, c_node);\n  }\n\n  return node;\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nexport { bidirectional_dijkstra, stop_bidirectional_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","start_node","end_node","nodes","c","canvas","size","close_list","open_list_1","current_node_1","open_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_dijkstra","props","distance","close_list_1","close_list_2","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","sort","a","b","push","find_child_node","c_node","open_list","top","right","bottom","left","get_top_right_bottom_left","walls","find","node","right_in_open","n","update_node","create_new_node","top_in_open","left_in_open","bottom_in_open","filter","find_distance","x_1","y_1","x_2","y_2","Math","abs","array"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet close_list , open_list_1 , current_node_1 , open_list_2, current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    // end_node.prev_node = null\n    \n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = start_node\n    current_node_2 = end_node \n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_1.length ; i ++){\n        open_list_1[i].color = 'DeepSkyBlue'\n        open_list_1[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list_2.length ; i ++){\n        open_list_2[i].color = 'DeepSkyBlue'\n        open_list_2[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = 'MidnightBlue'\n        }\n        close_list[i].draw()\n    }\n\n    if(current_node_1.x === current_node_2.x && current_node_1.y === current_node_2.y){\n        finish_search = true \n        finish_path = true \n    }\n\n    if(open_list_2.length > 0 && !finish_path){\n        current_node_2 = open_list_2.sort((a,b) => a.distance - b.distance)[0] \n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , open_list_2 , close_list_2)\n    }\n\n    if(open_list_1.length > 0 && !finish_path){\n        current_node_1 = open_list_1.sort((a,b) => a.distance - b.distance)[0] \n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , open_list_1 , close_list_1)\n    }\n\n    // if(end_node.prev_node){\n    //     start_node.draw()\n    //     end_node.draw()\n    //     find_path() \n    // }\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = (c_node , open_list , close_list) => {\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes )\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list.find(n => n.x === right.x  && n.y === right.y)\n\n        right_in_open ? update_node(right_in_open , c_node) : open_list.push(create_new_node(right , c_node))\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list.find(n => n.x === top.x  && n.y === top.y)\n\n        top_in_open ? update_node(top_in_open , c_node) : open_list.push(create_new_node(top , c_node))\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list.find(n => n.x === left.x  && n.y === left.y)\n        \n        left_in_open ? update_node(left_in_open , c_node) : open_list.push(create_new_node(left , c_node))\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list.find(n => n.x === bottom.x  && n.y === bottom.y)\n        \n        bottom_in_open ? update_node(bottom_in_open , c_node) : open_list.push(create_new_node(bottom , c_node))\n    }\n\n    return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true )\n}\n\n// const find_path = () => {\n//     current_node_2.color = \"LimeGreen\"\n//     if(current_node_2.x === start_node.x && current_node_2.y === start_node.y){\n//         finish_path = true\n//         return\n//     }\n//     current_node_2 = current_node_2.prev_node\n//     return \n// }\n\nconst create_new_node = (node , c_node) => {\n    let distance = find_distance(node , c_node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , c_node , null , null , null , distance)\n}\n\nconst find_distance = (node , c_node) => {\n    // find distance from current node to next node \n    let x_1 = c_node.x \n    let y_1 = c_node.y\n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + c_node.distance\n}\n\nconst update_node = (node , c_node) => {\n    if(c_node.distance + size < node.distance){\n        node.distance = find_distance(node , c_node)\n    }\n    return node\n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}