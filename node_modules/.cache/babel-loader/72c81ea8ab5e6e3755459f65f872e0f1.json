{"ast":null,"code":"import { Node, Block } from './helper_method';\nimport { breadth_first_search, stop_breadth_first_search } from './solve_maze/breadth_first_search';\nimport { depth_first_search, stop_depth_first_search } from './solve_maze/depth_first_search';\nimport { a_star, stop_a_star } from './solve_maze/a_star';\nimport { greedy_best_first_search, stop_greedy_best_first_search } from './solve_maze/greedy_best_first_search';\nimport { dijkstra, stop_dijkstra } from './solve_maze/dijkstra';\nimport { bidirectional_dijkstra, stop_bidirectional_dijkstra } from './solve_maze/bidirectional_dijkstra';\nimport { bidirectional_a_star, stop_bidirectional_a_star } from './solve_maze/bidirectional_a_star';\nimport { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation';\nimport { prims_maze, stop_prims_draw_maze } from './draw_maze/prims_maze_generation';\nimport { depth_first_search_maze, stop_depth_first_search_draw_maze } from './draw_maze/depth_first_search_maze_generation';\nlet size, width, height, cols, rows, select_draw_algorithims, speed;\nlet delay, canvas, c, start_node, end_node, nodes, stack, frame_per_second, maze_speed, myTimeOut, start_location, end_location;\n\nconst setUp = props => {\n  stop_breadth_first_search();\n  stop_depth_first_search();\n  stop_a_star();\n  stop_dijkstra();\n  stop_bidirectional_dijkstra();\n  stop_greedy_best_first_search();\n  stop_bidirectional_a_star();\n  stop_depth_first_search_draw_maze();\n  stop_prims_draw_maze();\n  c = props.c;\n  canvas = props.canvas;\n  stack = [];\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = props.width;\n  height = props.height;\n  select_draw_algorithims = props.select_draw_algorithims;\n  size = Math.floor(width / cols);\n  start_location = {\n    x: size / 2,\n    y: size / 2\n  };\n  end_location = {\n    x: (cols - 1) * size + size / 2,\n    y: (rows - 1) * size + size / 2\n  };\n  delay = 0;\n  speed = props.speed;\n  maze_speed = 700;\n  frame_per_second = 1000;\n  canvas.width = width;\n  canvas.height = height;\n  nodes = [];\n  draw_divide_maze(props);\n  clearTimeout(myTimeOut);\n  return nodes;\n};\n\nconst draw_divide_maze = props => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let walls = select_draw_algorithims === \"Recursive Division\" ? [false, false, false, false] : [true, true, true, true];\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size, walls);\n\n      if (i === 0) {\n        node.walls[0] = true;\n      } else if (i === rows - 1) {\n        node.walls[2] = true;\n      }\n\n      if (j === 0) {\n        node.walls[3] = true;\n      } else if (j === cols - 1) {\n        node.walls[1] = true;\n      }\n\n      if (i === 0 && j === 0) {\n        node.walls[0] = false;\n      }\n\n      if (j === cols - 1 && i === rows - 1) {\n        node.walls[1] = false;\n      }\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  start_node = new Block(start_location.x, start_location.y, c, size, \"blue\");\n  end_node = new Block(end_location.x, end_location.y, c, size, \"green\");\n\n  switch (select_draw_algorithims) {\n    case \"Depth first search\":\n      depth_first_search_maze({\n        nodes,\n        canvas,\n        c,\n        stack,\n        size,\n        cols,\n        rows,\n        frame_per_second,\n        speed\n      });\n      break;\n\n    case \"Prim's\":\n      prims_maze({\n        size,\n        nodes,\n        cols,\n        rows,\n        canvas,\n        c,\n        frame_per_second,\n        speed\n      });\n      break;\n\n    case \"Recursive Division\":\n      let draw_delay = recursive_dividion_maze({\n        delay,\n        speed,\n        size,\n        cols,\n        rows,\n        nodes\n      });\n\n      if (draw_delay) {\n        setTimeout(() => {\n          props.check_recursive_delay(true);\n        }, draw_delay * speed);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n};\n\nconst run_solve_maze = algorithms => {\n  stop_greedy_best_first_search();\n  stop_a_star();\n  stop_dijkstra();\n  stop_breadth_first_search();\n  stop_depth_first_search();\n  stop_bidirectional_dijkstra();\n  stop_bidirectional_a_star();\n\n  switch (algorithms) {\n    case \"A star\":\n      a_star({\n        start_node,\n        end_node,\n        nodes,\n        c,\n        canvas,\n        size\n      });\n      break;\n\n    case \"Depth first search\":\n      depth_first_search({\n        nodes,\n        start_node,\n        end_node,\n        c,\n        canvas,\n        size\n      });\n      break;\n\n    case \"Breadth first search\":\n      breadth_first_search({\n        c,\n        canvas,\n        size,\n        nodes,\n        start_node,\n        end_node\n      });\n      break;\n\n    case \"Dijkstra's\":\n      dijkstra({\n        start_node,\n        end_node,\n        nodes,\n        c,\n        canvas,\n        size\n      });\n      break;\n\n    case \"Greedy best first search\":\n      greedy_best_first_search({\n        start_node,\n        end_node,\n        nodes,\n        c,\n        canvas,\n        size\n      });\n      break;\n\n    case \"Bidirectional a star\":\n      bidirectional_a_star({\n        start_node,\n        end_node,\n        nodes,\n        c,\n        canvas,\n        size\n      });\n      break;\n\n    case \"Bidirectional dijkstra's\":\n      bidirectional_dijkstra({\n        start_node,\n        end_node,\n        nodes,\n        c,\n        canvas,\n        size\n      });\n      break;\n  }\n};\n\nconst update_info = props => {\n  if (props.start_location) {\n    start_location = props.start_location;\n    start_node = new Block(start_location.x, start_location.y, c, size, \"blue\");\n  }\n\n  if (props.end_location) {\n    end_location = props.end_location;\n    end_node = new Block(end_location.x, end_location.y, c, size, \"green\");\n  }\n};\n\nexport { setUp, run_solve_maze, update_info };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/mazeController.js"],"names":["Node","Block","breadth_first_search","stop_breadth_first_search","depth_first_search","stop_depth_first_search","a_star","stop_a_star","greedy_best_first_search","stop_greedy_best_first_search","dijkstra","stop_dijkstra","bidirectional_dijkstra","stop_bidirectional_dijkstra","bidirectional_a_star","stop_bidirectional_a_star","recursive_dividion_maze","prims_maze","stop_prims_draw_maze","depth_first_search_maze","stop_depth_first_search_draw_maze","size","width","height","cols","rows","select_draw_algorithims","speed","delay","canvas","c","start_node","end_node","nodes","stack","frame_per_second","maze_speed","myTimeOut","start_location","end_location","setUp","props","Math","floor","x","y","draw_divide_maze","clearTimeout","i","j","walls","node","push","draw_delay","setTimeout","check_recursive_delay","run_solve_maze","algorithms","update_info"],"mappings":"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","sourcesContent":["import { Node , Block } from './helper_method'\nimport { breadth_first_search , stop_breadth_first_search }from './solve_maze/breadth_first_search'\nimport { depth_first_search , stop_depth_first_search }from './solve_maze/depth_first_search'\nimport { a_star , stop_a_star }from './solve_maze/a_star'\nimport { greedy_best_first_search , stop_greedy_best_first_search }from './solve_maze/greedy_best_first_search'\nimport { dijkstra , stop_dijkstra }from './solve_maze/dijkstra'\nimport { bidirectional_dijkstra , stop_bidirectional_dijkstra }from './solve_maze/bidirectional_dijkstra'\nimport { bidirectional_a_star , stop_bidirectional_a_star }from './solve_maze/bidirectional_a_star'\n\nimport { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'\nimport { prims_maze , stop_prims_draw_maze} from './draw_maze/prims_maze_generation'\nimport { depth_first_search_maze , stop_depth_first_search_draw_maze } from './draw_maze/depth_first_search_maze_generation'\n\nlet size , width , height , cols , rows , select_draw_algorithims , speed \n\nlet delay, canvas , c , start_node, end_node , nodes , stack , frame_per_second , maze_speed , myTimeOut , start_location , end_location \n\nconst setUp = (props) => {\n  stop_breadth_first_search()\n  stop_depth_first_search()\n  stop_a_star()\n  stop_dijkstra()\n  stop_bidirectional_dijkstra()\n  stop_greedy_best_first_search()\n  stop_bidirectional_a_star()\n\n  stop_depth_first_search_draw_maze()\n  stop_prims_draw_maze()\n\n  c = props.c\n  canvas = props.canvas \n  stack = []\n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = props.width\n  height = props.height\n  select_draw_algorithims = props.select_draw_algorithims\n\n  size = Math.floor(width / cols)\n\n  start_location = {x: size / 2 , y: size / 2}\n  end_location = {x: (cols - 1) * size + (size / 2) , y: (rows - 1) * size + (size / 2)}\n\n  delay = 0 \n  speed = props.speed\n  maze_speed = 700\n\n  frame_per_second = 1000\n\n  canvas.width = width\n  canvas.height = height\n\n  nodes = []\n  draw_divide_maze(props)\n  clearTimeout(myTimeOut)\n  return nodes\n}\n\nconst draw_divide_maze = (props) => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n      let walls = select_draw_algorithims === \"Recursive Division\" \n        ? [false , false , false ,false] \n        : [true , true , true , true]\n\n      let x = j * size + (size / 2)\n      let y = i * size + (size / 2)\n      let node = new Node(x, y , c , size , walls)\n      if(i === 0){\n        node.walls[0] = true\n      }else if(i === rows - 1){\n        node.walls[2] = true\n      }\n\n      if(j === 0){\n        node.walls[3] = true\n      }else if(j === cols - 1){\n        node.walls[1] = true\n      }\n\n      if(i === 0 && j === 0) {\n          node.walls[0] = false \n      }\n      if(j === cols - 1 && i === rows - 1){\n        node.walls[1] = false\n      }\n\n      if(i === 0 && j === 0){\n          stack.push(node)\n      }\n      nodes.push(node)\n    }\n  }\n\n  start_node = new Block(start_location.x , start_location.y , c , size , \"blue\")\n  end_node = new Block(end_location.x , end_location.y , c , size , \"green\" )\n\n  switch (select_draw_algorithims) {\n    case \"Depth first search\":\n      depth_first_search_maze({nodes , canvas , c , stack , size , cols , rows , frame_per_second , speed })\n      break\n    case \"Prim's\": \n      prims_maze({size , nodes , cols , rows , canvas , c , frame_per_second , speed})\n      break \n    case \"Recursive Division\": \n      let draw_delay = recursive_dividion_maze({delay , speed , size , cols , rows , nodes})\n      if(draw_delay){\n        setTimeout(() => {\n            props.check_recursive_delay(true)\n          }, draw_delay * speed);\n        }\n      break \n    default:\n      break \n  }\n}\n\nconst run_solve_maze = (algorithms) => {\n  stop_greedy_best_first_search()\n  stop_a_star()\n  stop_dijkstra()\n  stop_breadth_first_search()\n  stop_depth_first_search()\n  stop_bidirectional_dijkstra()\n  stop_bidirectional_a_star()\n\n  switch (algorithms) {\n    case \"A star\":\n      a_star({start_node , end_node , nodes , c , canvas , size})\n      break\n    case \"Depth first search\": \n      depth_first_search({nodes , start_node , end_node , c , canvas , size})\n      break\n    case \"Breadth first search\": \n      breadth_first_search({c , canvas , size , nodes , start_node , end_node })\n      break \n    case \"Dijkstra's\": \n      dijkstra({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Greedy best first search\": \n      greedy_best_first_search({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Bidirectional a star\": \n      bidirectional_a_star({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Bidirectional dijkstra's\": \n      bidirectional_dijkstra({start_node , end_node , nodes , c , canvas , size})\n      break \n  }\n}\n\nconst update_info = props => {\n  if(props.start_location){\n    start_location = props.start_location\n    start_node = new Block(start_location.x , start_location.y , c , size , \"blue\")\n  }\n\n  if(props.end_location){\n    end_location = props.end_location\n    end_node = new Block(end_location.x , end_location.y , c , size , \"green\" )\n  }\n}\n\nexport {setUp , run_solve_maze , update_info}\n"]},"metadata":{},"sourceType":"module"}