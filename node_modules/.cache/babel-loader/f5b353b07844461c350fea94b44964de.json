{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left } from './helper_method/algorithms_helper_method';\nlet c, canvas, size, visited_nodes, nodes, stack, current_node, start_node, end_node, finish_path, myReq;\n\nconst depth_first_search = props => {\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  nodes = props.nodes;\n  finish_path = false;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  end_node.prev_node = null;\n  stack = [start_node];\n  visited_nodes = [start_node];\n  current_node = start_node;\n  stack.push(start_node);\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_depth_first_search = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < visited_nodes.length; i++) {\n    if (!end_node.prev_node) {\n      visited_nodes[i].color = \"MidnightBlue\";\n    }\n\n    visited_nodes[i].draw();\n  }\n\n  if (!end_node.prev_node) {\n    for (let i = 0; i < stack.length; i++) {\n      stack[i].color = 'DeepSkyBlue';\n      stack[i].draw();\n    }\n  }\n\n  if (stack.length > 0 && !end_node.prev_node) {\n    current_node = stack[0];\n\n    if (!check_neighbor_node()) {\n      stack.shift();\n    }\n  }\n\n  if (end_node.prev_node) {\n    start_node.draw();\n    end_node.draw();\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"LimeGreen\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nconst check_neighbor_node = () => {\n  let {\n    x,\n    y\n  } = current_node; // block \n  // let color = \"MidnightBlue\"\n\n  let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_node, nodes, size); // bottom\n  // let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n\n  if (add_node(bottom, current_find_node, 2)) return true; // if(bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x  && n.y === bottom.y )){\n  //     let bottom_x = bottom.x \n  //     let bottom_y = bottom.y \n  //     if(bottom_x === end_node.x && bottom_y === end_node.y){\n  //         end_node.prev_node = current_node\n  //     }else{\n  //         let bottom_block = new Block(bottom_x, bottom_y, c , size ,color , current_node)\n  //         stack = [bottom_block,...stack]\n  //         visited_nodes.push(bottom_block)\n  //         // current_node = bottom_block\n  //     }\n  //     return true \n  // }\n  // right\n  // let right = nodes.find(n => n.x === x + size && n.y === y )\n\n  if (add_node(right, current_find_node, 1)) return true; // if(right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x  && n.y === right.y)){\n  //     let right_x = right.x \n  //     let right_y = right.y \n  //     if(right_x === end_node.x && right_y === end_node.y){\n  //         end_node.prev_node = current_node \n  //     }else{\n  //         let right_block = new Block(right_x, right_y, c , size , color ,current_node)\n  //         stack = [right_block,...stack]\n  //         visited_nodes.push(right_block)\n  //         // current_node = right_block\n  //     }\n  //     return true \n  // }\n  // top \n  // let top = nodes.find(n => n.x === x && n.y === y - size)\n\n  if (add_node(top, current_find_node, 0)) return true; // if(top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)){\n  //     let top_x = top.x\n  //     let top_y = top.y\n  //     if(top_x === end_node.x && top_y === end_node.y){\n  //         end_node.prev_node = current_node\n  //     }else{\n  //         let top_block = new Block(top_x, top_y , c , size , color, current_node)\n  //         stack = [top_block,...stack]\n  //         visited_nodes.push(top_block)\n  //         // current_node = top_block\n  //     }\n  //     return true\n  // }\n  // left \n  // let left = nodes.find(n => n.x === x - size && n.y === y)\n\n  if (add_node(left, current_find_node, 3)) return true; // if(left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)){\n  //     let left_x = left.x \n  //     let left_y = left.y \n  //     if(left_x === end_node.x && left_y === end_node.y){\n  //         end_node.prev_node = current_node \n  //     }else{\n  //         let left_block = new Block(left_x,left_y, c, size , color , current_node)\n  //         stack = [left_block,...stack]\n  //         visited_nodes.push(left_block)\n  //         // current_node = left_block\n  //     }\n  //     return true \n  // }\n\n  return false;\n};\n\nconst add_node = (neighbor_node, current_find_node, wall_num) => {\n  let color = \"MidnightBlue\";\n\n  if (neighbor_node && !current_find_node.walls[wall_num] && !visited_nodes.find(n => n.x === neighbor_node.x && n.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n\n    if (x === end_node.x && y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let new_block = new Block(x, y, c, size, color, current_node);\n      stack = [new_block, ...stack];\n      visited_nodes.push(new_block);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nexport { depth_first_search, stop_depth_first_search };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/depth_first_search.js"],"names":["Block","get_top_right_bottom_left","c","canvas","size","visited_nodes","nodes","stack","current_node","start_node","end_node","finish_path","myReq","depth_first_search","props","prev_node","push","cancelAnimationFrame","run_solve_maze","stop_depth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","color","check_neighbor_node","shift","find_path","x","y","current_find_node","find","c_n","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","n","new_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\nlet \n    c , \n    canvas , \n    size , \n    visited_nodes , \n    nodes , \n    stack , \n    current_node , \n    start_node , \n    end_node , \n    finish_path , \n    myReq\n\nconst depth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    nodes = props.nodes \n\n    finish_path = false  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    end_node.prev_node = null\n\n    stack = [start_node]\n    visited_nodes = [start_node]\n    current_node = start_node \n\n    stack.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_depth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < visited_nodes.length; i ++){\n        if(!end_node.prev_node){\n            visited_nodes[i].color = \"MidnightBlue\"\n        }\n        visited_nodes[i].draw()\n    }\n\n    if(!end_node.prev_node){\n        for(let i = 0 ; i < stack.length ; i ++){\n            stack[i].color = 'DeepSkyBlue' \n            stack[i].draw()\n        }\n    }\n\n    if(stack.length > 0 && !end_node.prev_node){\n        current_node = stack[0]\n        if(!check_neighbor_node()){\n            stack.shift()\n        }\n    }\n\n    if(end_node.prev_node){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nconst check_neighbor_node = () => {\n    let {x , y} = current_node // block \n    // let color = \"MidnightBlue\"\n    let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y )\n    let {top , right , bottom , left } = get_top_right_bottom_left(current_node , nodes , size)\n\n    // bottom\n    // let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n    if(add_node(bottom , current_find_node , 2)) return true \n    // if(bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x  && n.y === bottom.y )){\n    //     let bottom_x = bottom.x \n    //     let bottom_y = bottom.y \n    //     if(bottom_x === end_node.x && bottom_y === end_node.y){\n    //         end_node.prev_node = current_node\n    //     }else{\n    //         let bottom_block = new Block(bottom_x, bottom_y, c , size ,color , current_node)\n    //         stack = [bottom_block,...stack]\n    //         visited_nodes.push(bottom_block)\n    //         // current_node = bottom_block\n    //     }\n    //     return true \n    // }\n\n    // right\n    // let right = nodes.find(n => n.x === x + size && n.y === y )\n    if(add_node(right , current_find_node , 1)) return true \n    // if(right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x  && n.y === right.y)){\n    //     let right_x = right.x \n    //     let right_y = right.y \n    //     if(right_x === end_node.x && right_y === end_node.y){\n    //         end_node.prev_node = current_node \n    //     }else{\n    //         let right_block = new Block(right_x, right_y, c , size , color ,current_node)\n    //         stack = [right_block,...stack]\n    //         visited_nodes.push(right_block)\n    //         // current_node = right_block\n    //     }\n    //     return true \n    // }\n\n    // top \n    // let top = nodes.find(n => n.x === x && n.y === y - size)\n    if(add_node(top , current_find_node , 0)) return true \n    // if(top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)){\n    //     let top_x = top.x\n    //     let top_y = top.y\n    //     if(top_x === end_node.x && top_y === end_node.y){\n    //         end_node.prev_node = current_node\n    //     }else{\n    //         let top_block = new Block(top_x, top_y , c , size , color, current_node)\n    //         stack = [top_block,...stack]\n    //         visited_nodes.push(top_block)\n    //         // current_node = top_block\n    //     }\n    //     return true\n    // }\n\n    // left \n    // let left = nodes.find(n => n.x === x - size && n.y === y)\n    if(add_node(left , current_find_node , 3)) return true \n    // if(left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)){\n    //     let left_x = left.x \n    //     let left_y = left.y \n    //     if(left_x === end_node.x && left_y === end_node.y){\n    //         end_node.prev_node = current_node \n    //     }else{\n    //         let left_block = new Block(left_x,left_y, c, size , color , current_node)\n    //         stack = [left_block,...stack]\n    //         visited_nodes.push(left_block)\n    //         // current_node = left_block\n    //     }\n    //     return true \n    // }\n\n    return false \n}\n\nconst add_node = (neighbor_node , current_find_node , wall_num) => {\n    let color = \"MidnightBlue\"\n    if(\n        neighbor_node \n        && !current_find_node.walls[wall_num] \n        && !visited_nodes.find(n => n.x === neighbor_node.x  && n.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        if(x === end_node.x && y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let new_block = new Block(x, y, c , size ,color , current_node)\n            stack = [new_block,...stack]\n            visited_nodes.push(new_block)\n        }\n        return true \n    }\n    return false \n}\n\nexport { depth_first_search ,  stop_depth_first_search}"]},"metadata":{},"sourceType":"module"}