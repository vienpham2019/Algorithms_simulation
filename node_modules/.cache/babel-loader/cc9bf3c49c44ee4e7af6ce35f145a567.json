{"ast":null,"code":"import { Block } from '../helper_method';\nlet c, canvas, size, nodes, start_node, end_node;\nlet visited_nodes, quere, current_node, finish_path, myReq;\n\nconst breadth_first_search = props => {\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  visited_nodes = [];\n  nodes = props.nodes;\n  quere = [];\n  finish_path = false;\n  current_node = null;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  end_node.prev_node = null;\n  quere.push(start_node);\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_breadth_first_search = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < visited_nodes.length; i++) {\n    visited_nodes[i].draw();\n  }\n\n  start_node.draw();\n  end_node.draw();\n\n  if (end_node.prev_node) {\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n\n  if (!end_node.prev_node && !finish_path) {\n    solve_maze();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let x = node.x;\n  let y = node.y;\n  let color = \"MidnightBlue\";\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y); // top \n\n  let top = nodes.find(n => n.x === x && n.y === y - size);\n\n  if (top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)) {\n    let top_x = top.x;\n    let top_y = top.y;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let top_block = new Block(top_x, top_y, c, size, color, node);\n      quere.push(top_block);\n      visited_nodes.push(top_block);\n    }\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size && n.y === y);\n\n  if (right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x && n.y === right.y)) {\n    let right_x = right.x;\n    let right_y = right.y;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let right_block = new Block(right_x, right_y, c, size, color, node);\n      quere.push(right_block);\n      visited_nodes.push(right_block);\n    }\n  } // bottom\n\n\n  let bottom = nodes.find(n => n.x === x && n.y === y + size);\n\n  if (bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x && n.y === bottom.y)) {\n    let bottom_x = bottom.x;\n    let bottom_y = bottom.y;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, c, size, color, node);\n      quere.push(bottom_block);\n      visited_nodes.push(bottom_block);\n    }\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size && n.y === y);\n\n  if (left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)) {\n    let left_x = left.x;\n    let left_y = left.y;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let left_block = new Block(left_x, left_y, c, size, color, node);\n      quere.push(left_block);\n      visited_nodes.push(left_block);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nexport { breadth_first_search, stop_breadth_first_search };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/breadth_first_search.js"],"names":["Block","c","canvas","size","nodes","start_node","end_node","visited_nodes","quere","current_node","finish_path","myReq","breadth_first_search","props","prev_node","push","cancelAnimationFrame","run_solve_maze","stop_breadth_first_search","requestAnimationFrame","clearRect","width","height","i","length","draw","find_path","solve_maze","quere_nodes","shift","check_neighbor_node","node","x","y","color","current_find_node","find","c_n","top","n","walls","top_x","top_y","top_block","right","right_x","right_y","right_block","bottom","bottom_x","bottom_y","bottom_block","left","left_x","left_y","left_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet c , canvas , size , nodes , start_node , end_node \n    \nlet visited_nodes ,  quere , current_node , finish_path , myReq\n\nconst breadth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    visited_nodes = []\n    nodes = props.nodes \n\n    quere = []\n    finish_path = false \n    current_node = null  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    end_node.prev_node = null\n\n    quere.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_breadth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0; i < nodes.length; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0; i < visited_nodes.length; i ++){\n        visited_nodes[i].draw()\n    }\n\n    start_node.draw()\n    end_node.draw()\n    if(end_node.prev_node){\n        find_path()\n    }\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n    if(!end_node.prev_node && !finish_path){\n        solve_maze()\n    }\n}\n  \nconst solve_maze = () => {\n    let quere_nodes = [...quere]\n    quere.shift()\n    // visited_nodes_for_path.push(current_node)\n    if(end_node.prev_node){\n        return\n    }\n    for(let i = 0; i < quere_nodes.length ; i ++){\n        check_neighbor_node(quere_nodes[i])\n    }\n}\n  \nconst check_neighbor_node = (node) => {\n    let x = node.x\n    let y = node.y\n    let color = \"MidnightBlue\"\n    let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y )\n    // top \n    let top = nodes.find(n => n.x === x && n.y === y - size)\n    if(top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)){\n        let top_x = top.x\n        let top_y = top.y\n        if(top_x === end_node.x && top_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let top_block = new Block(top_x, top_y , c , size , color, node)\n            quere.push(top_block)\n            visited_nodes.push(top_block)\n        }\n    }\n\n    // right\n    let right = nodes.find(n => n.x === x + size && n.y === y )\n    if(right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x  && n.y === right.y)){\n        let right_x = right.x \n        let right_y = right.y \n        if(right_x === end_node.x && right_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let right_block = new Block(right_x, right_y, c , size , color ,node)\n            quere.push(right_block)\n            visited_nodes.push(right_block)\n        }\n    }\n\n    // bottom\n    let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n    if(bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x  && n.y === bottom.y )){\n        let bottom_x = bottom.x \n        let bottom_y = bottom.y \n        if(bottom_x === end_node.x && bottom_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let bottom_block = new Block(bottom_x, bottom_y, c , size ,color ,node)\n            quere.push(bottom_block)\n            visited_nodes.push(bottom_block)\n        }\n    }\n\n    // left \n    let left = nodes.find(n => n.x === x - size && n.y === y)\n    if(left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)){\n        let left_x = left.x \n        let left_y = left.y \n        if(left_x === end_node.x && left_y === end_node.y){\n            end_node.prev_node = node \n            current_node = node \n            return \n        }else{\n            let left_block = new Block(left_x,left_y, c, size , color , node)\n            quere.push(left_block)\n            visited_nodes.push(left_block)\n        }\n    }\n}\n  \nconst find_path = () => {\n    current_node.color = \"green\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nexport { breadth_first_search ,  stop_breadth_first_search}\n\n"]},"metadata":{},"sourceType":"module"}