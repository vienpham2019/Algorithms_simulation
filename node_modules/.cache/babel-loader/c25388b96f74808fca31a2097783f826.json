{"ast":null,"code":"import{Block}from'../helper_method';import{get_top_right_bottom_left,add_to_heap,remove_from_heap}from'./helper_method/algorithms_helper_method';var start_node,end_node,nodes,c,canvas,size;var open_list,close_list,current_node,myReq;var a_star=function a_star(props){start_node=props.start_node;end_node=props.end_node;nodes=props.nodes;c=props.c;canvas=props.canvas;size=props.size;end_node.prev_node=null;open_list=add_to_heap(start_node,[],function(a,b){return a.f<b.f;});close_list=[];current_node=null;cancelAnimationFrame(myReq);run_solve_maze();};var stop_a_star=function stop_a_star(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}for(var _i=0;_i<close_list.length;_i++){if(!end_node.prev_node){close_list[_i].color='MediumBlue';}close_list[_i].draw();}for(var _i2=0;_i2<open_list.length;_i2++){open_list[_i2].color='LightSkyBlue';open_list[_i2].draw();}if(current_node&&end_node.x===current_node.x&&end_node.y===current_node.y){end_node.prev_node=current_node.prev_node;}if(open_list.length>0&&!end_node.prev_node){current_node=open_list[0];close_list.push(current_node);find_child_node();}if(end_node.prev_node&&current_node){current_node.color=\"LimeGreen\";current_node.draw();current_node=current_node.prev_node;}if(!current_node||open_list.length===0){cancelAnimationFrame(myReq);}};var find_child_node=function find_child_node(){open_list=remove_from_heap(open_list,function(a,b){return a.f<b.f;});var _get_top_right_bottom=get_top_right_bottom_left(current_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// right (x + size , y)\nadd_node(right,3);// top (x , y - size)\nadd_node(top,2);// left (x - size , y )\nadd_node(left,1);// bottom (x , y + size)\nadd_node(bottom,0);};var add_node=function add_node(neighbor_node,wall_num){if(neighbor_node&&!neighbor_node.walls[wall_num]&&!close_list.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;var node_in_open=open_list.find(function(n){return n.x===x&&n.y===y;});var n_g=current_node.g+size;if(node_in_open&&n_g<node_in_open.g){update_node(node_in_open,n_g,current_node);}else{var new_node=set_node(neighbor_node,n_g);open_list=add_to_heap(new_node,open_list,function(a,b){return a.f<b.f;});}}};var set_node=function set_node(node,g){var color='MediumBlue';var x_1=node.x;var y_1=node.y;var x_2=end_node.x;var y_2=end_node.y;var h=(Math.abs(x_1-x_2)+Math.abs(y_1-y_2))*size;var f=h+g;var new_node=new Block(x_1,y_1,c,size,color,current_node,g,h,f);return new_node;};var update_node=function update_node(node,g,parent){node.g=g;node.f=g+node.h;node.parent=parent;};export{a_star,stop_a_star};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/a_star.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","open_list","close_list","current_node","myReq","a_star","props","prev_node","a","b","f","cancelAnimationFrame","run_solve_maze","stop_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","push","find_child_node","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","find","node","node_in_open","n","n_g","g","update_node","new_node","set_node","x_1","y_1","x_2","y_2","h","Math","abs","parent"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list , close_list , current_node , myReq\n\nconst a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    end_node.prev_node = null\n\n    open_list = add_to_heap(start_node , [] , (a,b) => a.f < b.f)\n    close_list = []\n    current_node = null \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!end_node.prev_node){\n            close_list[i].color = 'MediumBlue'\n        }\n        close_list[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list.length ; i ++){\n        open_list[i].color = 'LightSkyBlue'\n        open_list[i].draw()\n    }\n\n    if(current_node && end_node.x === current_node.x && end_node.y === current_node.y){\n        end_node.prev_node = current_node.prev_node\n    }\n\n    if(open_list.length > 0 && !end_node.prev_node){\n        current_node = open_list[0]\n        close_list.push(current_node)\n        find_child_node()\n    }\n\n    if(end_node.prev_node && current_node){\n        current_node.color = \"LimeGreen\"\n        current_node.draw()\n        current_node = current_node.prev_node\n    }\n\n    if(!current_node || open_list.length === 0){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n\n    open_list = remove_from_heap(open_list , (a,b) => a.f < b.f)\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node , nodes , size)\n\n    // right (x + size , y)\n    add_node(right , 3)\n\n    // top (x , y - size)\n    add_node(top , 2)\n\n    // left (x - size , y )\n    add_node(left , 1)\n\n    // bottom (x , y + size)\n    add_node(bottom , 0)\n}\n\nconst add_node = (neighbor_node , wall_num) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        &&  !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        let n_g = current_node.g + size \n\n        if(node_in_open && n_g < node_in_open.g){\n            update_node(node_in_open, n_g , current_node )\n        }else{\n            let new_node = set_node(neighbor_node, n_g)\n            open_list = add_to_heap(new_node, open_list , (a,b) => a.f < b.f)\n        }\n    }\n}\n\nconst set_node = (node, g) => {\n    let color = 'MediumBlue'\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = end_node.x \n    let y_2 = end_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , current_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nexport {a_star , stop_a_star}"]},"metadata":{},"sourceType":"module"}