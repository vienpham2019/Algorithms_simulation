{"ast":null,"code":"import { Block } from '../helper_method';\nlet c, canvas, size, visited_nodes, nodes, stack, current_node, start_node, end_node, finish_path, myReq;\n\nconst depth_first_search = props => {\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  visited_nodes = [];\n  nodes = props.nodes;\n  finish_path = false;\n  start_node = props.start_node;\n  end_node = props.end_node;\n  stack = [start_node];\n  current_node = start_node;\n  stack.push(start_node);\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_depth_first_search = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  if (stack.length > 0 && !end_node.prev_node) {\n    let is_neighbor = check_neighbor_node();\n\n    if (!is_neighbor) {\n      current_node = stack.shift();\n    }\n  }\n\n  if (end_node.prev_node) {\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nconst check_neighbor_node = () => {\n  let {\n    x,\n    y\n  } = current_node; // block \n\n  let color = \"MidnightBlue\";\n  let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y); // bottom\n\n  let bottom = nodes.find(n => n.x === x && n.y === y + size);\n\n  if (bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x && n.y === bottom.y)) {\n    let bottom_x = bottom.x;\n    let bottom_y = bottom.y;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, c, size, color, node);\n      stack.unshift(bottom_block);\n      visited_nodes.push(bottom_block);\n      current_node = bottom_block;\n    }\n\n    return true;\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size && n.y === y);\n\n  if (right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x && n.y === right.y)) {\n    let right_x = right.x;\n    let right_y = right.y;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let right_block = new Block(right_x, right_y, c, size, color, node);\n      stack.unshift(right_block);\n      visited_nodes.push(right_block);\n      current_node = right_block;\n    }\n\n    return true;\n  } // top \n\n\n  let top = nodes.find(n => n.x === x && n.y === y - size);\n\n  if (top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)) {\n    let top_x = top.x;\n    let top_y = top.y;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let top_block = new Block(top_x, top_y, c, size, color, current_node);\n      stack.unshift(top_block);\n      visited_nodes.push(top_block);\n      current_node = top_block;\n    }\n\n    return true;\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size && n.y === y);\n\n  if (left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)) {\n    let left_x = left.x;\n    let left_y = left.y;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = current_node;\n    } else {\n      let left_block = new Block(left_x, left_y, c, size, color, node);\n      stack.unshift(left_block);\n      visited_nodes.push(left_block);\n      current_node = left_block;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nexport { depth_first_search, stop_depth_first_search };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/depth_first_search.js"],"names":["Block","c","canvas","size","visited_nodes","nodes","stack","current_node","start_node","end_node","finish_path","myReq","depth_first_search","props","push","cancelAnimationFrame","run_solve_maze","stop_depth_first_search","requestAnimationFrame","clearRect","width","height","length","prev_node","is_neighbor","check_neighbor_node","shift","find_path","color","x","y","current_find_node","find","c_n","bottom","n","walls","bottom_x","bottom_y","bottom_block","node","unshift","right","right_x","right_y","right_block","top","top_x","top_y","top_block","left","left_x","left_y","left_block"],"mappings":"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","sourcesContent":["import {Block} from '../helper_method'\nlet \n    c , \n    canvas , \n    size , \n    visited_nodes , \n    nodes , \n    stack , \n    current_node , \n    start_node , \n    end_node , \n    finish_path , \n    myReq\n\nconst depth_first_search = (props) => {\n    c = props.c\n    canvas = props.canvas \n    size = props.size \n    visited_nodes = []\n    nodes = props.nodes \n\n    finish_path = false  \n    start_node = props.start_node\n    end_node = props.end_node\n\n    stack = [start_node]\n    current_node = start_node \n\n    stack.push(start_node)\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_depth_first_search = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    if(stack.length > 0 && !end_node.prev_node){\n        let is_neighbor = check_neighbor_node()\n        if(!is_neighbor){\n            current_node = stack.shift()\n        }\n    }\n\n    if(end_node.prev_node){\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"green\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n}\n\nconst check_neighbor_node = () => {\n    let {x , y} = current_node // block \n    let color = \"MidnightBlue\"\n    let current_find_node = nodes.find(c_n => c_n.x === x && c_n.y === y )\n\n    // bottom\n    let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n    if(bottom && !current_find_node.walls[2] && !visited_nodes.find(n => n.x === bottom.x  && n.y === bottom.y )){\n        let bottom_x = bottom.x \n        let bottom_y = bottom.y \n        if(bottom_x === end_node.x && bottom_y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let bottom_block = new Block(bottom_x, bottom_y, c , size ,color ,node)\n            stack.unshift(bottom_block)\n            visited_nodes.push(bottom_block)\n            current_node = bottom_block\n        }\n        return true \n    }\n\n    // right\n    let right = nodes.find(n => n.x === x + size && n.y === y )\n    if(right && !current_find_node.walls[1] && !visited_nodes.find(n => n.x === right.x  && n.y === right.y)){\n        let right_x = right.x \n        let right_y = right.y \n        if(right_x === end_node.x && right_y === end_node.y){\n            end_node.prev_node = current_node \n        }else{\n            let right_block = new Block(right_x, right_y, c , size , color ,node)\n            stack.unshift(right_block)\n            visited_nodes.push(right_block)\n            current_node = right_block\n        }\n        return true \n    }\n\n    // top \n    let top = nodes.find(n => n.x === x && n.y === y - size)\n    if(top && !current_find_node.walls[0] && !visited_nodes.find(n => n.x === top.x && n.y === top.y)){\n        let top_x = top.x\n        let top_y = top.y\n        if(top_x === end_node.x && top_y === end_node.y){\n            end_node.prev_node = current_node\n        }else{\n            let top_block = new Block(top_x, top_y , c , size , color, current_node)\n            stack.unshift(top_block)\n            visited_nodes.push(top_block)\n            current_node = top_block\n        }\n        return true\n    }\n\n    // left \n    let left = nodes.find(n => n.x === x - size && n.y === y)\n    if(left && !current_find_node.walls[3] && !visited_nodes.find(n => n.x === left.x && n.y === left.y)){\n        let left_x = left.x \n        let left_y = left.y \n        if(left_x === end_node.x && left_y === end_node.y){\n            end_node.prev_node = current_node \n        }else{\n            let left_block = new Block(left_x,left_y, c, size , color , node)\n            stack.unshift(left_block)\n            visited_nodes.push(left_block)\n            current_node = left_block \n        }\n        return true \n    }\n\n    return false \n}\n\nexport { depth_first_search ,  stop_depth_first_search}"]},"metadata":{},"sourceType":"module"}