{"ast":null,"code":"const Block = function (x, y, c, size, color = \"red\", prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.dx = size;\n  this.dy = size;\n  this.prev_node = prev_node;\n  this.color = color;\n  this.c = c;\n  this.size = size;\n\n  this.draw = () => {\n    let c = this.c;\n    let size = this.size;\n    c.beginPath();\n    c.rect(this.x + size / 8, this.y + size / 8, size * (3 / 4), size * (3 / 4));\n    c.fillStyle = this.color;\n    c.fill();\n  };\n\n  this.move = () => {\n    let current_node = stack[0];\n    let neighbor_nodes = [];\n    let x = current_node.x;\n    let y = current_node.y;\n    let size = this.size; // top\n\n    if (y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)) {\n      let top = nodes.find(n => n.x === x && n.y === y - size);\n      neighbor_nodes.push(top);\n    } // right \n\n\n    if (x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)) {\n      let right = nodes.find(n => n.x === x + size && n.y === y);\n      neighbor_nodes.push(right);\n    } // bottom\n\n\n    if (y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)) {\n      let bottom = nodes.find(n => n.x === x && n.y === y + size);\n      neighbor_nodes.push(bottom);\n    } // left\n\n\n    if (x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)) {\n      let left = nodes.find(n => n.x === x - size && n.y === y);\n      neighbor_nodes.push(left);\n    }\n\n    if (neighbor_nodes.length > 0) {\n      let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)];\n      stack.unshift(next_node);\n      visited_nodes.push(next_node);\n      this.dx = next_node.x - current_node.x;\n      this.dy = next_node.y - current_node.y;\n      this.x += this.dx;\n      this.y += this.dy;\n\n      if (this.dx > 0) {\n        // right \n        current_node.walls[1] = false;\n        next_node.walls[3] = false;\n      } else if (this.dx < 0) {\n        // left\n        current_node.walls[3] = false;\n        next_node.walls[1] = false;\n      }\n\n      if (this.dy > 0) {\n        // down\n        current_node.walls[2] = false;\n        next_node.walls[0] = false;\n      } else if (this.dy < 0) {\n        // up\n        current_node.walls[0] = false;\n        next_node.walls[2] = false;\n      }\n    } else {\n      let dx = current_node.x - (this.x + size / 2);\n      let dy = current_node.y - (this.y + size / 2);\n      this.x += dx;\n      this.y += dy;\n      stack.shift();\n    }\n\n    this.draw();\n  };\n};\n\nconst Node = function (x, y, c, size, neighbor_node = [], prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.neighbor_node = neighbor_node;\n  this.prev_node = prev_node;\n  this.c = c;\n  this.size = size;\n  this.walls = [true, true, true, true]; // [top, right , bottom , left ]\n\n  this.draw = (color = \"white\") => {\n    let x = this.x - size / 2;\n    let y = this.y - size / 2;\n    let c = this.c;\n    let size = this.size; // Top \n\n    if (this.walls[0]) {\n      c.beginPath();\n      c.moveTo(x, y);\n      c.lineTo(x + size, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // right\n\n\n    if (this.walls[1]) {\n      c.beginPath();\n      c.moveTo(x + size, y);\n      c.lineTo(x + size, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // bottom\n\n\n    if (this.walls[2]) {\n      c.beginPath();\n      c.moveTo(x + size, y + size);\n      c.lineTo(x, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // left \n\n\n    if (this.walls[3]) {\n      c.beginPath();\n      c.moveTo(x, y + size);\n      c.lineTo(x, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    }\n  };\n};\n\nexport { Block, Node };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/helper_method.js"],"names":["Block","x","y","c","size","color","prev_node","dx","dy","draw","beginPath","rect","fillStyle","fill","move","current_node","stack","neighbor_nodes","visited_nodes","find","n","top","nodes","push","width","right","height","bottom","left","length","next_node","Math","floor","random","unshift","walls","shift","Node","neighbor_node","moveTo","lineTo","lineWidth","lineCap","strokeStyle","stroke"],"mappings":"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","sourcesContent":["\nconst Block = function(x , y , c, size, color = \"red\", prev_node = null){\n    this.x = x \n    this.y = y \n    this.dx = size\n    this.dy = size\n    this.prev_node  = prev_node\n    this.color = color\n    this.c = c\n    this.size = size \n\n    this.draw = () => {\n        let c = this.c \n        let size = this.size \n        c.beginPath()\n        c.rect(this.x + size / 8 , this.y + size / 8, size * (3 / 4), size * (3 /4))\n        c.fillStyle = this.color\n        c.fill()\n    }\n\n    this.move = () => {\n        let current_node = stack[0]\n        let neighbor_nodes = []\n        let x = current_node.x\n        let y = current_node.y\n        let size = this.size \n\n        // top\n        if(y - size > 0 && !visited_nodes.find(n => n.x === x && n.y === y - size)){\n            let top = nodes.find(n => n.x === x && n.y === y - size)\n            neighbor_nodes.push(top)\n        }\n\n        // right \n        if(x + size < width && !visited_nodes.find(n => n.x === x + size && n.y === y)){\n            let right = nodes.find(n => n.x === x + size && n.y === y)\n            neighbor_nodes.push(right)\n        }\n\n        // bottom\n        if(y + size < height && !visited_nodes.find(n => n.x === x && n.y === y + size)){\n            let bottom = nodes.find(n => n.x === x && n.y === y + size)\n            neighbor_nodes.push(bottom)\n        }\n\n        // left\n        if(x - size > 0 && !visited_nodes.find(n => n.x === x - size && n.y === y)){\n            let left = nodes.find(n => n.x === x - size && n.y === y)\n            neighbor_nodes.push(left)\n        }\n\n        if(neighbor_nodes.length > 0){\n            let next_node = neighbor_nodes[Math.floor(Math.random() * neighbor_nodes.length)]\n            stack.unshift(next_node)\n            visited_nodes.push(next_node)\n            this.dx = next_node.x - current_node.x\n            this.dy = next_node.y - current_node.y\n\n            this.x += this.dx \n            this.y += this.dy\n\n            if(this.dx > 0) { // right \n                current_node.walls[1] = false \n                next_node.walls[3] = false \n            }else if(this.dx < 0){ // left\n                current_node.walls[3] = false \n                next_node.walls[1] = false \n            } \n\n            if(this.dy > 0) { // down\n                current_node.walls[2] = false \n                next_node.walls[0] = false \n            }else if(this.dy < 0){ // up\n                current_node.walls[0] = false \n                next_node.walls[2] = false \n            }\n        }else{\n            let dx = current_node.x  - (this.x + (size / 2))\n            let dy = current_node.y  - (this.y + (size / 2))\n            this.x += dx \n            this.y += dy\n            stack.shift()\n        }\n        this.draw()\n    }\n}\n\nconst Node = function(x , y , c , size , neighbor_node = [], prev_node = null){\n    this.x = x\n    this.y = y\n    this.neighbor_node = neighbor_node\n    this.prev_node = prev_node \n    this.c = c \n    this.size = size\n    this.walls = [true,true,true,true] // [top, right , bottom , left ]\n\n    this.draw = (color = \"white\") => {\n        let x = this.x - (size / 2)\n        let y = this.y - (size / 2)\n        let c = this.c \n        let size = this.size \n\n        // Top \n        if(this.walls[0]){\n            c.beginPath()\n            c.moveTo(x, y)\n            c.lineTo(x + size , y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // right\n        if(this.walls[1]){\n            c.beginPath()\n            c.moveTo(x + size, y)\n            c.lineTo(x + size , y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // bottom\n        if(this.walls[2]){\n            c.beginPath()\n            c.moveTo(x + size, y + size)\n            c.lineTo(x, y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // left \n        if(this.walls[3]){\n            c.beginPath()\n            c.moveTo(x, y + size)\n            c.lineTo(x, y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n    }\n}\n\nexport {Block , Node}"]},"metadata":{},"sourceType":"module"}