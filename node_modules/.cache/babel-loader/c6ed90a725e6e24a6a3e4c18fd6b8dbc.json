{"ast":null,"code":"const merge_sort = array => {\n  if (array.length === 1) return array;\n  const midd = Math.floor(array.length / 2);\n  const left_arr = array.slice(0, midd);\n  const right_arr = array.slice(midd, array.length);\n  return merge(merge_sort(left_arr), merge_sort(right_arr));\n};\n\nconst merge = (left_array, right_array) => {\n  let sort_array = [];\n\n  while (left_array.length && right_array.length) {\n    if (left_array[0].height < right_array[0].height) {\n      sort_array.push(left_array.shift());\n    } else {\n      sort_array.push(right_array.shift());\n    }\n  }\n\n  while (left_array.length) sort_array.push(left_array.shift());\n\n  while (right_array.length) sort_array.push(right_array.shift());\n\n  return sort_array;\n};\n\nexport default merge_sort;","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/mergeSort.js"],"names":["merge_sort","array","length","midd","Math","floor","left_arr","slice","right_arr","merge","left_array","right_array","sort_array","height","push","shift"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,KAAK,IAAI;AACxB,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAuB,OAAOD,KAAP;AAEvB,QAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAb;AACA,QAAMI,QAAQ,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAcJ,IAAd,CAAjB;AACA,QAAMK,SAAS,GAAGP,KAAK,CAACM,KAAN,CAAYJ,IAAZ,EAAkBF,KAAK,CAACC,MAAxB,CAAlB;AAEA,SAAOO,KAAK,CAACT,UAAU,CAACM,QAAD,CAAX,EAAuBN,UAAU,CAACQ,SAAD,CAAjC,CAAZ;AACD,CARH;;AAUE,MAAMC,KAAK,GAAG,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACzC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,SAAMF,UAAU,CAACR,MAAX,IAAqBS,WAAW,CAACT,MAAvC,EAA8C;AAC5C,QAAGQ,UAAU,CAAC,CAAD,CAAV,CAAcG,MAAd,GAAuBF,WAAW,CAAC,CAAD,CAAX,CAAeE,MAAzC,EAAgD;AAC9CD,MAAAA,UAAU,CAACE,IAAX,CAAgBJ,UAAU,CAACK,KAAX,EAAhB;AACD,KAFD,MAEK;AACHH,MAAAA,UAAU,CAACE,IAAX,CAAgBH,WAAW,CAACI,KAAZ,EAAhB;AACD;AACF;;AAED,SAAML,UAAU,CAACR,MAAjB,EAAyBU,UAAU,CAACE,IAAX,CAAgBJ,UAAU,CAACK,KAAX,EAAhB;;AACzB,SAAMJ,WAAW,CAACT,MAAlB,EAA0BU,UAAU,CAACE,IAAX,CAAgBH,WAAW,CAACI,KAAZ,EAAhB;;AAC1B,SAAOH,UAAP;AACD,CAdD;;AAgBF,eAAeZ,UAAf","sourcesContent":["const merge_sort = array => {\n    if(array.length === 1) return array \n  \n    const midd = Math.floor(array.length / 2)\n    const left_arr = array.slice(0,midd)\n    const right_arr = array.slice(midd, array.length)\n  \n    return merge(merge_sort(left_arr), merge_sort(right_arr))\n  }\n  \n  const merge = (left_array, right_array) => {\n    let sort_array = []\n  \n    while(left_array.length && right_array.length){\n      if(left_array[0].height < right_array[0].height){\n        sort_array.push(left_array.shift())\n      }else{\n        sort_array.push(right_array.shift())\n      }\n    }\n  \n    while(left_array.length) sort_array.push(left_array.shift())\n    while(right_array.length) sort_array.push(right_array.shift())\n    return sort_array\n  }\n\nexport default merge_sort"]},"metadata":{},"sourceType":"module"}