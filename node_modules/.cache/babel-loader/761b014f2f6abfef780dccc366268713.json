{"ast":null,"code":"import{Block}from'../helper_method';import{get_top_right_bottom_left,add_to_heap,remove_from_heap}from'./helper_method/algorithms_helper_method';var start_node,end_node,nodes,c,canvas,size;var open_list_1,close_list_1,current_node_1,open_list_2,close_list_2,current_node_2,myReq,finish_path,finish_search;var bidirectional_a_star=function bidirectional_a_star(props){start_node=props.start_node;end_node=props.end_node;nodes=props.nodes;c=props.c;canvas=props.canvas;size=props.size;open_list_1=[start_node];close_list_1=[];open_list_2=[end_node];close_list_2=[];current_node_1=null;current_node_2=null;finish_path=false;finish_search=false;cancelAnimationFrame(myReq);run_solve_maze();};var stop_bidirectional_a_star=function stop_bidirectional_a_star(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}print_close_and_open_list(close_list_1,open_list_1,'MediumBlue','LightSkyBlue');print_close_and_open_list(close_list_2,open_list_2,'CadetBlue','LightCyan');if(open_list_1.length>0&&!finish_search){current_node_1=open_list_1[0];close_list_1.push(current_node_1);open_list_1=find_child_node(current_node_1,end_node,open_list_1,close_list_1,close_list_2);}if(open_list_2.length>0&&!finish_search){current_node_2=open_list_2[0];close_list_2.push(current_node_2);open_list_2=find_child_node(current_node_2,start_node,open_list_2,close_list_2,close_list_1);}if(finish_search){start_node.draw();end_node.draw();if(!current_node_1&&!current_node_2){finish_path=true;}find_path();}if(finish_path||!open_list_1.length&&!open_list_2.length){cancelAnimationFrame(myReq);}};var print_close_and_open_list=function print_close_and_open_list(close_list,open_list,close_color,open_color){if(!finish_search){for(var i=0;i<open_list.length;i++){open_list[i].color=open_color;open_list[i].draw();}}for(var _i=0;_i<close_list.length;_i++){if(!finish_search){close_list[_i].color=close_color;}close_list[_i].draw();}};var check_for_mix_node=function check_for_mix_node(target_close_list,x,y){var node=target_close_list.find(function(node){return node.x===x&&node.y===y;});if(node){finish_search=true;if(close_list_1.find(function(node){return node.x===x&&node.y===y;})){current_node_1=node;}else{current_node_2=node;}return true;}return false;};var find_child_node=function find_child_node(c_node,target_node,open_list,close_list,target_close_list){open_list=remove_from_heap(open_list,function(a,b){return a.f<b.f;});var _get_top_right_bottom=get_top_right_bottom_left(c_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// right (x + size , y)\nopen_list=add_node(c_node,right,3,close_list,open_list,target_close_list,target_node);// top (x , y - size)\nopen_list=add_node(c_node,top,2,close_list,open_list,target_close_list,target_node);// left (x - size , y )\nopen_list=add_node(c_node,left,1,close_list,open_list,target_close_list,target_node);// bottom (x , y + size)\nopen_list=add_node(c_node,bottom,0,close_list,open_list,target_close_list,target_node);return open_list;};var add_node=function add_node(c_node,neighbor_node,wall_num,close_list,open_list,target_close_list,target_node){if(neighbor_node&&!neighbor_node.walls[wall_num]&&!close_list.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;var node_in_open=open_list.find(function(n){return n.x===x&&n.y===y;});var n_g=c_node.g+size;if(!check_for_mix_node(target_close_list,x,y)){if(node_in_open&&n_g<node_in_open.g){update_node(node_in_open,n_g,c_node);}else{var new_node=set_node(neighbor_node,n_g,c_node,target_node);open_list=add_to_heap(new_node,open_list,function(a,b){return a.f<b.f;});}}}return open_list;};var find_path=function find_path(){var color=\"SpringGreen\";if(current_node_1){current_node_1.color=color;current_node_1=current_node_1.prev_node;}if(current_node_2){current_node_2.color=color;current_node_2=current_node_2.prev_node;}};var set_node=function set_node(node,g,c_node,target_node){var color=\"MediumBlue\";var x_1=node.x;var y_1=node.y;var x_2=target_node.x;var y_2=target_node.y;var h=(Math.abs(x_1-x_2)+Math.abs(y_1-y_2))*size;var f=h+g;var new_node=new Block(x_1,y_1,c,size,color,c_node,g,h,f);return new_node;};var update_node=function update_node(node,g,parent){node.g=g;node.f=g+node.h;node.parent=parent;};export{bidirectional_a_star,stop_bidirectional_a_star};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_a_star.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","open_list_1","close_list_1","current_node_1","open_list_2","close_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_a_star","props","cancelAnimationFrame","run_solve_maze","stop_bidirectional_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","target_close_list","x","y","node","find","c_node","target_node","a","b","f","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","node_in_open","n","n_g","g","update_node","new_node","set_node","prev_node","x_1","y_1","x_2","y_2","h","Math","abs","parent"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list_1 , close_list_1 , current_node_1 , open_list_2 , close_list_2 , current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = null \n    current_node_2 = null \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MediumBlue' , 'LightSkyBlue' )\n    print_close_and_open_list(close_list_2 , open_list_2 , 'CadetBlue' , 'LightCyan')\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1= open_list_1[0]\n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , end_node, open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2= open_list_2[0]\n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , start_node, open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n        find_path() \n    }\n\n    if(finish_path || (!open_list_1.length && !open_list_2.length)){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (target_close_list , x , y) => {\n    let node = target_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , target_node , open_list , close_list , target_close_list) => {\n    open_list = remove_from_heap(open_list , (a,b) => a.f < b.f)\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // right (x + size , y)\n    open_list = add_node(c_node , right , 3 , close_list , open_list , target_close_list , target_node)\n\n    // top (x , y - size)\n    open_list = add_node(c_node , top , 2 , close_list , open_list , target_close_list , target_node)\n\n    // left (x - size , y )\n    open_list = add_node(c_node , left , 1 , close_list , open_list , target_close_list , target_node)\n\n    // bottom (x , y + size)\n    open_list = add_node(c_node , bottom , 0 , close_list , open_list , target_close_list , target_node)\n\n    return open_list\n}\n\nconst add_node = (c_node , neighbor_node , wall_num , close_list , open_list , target_close_list , target_node) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        && !close_list.find(node => node.x === neighbor_node.x  && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node \n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        let n_g = c_node.g + size\n\n        if(!check_for_mix_node(target_close_list , x , y)){\n            if(node_in_open && n_g < node_in_open.g){ \n                update_node(node_in_open, n_g , c_node )\n            }else{\n                let new_node = set_node(neighbor_node , n_g , c_node , target_node)\n                open_list = add_to_heap(new_node , open_list , (a,b) => a.f < b.f)\n            }\n        }\n    }\n    return open_list\n}\n\nconst find_path = () => {\n    let color = \"SpringGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst set_node = (node, g , c_node , target_node) => {\n    let color = \"MediumBlue\"\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = target_node.x \n    let y_2 = target_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , c_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nexport {bidirectional_a_star , stop_bidirectional_a_star}"]},"metadata":{},"sourceType":"module"}