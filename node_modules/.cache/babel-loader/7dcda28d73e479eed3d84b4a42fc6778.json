{"ast":null,"code":"import { Node, Block } from './helper_method';\nimport { breadth_first_search } from './solve_maze/breadth_first_search'; // import { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'\n// import { prims_maze } from './draw_maze/prims_maze_generation'\n\nimport { depth_first_search_maze } from './draw_maze/depth_first_search_maze_generation';\nlet size, width, height, cols, rows;\nlet delay, speed, canvas, c, start_node, end_node, nodes, stack;\n\nconst setUp = props => {\n  c = props.c;\n  canvas = props.canvas;\n  nodes = [];\n  stack = [];\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = size * cols;\n  height = size * rows;\n  delay = 0;\n  speed = 100;\n  canvas.width = width;\n  canvas.height = height;\n  draw_divide_maze();\n};\n\nconst draw_divide_maze = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size);\n\n      if (i === 0 && j !== 0) {\n        node.walls[0] = true;\n      } else if (i === rows - 1) {\n        node.walls[2] = true;\n      }\n\n      if (j === 0) {\n        node.walls[3] = true;\n      } else if (j === cols - 1 && i !== rows - 1) {\n        node.walls[1] = true;\n      }\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  start_node = new Block(size / 2, size / 2, c, size, \"blue\");\n  end_node = new Block((cols - 1) * size + size / 2, (rows - 1) * size + size / 2, c, size, \"green\");\n  let draw_delay = depth_first_search_maze({\n    nodes,\n    canvas,\n    c,\n    start_node,\n    end_node,\n    stack,\n    size,\n    cols,\n    rows\n  });\n\n  if (draw_delay) {\n    setTimeout(() => {\n      breadth_first_search({\n        nodes,\n        start_node,\n        end_node,\n        c,\n        canvas,\n        size\n      });\n    }, draw_delay * speed);\n  }\n};\n\nexport { setUp };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["Node","Block","breadth_first_search","depth_first_search_maze","size","width","height","cols","rows","delay","speed","canvas","c","start_node","end_node","nodes","stack","setUp","props","draw_divide_maze","i","j","x","y","node","walls","push","draw_delay","setTimeout"],"mappings":"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","sourcesContent":["import { Node , Block } from './helper_method'\nimport { breadth_first_search }from './solve_maze/breadth_first_search'\n// import { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'\n// import { prims_maze } from './draw_maze/prims_maze_generation'\nimport { depth_first_search_maze } from './draw_maze/depth_first_search_maze_generation'\n\nlet size , width , height , cols , rows \n\nlet delay , speed , canvas , c , start_node, end_node , nodes , stack \n\nconst setUp = (props) => {\n  c = props.c\n  canvas = props.canvas \n  nodes = []\n  stack = []\n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = size * cols \n  height = size * rows\n\n  delay = 0 \n  speed = 100\n\n  canvas.width = width\n  canvas.height = height\n\n  draw_divide_maze()\n}\n\nconst draw_divide_maze = () => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n        let x = j * size + (size / 2)\n        let y = i * size + (size / 2)\n        let node = new Node(x, y , c , size )\n        if(i === 0 && j !== 0) {\n            node.walls[0] = true\n        }else if(i === rows - 1){\n            node.walls[2] = true\n        }\n\n        if(j === 0){\n            node.walls[3] = true \n        }else if(j === cols - 1 && i !== rows - 1){\n            node.walls[1] = true\n        }\n\n        if(i === 0 && j === 0){\n            stack.push(node)\n        }\n        nodes.push(node)\n    }\n  }\n\n  start_node = new Block(size / 2,size / 2 , c , size , \"blue\")\n  end_node = new Block((cols - 1) * size + (size / 2),( rows - 1 ) * size + (size / 2) , c , size , \"green\" )\n  let draw_delay = depth_first_search_maze({nodes , canvas , c , start_node , end_node , stack , size \n  , cols , rows})\n  if(draw_delay){\n    setTimeout(() => {\n      breadth_first_search({nodes , start_node , end_node , c , canvas , size })\n    }, draw_delay * speed);\n  }\n}\n\nexport {setUp}\n"]},"metadata":{},"sourceType":"module"}