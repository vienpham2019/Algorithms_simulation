{"ast":null,"code":"var _jsxFileName = \"/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js\";\nimport React, { Component } from 'react';\nimport { setUp, run_solve_maze } from './Algorithms/mazeController';\nimport { connect } from 'react-redux';\nimport swal from '@sweetalert/with-react';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.check_recursive_delay = value => {\n      this.setState({\n        dispay_draw_button: value\n      });\n    };\n\n    this.updateCanvas = () => {\n      // rows == min 15 and max 50\n      let {\n        rows,\n        height,\n        width,\n        select_draw_algorithims\n      } = this.state;\n      let cols = Math.floor(rows * (window.innerWidth * .95 / (window.innerHeight * .9)));\n      const canvas = this.refs.maze;\n      const c = canvas.getContext('2d');\n\n      if (rows < 15 || rows > 50) {\n        swal({\n          button: false,\n          content: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              color: 'black'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }\n          }, \"Rows should be minimum 15 and maximum 50.\"))\n        });\n        return;\n      }\n\n      setUp({\n        c,\n        canvas,\n        cols,\n        rows,\n        width,\n        height,\n        draw_maze: true,\n        select_draw_algorithims,\n        check_recursive_delay: this.check_recursive_delay\n      });\n    };\n\n    this.state = {\n      width: window.innerWidth * .95,\n      height: window.innerHeight * .92,\n      select_draw_algorithims: \"Depth first search\",\n      select_solve_algorithims: \"A star\",\n      rows: 15,\n      dispay_draw_button: true\n    };\n  }\n\n  render() {\n    let {\n      width,\n      height,\n      select_solve_algorithims\n    } = this.state;\n    let {\n      draw_maze_algorithims,\n      solve_maze_algorithims\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group p-2\",\n      style: {\n        minWidth: 600\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Algorithms\")), /*#__PURE__*/React.createElement(\"select\", {\n      class: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      style: {\n        minWidth: 250\n      },\n      onChange: e => this.setState({\n        select_draw_algorithims: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, draw_maze_algorithims.map(algorithm => /*#__PURE__*/React.createElement(\"option\", {\n      value: algorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }, algorithm))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"Speed\")), /*#__PURE__*/React.createElement(\"select\", {\n      class: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      style: {\n        maxWidth: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"fast\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, \"Fast\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"slow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, \"Slow\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Size(rows)\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      class: \"form-control\",\n      min: \"15\",\n      max: \"50\",\n      placeholder: \"Minimum 15 and Maximum 50\",\n      style: {\n        minWidth: 100\n      },\n      onChange: e => {\n        let rows = Math.floor(e.target.value);\n        this.setState({\n          rows\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-outline-light\",\n      type: \"submit\",\n      onClick: () => this.updateCanvas(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, \"Generate Maze\"))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group p-2\",\n      style: {\n        maxWidth: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"input-group-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Algorithms\")), /*#__PURE__*/React.createElement(\"select\", {\n      class: \"custom-select\",\n      id: \"inputGroupSelect04\",\n      \"aria-label\": \"Example select with button addon\",\n      onChange: e => this.setState({\n        select_solve_algorithims: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, solve_maze_algorithims.map(algorithm => /*#__PURE__*/React.createElement(\"option\", {\n      value: algorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, algorithm))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-outline-light\",\n      type: \"button\",\n      onClick: () => run_solve_maze(select_solve_algorithims),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"Solve Maze\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"maze\",\n      style: {\n        width,\n        height\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    draw_maze_algorithims: state.draw_maze_algorithims,\n    solve_maze_algorithims: state.solve_maze_algorithims\n  };\n};\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js"],"names":["React","Component","setUp","run_solve_maze","connect","swal","App","constructor","check_recursive_delay","value","setState","dispay_draw_button","updateCanvas","rows","height","width","select_draw_algorithims","state","cols","Math","floor","window","innerWidth","innerHeight","canvas","refs","maze","c","getContext","button","content","color","draw_maze","select_solve_algorithims","render","draw_maze_algorithims","solve_maze_algorithims","props","minWidth","e","target","map","algorithm","maxWidth","mapStateToProps"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\nimport {setUp , run_solve_maze} from './Algorithms/mazeController'\nimport {connect} from 'react-redux'\nimport swal from '@sweetalert/with-react'\n\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      width: (window.innerWidth * .95),\n      height: (window.innerHeight * .92),\n      select_draw_algorithims: \"Depth first search\", \n      select_solve_algorithims: \"A star\",\n      rows: 15, \n      dispay_draw_button: true \n    }\n  }\n\n  check_recursive_delay = (value) => {\n    this.setState({dispay_draw_button: value})\n  }\n\n  updateCanvas = () => {\n    // rows == min 15 and max 50\n    let {rows , height , width , select_draw_algorithims} = this.state\n\n    let cols = Math.floor(rows * ((window.innerWidth * .95) / (window.innerHeight * .9))) \n\n    const canvas = this.refs.maze\n    const c = canvas.getContext('2d');\n\n    if(rows < 15 || rows > 50){\n      swal({\n        button: false, \n        content: (\n          <div style={{color: 'black'}}>\n            <h3>Rows should be minimum 15 and maximum 50.</h3>\n          </div>\n        )\n      })\n      return\n    }\n\n    setUp({c , canvas , cols , rows, width , height , draw_maze: true , select_draw_algorithims , check_recursive_delay: this.check_recursive_delay})\n  }\n  render(){\n    let {width , height , select_solve_algorithims} = this.state\n    let {draw_maze_algorithims , solve_maze_algorithims} = this.props\n    return(\n      <div className=\"mt-1\">\n        <nav className=\"navbar\">\n          <div className=\"d-flex flex-wrap\">\n            <div class=\"input-group p-2\" style={{minWidth: 600}}>\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Algorithms</span>\n              </div>\n              <select \n                class=\"custom-select\" \n                id=\"inputGroupSelect04\" \n                aria-label=\"Example select with button addon\"\n                style={{minWidth: 250}}\n                onChange={(e) => this.setState({select_draw_algorithims: e.target.value})}\n              >\n                {draw_maze_algorithims.map(algorithm => \n                  <option value={algorithm}>{algorithm}</option>\n                )}\n              </select>\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Speed</span>\n              </div>\n              <select \n                class=\"custom-select\" \n                id=\"inputGroupSelect04\" \n                aria-label=\"Example select with button addon\"\n                style={{maxWidth: 100}}\n              >\n                <option value=\"fast\">Fast</option>\n                <option value=\"slow\">Slow</option>\n              </select>\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Size(rows)</span>\n              </div>\n              <input \n                type=\"number\" \n                class=\"form-control\" \n                min='15'\n                max='50'\n                placeholder=\"Minimum 15 and Maximum 50\"\n                style={{minWidth: 100}}\n                onChange={(e) => {\n                  let rows = Math.floor(e.target.value)\n                  this.setState({rows})\n                }}\n              ></input>\n            <div class=\"input-group-append\">\n              <button \n                class=\"btn btn-outline-light\" \n                type=\"submit\"\n                onClick={() => this.updateCanvas()}\n              >\n                Generate Maze\n              </button>\n            </div>\n          </div>\n            <div class=\"input-group p-2\" style={{maxWidth: 500}}>\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Algorithms</span>\n              </div>\n              <select \n                class=\"custom-select\" \n                id=\"inputGroupSelect04\" \n                aria-label=\"Example select with button addon\"\n                onChange={(e) => this.setState({select_solve_algorithims: e.target.value})}\n              >\n                {solve_maze_algorithims.map(algorithm => \n                  <option value={algorithm}>{algorithm}</option>\n                )}\n              </select>\n              <div class=\"input-group-append\">\n                <button \n                  class=\"btn btn-outline-light\" \n                  type=\"button\"\n                  onClick={() => run_solve_maze(select_solve_algorithims)}\n                >\n                  Solve Maze\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n        <div className=\"m-5\">\n          <canvas ref=\"maze\" style={{width, height}}></canvas>\n        </div> \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    draw_maze_algorithims: state.draw_maze_algorithims,\n    solve_maze_algorithims: state.solve_maze_algorithims\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n"]},"metadata":{},"sourceType":"module"}