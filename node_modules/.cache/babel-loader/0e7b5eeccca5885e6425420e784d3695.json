{"ast":null,"code":"import { Node, Block } from './helper_method';\nlet size, width, height, cols, rows;\nlet delay;\nlet speed, draw_interval;\nlet canvas, c;\nlet nodes, block;\nlet visited_nodes, stack;\nlet quere, finish_path, nodes_path, path, current_node;\nlet start_node, end_node;\nlet myReq, myReqDraw;\nlet my_time_outs = [];\n\nconst setUp = props => {\n  c = props.c;\n  canvas = props.canvas;\n  nodes = [];\n  visited_nodes = [];\n  stack = [];\n  quere = [];\n  nodes_path = [];\n  path = [];\n  finish_path = false;\n  cols = props.cols;\n  rows = props.rows;\n  size = props.size;\n  width = size * cols;\n  height = size * rows;\n\n  for (let i = 0; i < my_time_outs.length; i++) {\n    clearTimeout(i);\n  }\n\n  my_time_outs = [];\n  delay = 0;\n  speed = 100;\n  canvas.width = width;\n  canvas.height = height;\n  cancelAnimationFrame(myReq);\n  draw_divide_maze();\n};\n\nconst draw_divide_maze = () => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let x = j * size + size / 2;\n      let y = i * size + size / 2;\n      let node = new Node(x, y, c, size);\n\n      if (i === 0 && j !== 0) {\n        node.walls[0] = true;\n      } else if (i === rows - 1) {\n        node.walls[2] = true;\n      }\n\n      if (j === 0) {\n        node.walls[3] = true;\n      } else if (j === cols - 1 && i !== rows - 1) {\n        node.walls[1] = true;\n      }\n\n      if (i === 0 && j === 0) {\n        stack.push(node);\n        visited_nodes.push(node);\n      }\n\n      nodes.push(node);\n    }\n  }\n\n  start_node = new Block(size / 2, size / 2, c, size, \"blue\");\n  quere.push(start_node);\n  end_node = new Block((cols - 1) * size + size / 2, (rows - 1) * size + size / 2, c, size, \"green\");\n  let draw_delay = draw_maze(nodes, cols, rows, 0, 0);\n\n  if (draw_delay) {\n    setTimeout(() => {\n      console.log('done');\n    }, draw_delay * speed);\n  }\n};\n\nconst draw_maze = (nodes_array, x_max, y_max, x_min, y_min) => {\n  if (x_max - x_min < 1 || y_max - y_min < 1) return;\n  let random_x = getRandom(x_min, x_max);\n  let random_y = getRandom(y_min, y_max);\n  let x_or_y = getRandom(-20, 20);\n  delay++;\n  my_time_outs.push(setTimeout(() => {\n    for (let i = 0; i < nodes_array.length; i++) {\n      if (x_or_y > 0) {\n        // x\n        if (nodes_array[i].x === random_x * size + size / 2 && nodes_array[i].y <= y_max * size + size / 2 && nodes_array[i].y >= y_min * size + size / 2 && nodes_array[i].x !== (cols - 1) * size + size / 2) {\n          if (nodes_array[i].y !== random_y * size + size / 2) {\n            nodes_array[i].walls[1] = true;\n            let {\n              x,\n              y\n            } = nodes_array[i];\n            let neightbor_node = nodes_array.find(node => node.x === x + size && node.y === y);\n\n            if (neightbor_node) {\n              neightbor_node.walls[3] = true;\n            }\n          }\n        }\n      } else {\n        if (nodes_array[i].y === random_y * size + size / 2 && nodes_array[i].x <= x_max * size + size / 2 && nodes_array[i].x >= x_min * size + size / 2) {\n          if (nodes_array[i].x !== random_x * size + size / 2) {\n            nodes_array[i].walls[2] = true;\n            let {\n              x,\n              y\n            } = nodes_array[i];\n            let neightbor_node = nodes_array.find(node => node.x === x && node.y === y + size);\n\n            if (neightbor_node) {\n              neightbor_node.walls[0] = true;\n            }\n          }\n        }\n      }\n\n      nodes_array[i].draw();\n    }\n  }, delay * speed));\n\n  if (x_or_y > 0) {\n    // setTimeout(() => {\n    draw_maze(nodes_array, random_x, y_max, x_min, y_min); // right \n    // }, delay * (speed + 10));\n    // setTimeout(() => {\n\n    draw_maze(nodes_array, x_max, y_max, random_x + 1, y_min); // left \n    // }, delay * (speed + 20));\n  } else {\n    // setTimeout(() => {\n    draw_maze(nodes_array, x_max, random_y, x_min, y_min); // top \n    // }, delay * (speed + 10));\n    // setTimeout(() => {\n\n    draw_maze(nodes_array, x_max, y_max, x_min, random_y + 1); // bottom\n    // }, delay * (speed + 20));\n  }\n\n  return delay;\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < nodes_path.length; i++) {\n    nodes_path[i].draw();\n  }\n\n  start_node.draw();\n  end_node.draw();\n\n  if (end_node.prev_node) {\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n\n  if (!end_node.prev_node && !finish_path) {\n    solve_maze();\n  }\n};\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere];\n  quere.shift(); // visited_nodes_for_path.push(current_node)\n\n  if (end_node.prev_node) {\n    return;\n  }\n\n  for (let i = 0; i < quere_nodes.length; i++) {\n    check_neighbor_node(quere_nodes[i]);\n  }\n};\n\nconst check_neighbor_node = node => {\n  let x = node.x;\n  let y = node.y;\n  let color = \"MidnightBlue\";\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y); // top \n\n  let top = nodes.find(n => n.x === x && n.y === y - size);\n\n  if (top && !current_find_node.walls[0] && !nodes_path.find(n => n.x === top.x && n.y === top.y)) {\n    let top_x = top.x;\n    let top_y = top.y;\n\n    if (top_x === end_node.x && top_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let top_block = new Block(top_x, top_y, c, size, color, node);\n      quere.push(top_block);\n      nodes_path.push(top_block);\n    }\n  } // right\n\n\n  let right = nodes.find(n => n.x === x + size && n.y === y);\n\n  if (right && !current_find_node.walls[1] && !nodes_path.find(n => n.x === right.x && n.y === right.y)) {\n    let right_x = right.x;\n    let right_y = right.y;\n\n    if (right_x === end_node.x && right_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let right_block = new Block(right_x, right_y, c, size, color, node);\n      quere.push(right_block);\n      nodes_path.push(right_block);\n    }\n  } // bottom\n\n\n  let bottom = nodes.find(n => n.x === x && n.y === y + size);\n\n  if (bottom && !current_find_node.walls[2] && !nodes_path.find(n => n.x === bottom.x && n.y === bottom.y)) {\n    let bottom_x = bottom.x;\n    let bottom_y = bottom.y;\n\n    if (bottom_x === end_node.x && bottom_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let bottom_block = new Block(bottom_x, bottom_y, c, size, color, node);\n      quere.push(bottom_block);\n      nodes_path.push(bottom_block);\n    }\n  } // left \n\n\n  let left = nodes.find(n => n.x === x - size && n.y === y);\n\n  if (left && !current_find_node.walls[3] && !nodes_path.find(n => n.x === left.x && n.y === left.y)) {\n    let left_x = left.x;\n    let left_y = left.y;\n\n    if (left_x === end_node.x && left_y === end_node.y) {\n      end_node.prev_node = node;\n      current_node = node;\n      return;\n    } else {\n      let left_block = new Block(left_x, left_y, c, size, color, node);\n      quere.push(left_block);\n      nodes_path.push(left_block);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"green\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\nexport { setUp, run_solve_maze };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/depth_first_search_maze.js"],"names":["Node","Block","size","width","height","cols","rows","delay","speed","draw_interval","canvas","c","nodes","block","visited_nodes","stack","quere","finish_path","nodes_path","path","current_node","start_node","end_node","myReq","myReqDraw","my_time_outs","setUp","props","i","length","clearTimeout","cancelAnimationFrame","draw_divide_maze","j","x","y","node","walls","push","draw_delay","draw_maze","setTimeout","console","log","nodes_array","x_max","y_max","x_min","y_min","random_x","getRandom","random_y","x_or_y","neightbor_node","find","draw","run_solve_maze","requestAnimationFrame","clearRect","prev_node","find_path","solve_maze","quere_nodes","shift","check_neighbor_node","color","current_find_node","c_n","top","n","top_x","top_y","top_block","right","right_x","right_y","right_block","bottom","bottom_x","bottom_y","bottom_block","left","left_x","left_y","left_block","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import {Node , Block} from './helper_method'\n\nlet size , width , height , cols , rows \n\nlet delay\n\nlet speed , draw_interval\n\nlet canvas , c \n\nlet nodes , block \n\nlet visited_nodes , stack \n\nlet quere , finish_path , nodes_path , path , current_node\n \nlet start_node, end_node \n\nlet myReq , myReqDraw\n\nlet my_time_outs = []\n\nconst setUp = (props) => {\n  c = props.c\n  canvas = props.canvas \n  nodes = []\n  visited_nodes = []\n  stack = []\n  quere = []\n  nodes_path = []\n  path = []\n  finish_path = false \n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = size * cols \n  height = size * rows\n\n  for(let i = 0 ; i < my_time_outs.length ; i ++){\n    clearTimeout(i)\n  }\n\n  my_time_outs = []\n\n  delay = 0 \n  speed = 100\n\n  canvas.width = width\n  canvas.height = height\n\n  cancelAnimationFrame(myReq)\n  draw_divide_maze()\n}\n\nconst draw_divide_maze = () => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n        let x = j * size + (size / 2)\n        let y = i * size + (size / 2)\n        let node = new Node(x, y , c , size )\n        if(i === 0 && j !== 0) {\n            node.walls[0] = true\n        }else if(i === rows - 1){\n            node.walls[2] = true\n        }\n\n        if(j === 0){\n            node.walls[3] = true \n        }else if(j === cols - 1 && i !== rows - 1){\n            node.walls[1] = true\n        }\n\n        if(i === 0 && j === 0){\n            stack.push(node)\n            visited_nodes.push(node)\n        }\n        nodes.push(node)\n    }\n  }\n\n  start_node = new Block(size / 2,size / 2 , c , size , \"blue\")\n  quere.push(start_node)\n  end_node = new Block((cols - 1) * size + (size / 2),( rows - 1 ) * size + (size / 2) , c , size , \"green\" )\n  let draw_delay = draw_maze(nodes , cols, rows, 0, 0)\n  if(draw_delay){\n    setTimeout(() => {\n      console.log('done')\n    }, draw_delay * speed);\n  }\n}\n\n\nconst draw_maze = (nodes_array , x_max, y_max, x_min , y_min) => {\n\n  if(x_max - x_min < 1 || y_max - y_min < 1) return\n\n  let random_x = getRandom(x_min,x_max)\n  let random_y = getRandom(y_min,y_max)\n  let x_or_y = getRandom(-20, 20) \n\n  delay ++\n  my_time_outs.push(\n  setTimeout(() => {\n    for(let i = 0; i < nodes_array.length; i ++){\n        if(x_or_y > 0) { // x\n            if (\n                nodes_array[i].x === random_x * size + (size / 2) \n                && nodes_array[i].y <= y_max * size + (size / 2)\n                && nodes_array[i].y >= y_min * size + (size / 2)\n                && nodes_array[i].x !== (cols - 1) * size + (size / 2)\n                ){\n                if (nodes_array[i].y !== random_y * size + (size / 2)){\n                    nodes_array[i].walls[1] = true\n                    let {x , y} = nodes_array[i]\n                    let neightbor_node = nodes_array.find(node => node.x === x + size && node.y === y) \n                    if(neightbor_node){\n                        neightbor_node.walls[3] = true\n                    } \n                }\n            }\n        }else{\n            if(\n                nodes_array[i].y === random_y * size + (size / 2)\n                && nodes_array[i].x <= x_max * size + (size / 2)\n                && nodes_array[i].x >= x_min * size + (size / 2)\n                ){\n                if(nodes_array[i].x !== random_x * size + (size / 2)){\n                    nodes_array[i].walls[2] = true\n                    let {x , y} = nodes_array[i]\n                    let neightbor_node = nodes_array.find(node => node.x === x && node.y === y + size) \n                    if(neightbor_node){\n                        neightbor_node.walls[0] = true\n                    } \n                }\n            }\n        }\n          nodes_array[i].draw()\n      }\n  }, delay * speed)\n  )\n\n    if(x_or_y > 0){ \n        // setTimeout(() => {\n              draw_maze(nodes_array, random_x, y_max, x_min, y_min) // right \n          // }, delay * (speed + 10));\n          // setTimeout(() => {\n              draw_maze(nodes_array, x_max, y_max, random_x + 1, y_min) // left \n        // }, delay * (speed + 20));\n    }else{\n        // setTimeout(() => {\n            draw_maze(nodes_array, x_max, random_y, x_min, y_min) // top \n        // }, delay * (speed + 10));\n        // setTimeout(() => {\n            draw_maze(nodes_array, x_max, y_max, x_min , random_y + 1) // bottom\n        // }, delay * (speed + 20));\n    }\n    return delay \n}\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze)\n  c.clearRect(0,0,canvas.width, canvas.height)\n\n  for(let i = 0; i < nodes.length; i ++){\n      nodes[i].draw()\n  }\n\n  for(let i = 0; i < nodes_path.length; i ++){\n      nodes_path[i].draw()\n  }\n\n  start_node.draw()\n  end_node.draw()\n  if(end_node.prev_node){\n    find_path()\n  }\n  if(finish_path){\n    cancelAnimationFrame(myReq)\n  }\n  if(!end_node.prev_node && !finish_path){\n    solve_maze()\n  }\n}\n\nconst solve_maze = () => {\n  let quere_nodes = [...quere]\n  quere.shift()\n  // visited_nodes_for_path.push(current_node)\n  if(end_node.prev_node){\n      return\n  }\n  for(let i = 0; i < quere_nodes.length ; i ++){\n      check_neighbor_node(quere_nodes[i])\n  }\n}\n\nconst check_neighbor_node = (node) => {\n  let x = node.x\n  let y = node.y\n  let color = \"MidnightBlue\"\n  let current_find_node = nodes.find(c_n => c_n.x === node.x && c_n.y === node.y )\n  // top \n  let top = nodes.find(n => n.x === x && n.y === y - size)\n  if(top && !current_find_node.walls[0] && !nodes_path.find(n => n.x === top.x && n.y === top.y)){\n      let top_x = top.x\n      let top_y = top.y\n      if(top_x === end_node.x && top_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let top_block = new Block(top_x, top_y , c , size , color, node)\n          quere.push(top_block)\n          nodes_path.push(top_block)\n      }\n  }\n\n  // right\n  let right = nodes.find(n => n.x === x + size && n.y === y )\n  if(right && !current_find_node.walls[1] && !nodes_path.find(n => n.x === right.x  && n.y === right.y)){\n      let right_x = right.x \n      let right_y = right.y \n      if(right_x === end_node.x && right_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let right_block = new Block(right_x, right_y, c , size , color ,node)\n          quere.push(right_block)\n          nodes_path.push(right_block)\n      }\n  }\n\n  // bottom\n  let bottom = nodes.find(n => n.x === x && n.y === y + size ) \n  if(bottom && !current_find_node.walls[2] && !nodes_path.find(n => n.x === bottom.x  && n.y === bottom.y )){\n      let bottom_x = bottom.x \n      let bottom_y = bottom.y \n      if(bottom_x === end_node.x && bottom_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let bottom_block = new Block(bottom_x, bottom_y, c , size ,color ,node)\n          quere.push(bottom_block)\n          nodes_path.push(bottom_block)\n      }\n  }\n\n  // left \n  let left = nodes.find(n => n.x === x - size && n.y === y)\n  if(left && !current_find_node.walls[3] && !nodes_path.find(n => n.x === left.x && n.y === left.y)){\n      let left_x = left.x \n      let left_y = left.y \n      if(left_x === end_node.x && left_y === end_node.y){\n          end_node.prev_node = node \n          current_node = node \n          return \n      }else{\n          let left_block = new Block(left_x,left_y, c, size , color , node)\n          quere.push(left_block)\n          nodes_path.push(left_block)\n      }\n  }\n\n}\n\nconst find_path = () => {\n  current_node.color = \"green\"\n  if(current_node.x === start_node.x && current_node.y === start_node.y){\n      finish_path = true\n      return\n  }\n  current_node = current_node.prev_node\n}\n\nconst getRandom = (min,max) => {\n  return Math.floor(Math.random() * (max - min) + min)\n}\n\nexport {setUp , run_solve_maze}\n"]},"metadata":{},"sourceType":"module"}