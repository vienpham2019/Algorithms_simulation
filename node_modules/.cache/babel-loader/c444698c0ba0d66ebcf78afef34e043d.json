{"ast":null,"code":"var get_top_right_bottom_left=function get_top_right_bottom_left(node,array,size){var x=node.x,y=node.y;var top=array.find(function(n){return n.x===x&&n.y===y-size;});var right=array.find(function(n){return n.x===x+size&&n.y===y;});var bottom=array.find(function(n){return n.x===x&&n.y===y+size;});var left=array.find(function(n){return n.x===x-size&&n.y===y;});return{top:top,right:right,bottom:bottom,left:left};};var add_to_heap=function add_to_heap(node,array,method){array.push(node);var i=array.length;while(array[Math.floor(i/2)-1]&&method(array[i-1],array[Math.floor(i/2)-1])){var current_node=array[i-1];array[i-1]=array[Math.floor(i/2)-1];array[Math.floor(i/2)-1]=current_node;i=Math.floor(i/2);}return array;};var remove_from_heap=function remove_from_heap(array,method){var i=1;array[0]=array[array.length-1];array.pop();var current_node=array[0];var stop=false;while(!stop){var left_child=array[2*i-1];var right_child=array[2*i];var max_child_index=void 0;if(left_child&&right_child){max_child_index=method(left_child,right_child)?2*i:2*i+1;}else if(left_child||right_child){max_child_index=left_child?2*i:2*i+1;}if(max_child_index&&method(array[max_child_index-1],current_node)){array[i-1]=array[max_child_index-1];array[max_child_index-1]=current_node;current_node=array[max_child_index-1];i=max_child_index;}else{stop=true;}}return array;};export{get_top_right_bottom_left,add_to_heap,remove_from_heap};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/helper_method/algorithms_helper_method.js"],"names":["get_top_right_bottom_left","node","array","size","x","y","top","find","n","right","bottom","left","add_to_heap","method","push","i","length","Math","floor","current_node","remove_from_heap","pop","stop","left_child","right_child","max_child_index"],"mappings":"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","sourcesContent":["const get_top_right_bottom_left = (node , array , size) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nconst add_to_heap = (node, array, method) => {\n    array.push(node)\n    let i = array.length \n    while(array[Math.floor(i / 2) - 1] && method(array[i - 1] , array[Math.floor(i / 2) - 1])){\n      let current_node = array[i - 1]\n      array[i - 1] = array[Math.floor(i / 2) - 1]\n      array[Math.floor(i / 2) - 1] = current_node\n      i = Math.floor(i / 2)\n    }\n    return array \n  }\n  \n  const remove_from_heap = (array , method) => {\n    let i = 1\n    array[0] = array[array.length - 1]\n    array.pop()\n    let current_node = array[0]\n    let stop = false\n    while(!stop) {\n      let left_child = array[(2 * i) - 1]\n      let right_child = array[(2 * i)]\n      let max_child_index \n      if(left_child && right_child){\n        max_child_index = method(left_child,right_child) ? 2 * i : 2 * i + 1\n      }else if(left_child || right_child){\n        max_child_index = left_child ? 2 * i : 2 * i + 1\n      }\n  \n      if(max_child_index && method(array[max_child_index - 1] ,current_node)){\n        array[i - 1] = array[max_child_index - 1]\n        array[max_child_index - 1] = current_node \n        current_node = array[max_child_index - 1]\n        i = max_child_index\n      }else{\n        stop = true\n      }\n    }\n    return array \n  }\n\nexport {get_top_right_bottom_left , add_to_heap , remove_from_heap}"]},"metadata":{},"sourceType":"module"}