{"ast":null,"code":"import{Block}from'../helper_method';import{get_top_right_bottom_left,add_to_heap,remove_from_heap}from'./helper_method/algorithms_helper_method';var start_node,end_node,nodes,c,canvas,size;var close_list_1,close_list_2,open_list_1,current_node_1,open_list_2,current_node_2,myReq,finish_path,finish_search;var bidirectional_dijkstra=function bidirectional_dijkstra(props){start_node=props.start_node;start_node.distance=0;end_node=props.end_node;end_node.distance=0;nodes=props.nodes;c=props.c;canvas=props.canvas;size=props.size;open_list_1=[start_node];close_list_1=[];open_list_2=[end_node];close_list_2=[];current_node_1=start_node;current_node_2=end_node;finish_path=false;finish_search=false;cancelAnimationFrame(myReq);run_solve_maze();};var stop_bidirectional_dijkstra=function stop_bidirectional_dijkstra(){cancelAnimationFrame(myReq);};var run_solve_maze=function run_solve_maze(){myReq=requestAnimationFrame(run_solve_maze);c.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i<nodes.length;i++){nodes[i].draw();}print_close_and_open_list(close_list_1,open_list_1,'MediumBlue','LightSkyBlue');print_close_and_open_list(close_list_2,open_list_2,'CadetBlue','LightCyan');if(open_list_2.length>0&&!finish_search){current_node_2=open_list_2[0];close_list_2.push(current_node_2);open_list_2=find_child_node(current_node_2,open_list_2,close_list_2,close_list_1);}if(open_list_1.length>0&&!finish_search){current_node_1=open_list_1[0];close_list_1.push(current_node_1);open_list_1=find_child_node(current_node_1,open_list_1,close_list_1,close_list_2);}if(finish_search){start_node.draw();end_node.draw();if(!current_node_1&&!current_node_2){finish_path=true;}find_path();}if(finish_path||!open_list_1.length&&!open_list_2.length){cancelAnimationFrame(myReq);}};var print_close_and_open_list=function print_close_and_open_list(close_list,open_list,close_color,open_color){if(!finish_search){for(var i=0;i<open_list.length;i++){open_list[i].color=open_color;open_list[i].draw();}}for(var _i=0;_i<close_list.length;_i++){if(!finish_search){close_list[_i].color=close_color;}close_list[_i].draw();}};var check_for_mix_node=function check_for_mix_node(next_close_list,x,y){var node=next_close_list.find(function(node){return node.x===x&&node.y===y;});if(node){finish_search=true;if(close_list_1.find(function(node){return node.x===x&&node.y===y;})){current_node_1=node;}else{current_node_2=node;}return true;}return false;};var find_child_node=function find_child_node(c_node,open_list,close_list,next_close_list){open_list=remove_from_heap(open_list,function(a,b){return a.distance<b.distance;});var _get_top_right_bottom=get_top_right_bottom_left(c_node,nodes,size),top=_get_top_right_bottom.top,right=_get_top_right_bottom.right,bottom=_get_top_right_bottom.bottom,left=_get_top_right_bottom.left;// Right (x + size , y)\nopen_list=add_node(right,c_node,3,close_list,open_list,next_close_list);// 3\n// top (x , y - size)\nopen_list=add_node(top,c_node,2,close_list,open_list,next_close_list);// 2\n// left (x - size , y )\nopen_list=add_node(left,c_node,1,close_list,open_list,next_close_list);// 1\n// bottom (x , y + size)\nopen_list=add_node(bottom,c_node,0,close_list,open_list,next_close_list);// 0\nreturn open_list;};var add_node=function add_node(neighbor_node,c_node,wall_num,close_list,open_list,neighbor_close_list){if(neighbor_node&&!neighbor_node.walls[wall_num]&&!close_list.find(function(node){return node.x===neighbor_node.x&&node.y===neighbor_node.y;})){var x=neighbor_node.x,y=neighbor_node.y;var node_in_open=open_list.find(function(n){return n.x===x&&n.y===y;});if(!check_for_mix_node(neighbor_close_list,x,y)){if(node_in_open){update_node(node_in_open,c_node);}else{var new_node=create_new_node(neighbor_node,c_node);open_list=add_to_heap(new_node,open_list,function(a,b){return a.distance<b.distance;});}}}return open_list;};var find_path=function find_path(){var color=\"LimeGreen\";if(current_node_1){current_node_1.color=color;current_node_1=current_node_1.prev_node;}if(current_node_2){current_node_2.color=color;current_node_2=current_node_2.prev_node;}};var create_new_node=function create_new_node(node,c_node){var distance=find_distance(node,c_node);return new Block(node.x,node.y,c,size,'MidnightBlue',c_node,null,null,null,distance);};var find_distance=function find_distance(node,c_node){// find distance from current node to next node \nvar x_1=c_node.x;var y_1=c_node.y;var x_2=node.x;var y_2=node.y;return(Math.abs(x_1-x_2)+Math.abs(y_1-y_2))*size+c_node.distance;};var update_node=function update_node(node,c_node){if(c_node.distance+size<node.distance){node.distance=find_distance(node,c_node);}return node;};export{bidirectional_dijkstra,stop_bidirectional_dijkstra};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","close_list_1","close_list_2","open_list_1","current_node_1","open_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_dijkstra","props","distance","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","next_close_list","x","y","node","find","c_node","a","b","top","right","bottom","left","add_node","neighbor_node","wall_num","neighbor_close_list","walls","node_in_open","n","update_node","new_node","create_new_node","prev_node","find_distance","x_1","y_1","x_2","y_2","Math","abs"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet close_list_1 , close_list_2 , open_list_1 , current_node_1 , open_list_2, current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    \n    end_node = props.end_node \n    end_node.distance = 0\n\n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n    \n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = start_node\n    current_node_2 = end_node \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MediumBlue' , 'LightSkyBlue' )\n    print_close_and_open_list(close_list_2 , open_list_2 , 'CadetBlue' , 'LightCyan')\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2 = open_list_2[0] \n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1 = open_list_1[0] \n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n\n        find_path() \n    }\n\n    if(finish_path || (!open_list_1.length && !open_list_2.length)){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color ) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (next_close_list , x , y) => {\n    let node = next_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , open_list , close_list , next_close_list) => {\n    open_list = remove_from_heap(open_list , (a,b) => a.distance < b.distance)\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // Right (x + size , y)\n    open_list = add_node(right , c_node , 3 , close_list , open_list , next_close_list) // 3\n\n    // top (x , y - size)\n    open_list = add_node(top , c_node , 2 , close_list , open_list , next_close_list) // 2\n\n    // left (x - size , y )\n    open_list = add_node(left , c_node , 1 , close_list , open_list , next_close_list) // 1\n\n    // bottom (x , y + size)\n    open_list = add_node(bottom , c_node , 0 , close_list , open_list , next_close_list) // 0\n\n    return open_list\n}\n\nconst add_node = (neighbor_node , c_node , wall_num , close_list , open_list , neighbor_close_list) => {\n    if(neighbor_node && !neighbor_node.walls[wall_num] &&!close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        \n        if(!check_for_mix_node(neighbor_close_list , x , y)){\n            if(node_in_open){\n                update_node(node_in_open , c_node) \n            } else{\n                let new_node = create_new_node(neighbor_node , c_node)\n                open_list = add_to_heap(new_node , open_list , (a,b) => a.distance < b.distance)\n            }\n        }\n    }\n    return open_list\n}\n\nconst find_path = () => {\n    let color = \"LimeGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst create_new_node = (node , c_node) => {\n    let distance = find_distance(node , c_node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , c_node , null , null , null , distance)\n}\n\nconst find_distance = (node , c_node) => {\n    // find distance from current node to next node \n    let x_1 = c_node.x \n    let y_1 = c_node.y\n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + c_node.distance\n}\n\nconst update_node = (node , c_node) => {\n    if(c_node.distance + size < node.distance){\n        node.distance = find_distance(node , c_node)\n    }\n    return node\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}