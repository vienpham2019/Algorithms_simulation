{"ast":null,"code":"var _jsxFileName = \"/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js\";\nimport React, { Component } from 'react';\nimport { Node, Block } from './Algorithms/depth_first_search_maze';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.setUp = () => {\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          let x = j * size + size / 2;\n          let y = i * size + size / 2;\n          let node = new Node(x, y);\n\n          if (i === 0 && j === 0) {\n            stack.push(node);\n            visited_nodes.push(node);\n          }\n\n          nodes.push(node);\n        }\n      }\n\n      const draw_maze = () => {\n        myReq = requestAnimationFrame(draw_maze);\n        c.clearRect(0, 0, canvas.width, canvas.height);\n\n        for (let i = 0; i < nodes.length; i++) {\n          nodes[i].draw();\n        }\n\n        for (let i = 0; i < nodes_path.length; i++) {\n          nodes_path[i].draw();\n        }\n\n        if (stack.length === 0) {\n          start_node.draw();\n          end_node.draw();\n\n          if (end_node.prev_node) {\n            find_path();\n          } else if (finish_path) {\n            cancelAnimationFrame(myReq);\n          } else {\n            solve_maze();\n          }\n        } else {\n          block.move();\n        }\n      };\n\n      const solve_maze = () => {\n        let quere_nodes = [...quere];\n        quere.shift(); // visited_nodes_for_path.push(current_node)\n\n        if (end_node.prev_node) {\n          return;\n        }\n\n        for (let i = 0; i < quere_nodes.length; i++) {\n          check_neighbor_node(quere_nodes[i]);\n        }\n      };\n\n      const check_neighbor_node = node => {\n        let x = node.x;\n        let y = node.y;\n        let color = \"purple\"; // top \n\n        let top = nodes.find(n => n.x === x + size / 2 && n.y === y - size / 2);\n\n        if (top && !top.walls[2] && !nodes_path.find(n => n.x === top.x - size / 2 && n.y === top.y - size / 2)) {\n          let top_x = top.x - size / 2;\n          let top_y = top.y - size / 2;\n\n          if (top_x === end_node.x && top_y === end_node.y) {\n            end_node.prev_node = node;\n            current_node = node;\n            return;\n          } else {\n            let top_block = new Block(top_x, top_y, color, node);\n            quere.push(top_block);\n            nodes_path.push(top_block);\n          }\n        } // right\n\n\n        let right = nodes.find(n => n.x === x + size * 3 / 2 && n.y === y + size / 2);\n\n        if (right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - size / 2 && n.y === right.y - size / 2)) {\n          let right_x = right.x - size / 2;\n          let right_y = right.y - size / 2;\n\n          if (right_x === end_node.x && right_y === end_node.y) {\n            end_node.prev_node = node;\n            current_node = node;\n            return;\n          } else {\n            let right_block = new Block(right_x, right_y, color, node);\n            quere.push(right_block);\n            nodes_path.push(right_block);\n          }\n        } // bottom\n\n\n        let bottom = nodes.find(n => n.x === x + size / 2 && n.y === y + size * 3 / 2);\n\n        if (bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - size / 2 && n.y === bottom.y - size / 2)) {\n          let bottom_x = bottom.x - size / 2;\n          let bottom_y = bottom.y - size / 2;\n\n          if (bottom_x === end_node.x && bottom_y === end_node.y) {\n            end_node.prev_node = node;\n            current_node = node;\n            return;\n          } else {\n            let bottom_block = new Block(bottom_x, bottom_y, color, node);\n            quere.push(bottom_block);\n            nodes_path.push(bottom_block);\n          }\n        } // left \n\n\n        let left = nodes.find(n => n.x === x - size / 2 && n.y === y + size / 2);\n\n        if (left && !left.walls[1] && !nodes_path.find(n => n.x === left.x - size / 2 && n.y === left.y - size / 2)) {\n          let left_x = left.x - size / 2;\n          let left_y = left.y - size / 2;\n\n          if (left_x === end_node.x && left_y === end_node.y) {\n            end_node.prev_node = node;\n            current_node = node;\n            return;\n          } else {\n            let left_block = new Block(left_x, left_y, color, node);\n            quere.push(left_block);\n            nodes_path.push(left_block);\n          }\n        }\n      };\n\n      block = new Block(0, 0);\n      start_node = new Block(0, 0, \"blue\");\n      quere.push(start_node);\n      end_node = new Block(width - size, height - size, \"green\");\n      draw_maze();\n    };\n\n    this.state = {\n      array: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"maze\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setUp(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"Generate Array\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/App.js"],"names":["React","Component","Node","Block","App","constructor","setUp","i","rows","j","cols","x","size","y","node","stack","push","visited_nodes","nodes","draw_maze","myReq","requestAnimationFrame","c","clearRect","canvas","width","height","length","draw","nodes_path","start_node","end_node","prev_node","find_path","finish_path","cancelAnimationFrame","solve_maze","block","move","quere_nodes","quere","shift","check_neighbor_node","color","top","find","n","walls","top_x","top_y","current_node","top_block","right","right_x","right_y","right_block","bottom","bottom_x","bottom_y","bottom_block","left","left_x","left_y","left_block","state","array","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\nimport {Node , Block} from './Algorithms/depth_first_search_maze'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      array: []\n    }\n  }\n\n  setUp = () => {\n    for(let i = 0; i < rows ; i ++){\n        for(let j = 0; j < cols ; j ++){\n            let x = j * size + (size / 2)\n            let y = i * size + (size / 2)\n            let node = new Node(x, y)\n            if(i === 0 && j === 0){\n                stack.push(node)\n                visited_nodes.push(node)\n            }\n            nodes.push(node)\n        }\n    }\n    const draw_maze = () => {\n      myReq = requestAnimationFrame(draw_maze)\n      c.clearRect(0,0,canvas.width, canvas.height)\n  \n      for(let i = 0; i < nodes.length; i ++){\n          nodes[i].draw()\n      }\n  \n      for(let i = 0; i < nodes_path.length; i ++){\n          nodes_path[i].draw()\n      }\n  \n      if(stack.length === 0){\n          start_node.draw()\n          end_node.draw()\n          if(end_node.prev_node){\n              find_path()\n          }else if(finish_path){\n              cancelAnimationFrame(myReq)\n          }else{\n              solve_maze()\n          }\n      }else{ \n          block.move()  \n      }\n  }\n  \n  const solve_maze = () => {\n      let quere_nodes = [...quere]\n      quere.shift()\n      // visited_nodes_for_path.push(current_node)\n      if(end_node.prev_node){\n          return\n      }\n      for(let i = 0; i < quere_nodes.length ; i ++){\n          check_neighbor_node(quere_nodes[i])\n      }\n  }\n  \n  const check_neighbor_node = (node) => {\n      let x = node.x\n      let y = node.y\n      let color = \"purple\"\n      // top \n      let top = nodes.find(n => n.x === x + (size / 2) && n.y === y - (size / 2))\n      if(top && !top.walls[2] && !nodes_path.find(n => n.x === top.x  - (size / 2) && n.y === top.y - (size / 2))){\n          let top_x = top.x  - (size / 2)\n          let top_y = top.y  - (size / 2)\n          if(top_x === end_node.x && top_y === end_node.y){\n              end_node.prev_node = node \n              current_node = node \n              return \n          }else{\n              let top_block = new Block(top_x, top_y, color, node)\n              quere.push(top_block)\n              nodes_path.push(top_block)\n          }\n      }\n  \n      // right\n      let right = nodes.find(n => n.x === x + (size * 3 / 2) && n.y === y + (size / 2))\n      if(right && !right.walls[3] && !nodes_path.find(n => n.x === right.x - (size / 2) && n.y === right.y - (size / 2))){\n          let right_x = right.x - (size / 2)\n          let right_y = right.y - (size / 2)\n          if(right_x === end_node.x && right_y === end_node.y){\n              end_node.prev_node = node \n              current_node = node \n              return \n          }else{\n              let right_block = new Block(right_x, right_y, color ,node)\n              quere.push(right_block)\n              nodes_path.push(right_block)\n          }\n      }\n  \n      // bottom\n      let bottom = nodes.find(n => n.x === x + (size / 2) && n.y === y + (size * 3 / 2) ) \n      if(bottom && !bottom.walls[0] && !nodes_path.find(n => n.x === bottom.x - (size / 2) && n.y === bottom.y  - (size / 2))){\n          let bottom_x = bottom.x - (size / 2)\n          let bottom_y = bottom.y - (size / 2)\n          if(bottom_x === end_node.x && bottom_y === end_node.y){\n              end_node.prev_node = node \n              current_node = node \n              return \n          }else{\n              let bottom_block = new Block(bottom_x, bottom_y, color ,node)\n              quere.push(bottom_block)\n              nodes_path.push(bottom_block)\n          }\n      }\n  \n      // left \n      let left = nodes.find(n => n.x === x - (size / 2) && n.y === y + (size / 2))\n      if(left && !left.walls[1] && !nodes_path.find(n => n.x === left.x  - (size / 2) && n.y === left.y - (size / 2))){\n          let left_x = left.x - (size / 2)\n          let left_y = left.y - (size / 2)\n          if(left_x === end_node.x && left_y === end_node.y){\n              end_node.prev_node = node \n              current_node = node \n              return \n          }else{\n              let left_block = new Block(left_x,left_y, color , node)\n              quere.push(left_block)\n              nodes_path.push(left_block)\n          }\n      }\n  \n  }\n\n    block = new Block(0 , 0)\n    start_node = new Block(0 , 0 , \"blue\")\n    quere.push(start_node)\n    end_node = new Block(width - size,height - size , \"green\")\n    draw_maze()\n}\n\n  \n  render(){\n    return(\n      <div className=\"container\">\n        <canvas id=\"maze\"></canvas>\n        <button onClick={() => setUp()}>Generate Array</button>\n      </div>\n    )\n  }\n}\n\nexport default App \n"]},"metadata":{},"sourceType":"module"}