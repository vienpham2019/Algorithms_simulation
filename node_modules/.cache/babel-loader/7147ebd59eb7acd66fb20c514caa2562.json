{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left, add_to_heap, remove_from_heap } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list, close_list, current_node, myReq, finish_path;\n\nconst a_star = props => {\n  start_node = props.start_node;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  end_node.prev_node = null;\n  open_list = add_to_heap(start_node, [], (a, b) => a < b);\n  close_list = [];\n  current_node = null;\n  finish_path = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_a_star = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!end_node.prev_node) {\n      close_list[i].color = 'MediumBlue';\n    }\n\n    close_list[i].draw();\n  }\n\n  for (let i = 0; i < open_list.length; i++) {\n    open_list[i].color = 'LightSkyBlue';\n    open_list[i].draw();\n  }\n\n  if (current_node && end_node.x === current_node.x && end_node.y === current_node.y) {\n    end_node.prev_node = current_node.prev_node;\n  }\n\n  if (open_list.length > 0 && !end_node.prev_node) {\n    current_node = open_list[0];\n    close_list.push(current_node);\n    find_child_node();\n  }\n\n  if (end_node.prev_node && !finish_path) {\n    start_node.draw();\n    end_node.draw();\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = () => {\n  open_list = remove_from_heap(open_list, (a, b) => a < b);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_node, nodes, size); // right (x + size , y)\n\n  add_node(right, 3); // top (x , y - size)\n\n  add_node(top, 2); // left (x - size , y )\n\n  add_node(left, 1); // bottom (x , y + size)\n\n  add_node(bottom, 0);\n};\n\nconst add_node = (neighbor_node, wall_num) => {\n  if (neighbor_node && !neighbor_node.walls[wall_num] && !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n    let node_in_open = open_list.find(n => n.x === x && n.y === y);\n    let n_g = current_node.g + size;\n\n    if (node_in_open && n_g < node_in_open.g) {\n      update_node(node_in_open, n_g, current_node);\n    } else {\n      open_list = add_to_heap(set_node(neighbor_node, n_g), open_list, (a, b) => a < b);\n    }\n  }\n};\n\nconst find_path = () => {\n  current_node.color = \"LimeGreen\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n  return;\n};\n\nconst set_node = (node, g) => {\n  let color = 'MediumBlue';\n  let x_1 = node.x;\n  let y_1 = node.y;\n  let x_2 = end_node.x;\n  let y_2 = end_node.y;\n  let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size;\n  let f = h + g;\n  let new_node = new Block(x_1, y_1, c, size, color, current_node, g, h, f);\n  return new_node;\n};\n\nconst update_node = (node, g, parent) => {\n  node.g = g;\n  node.f = g + node.h;\n  node.parent = parent;\n};\n\nexport { a_star, stop_a_star };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/a_star.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","open_list","close_list","current_node","myReq","finish_path","a_star","props","prev_node","a","b","cancelAnimationFrame","run_solve_maze","stop_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","color","x","y","push","find_child_node","find_path","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","find","node","node_in_open","n","n_g","g","update_node","set_node","x_1","y_1","x_2","y_2","h","Math","abs","f","new_node","parent"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list , close_list , current_node , myReq , finish_path\n\nconst a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    end_node.prev_node = null\n\n    open_list = add_to_heap(start_node , [] , (a,b) => a < b)\n    close_list = []\n    current_node = null \n    finish_path = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!end_node.prev_node){\n            close_list[i].color = 'MediumBlue'\n        }\n        close_list[i].draw()\n    }\n\n    for(let i = 0 ; i < open_list.length ; i ++){\n        open_list[i].color = 'LightSkyBlue'\n        open_list[i].draw()\n    }\n\n    if(current_node && end_node.x === current_node.x && end_node.y === current_node.y){\n        end_node.prev_node = current_node.prev_node\n    }\n\n    if(open_list.length > 0 && !end_node.prev_node){\n        current_node = open_list[0]\n        close_list.push(current_node)\n        find_child_node()\n    }\n\n    if(end_node.prev_node && !finish_path){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n\n    open_list = remove_from_heap(open_list , (a,b) => a < b)\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node , nodes , size)\n\n    // right (x + size , y)\n    add_node(right , 3)\n\n    // top (x , y - size)\n    add_node(top , 2)\n\n    // left (x - size , y )\n    add_node(left , 1)\n\n    // bottom (x , y + size)\n    add_node(bottom , 0)\n}\n\nconst add_node = (neighbor_node , wall_num) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        &&  !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node\n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        let n_g = current_node.g + size \n\n        if(node_in_open && n_g < node_in_open.g){\n            update_node(node_in_open, n_g , current_node )\n        }else{\n            open_list = add_to_heap(set_node(neighbor_node, n_g), open_list , (a,b) => a < b)\n        }\n    }\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n    return \n}\n\nconst set_node = (node, g) => {\n    let color = 'MediumBlue'\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = end_node.x \n    let y_2 = end_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , current_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nexport {a_star , stop_a_star}"]},"metadata":{},"sourceType":"module"}