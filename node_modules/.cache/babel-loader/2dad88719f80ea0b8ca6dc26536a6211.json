{"ast":null,"code":"const Node = function (x, y, c, size, neighbor_node = [], prev_node = null) {\n  this.x = x;\n  this.y = y;\n  this.neighbor_node = neighbor_node;\n  this.prev_node = prev_node; // this.walls = [true,true,true,true] // [top, right , bottom , left ]\n\n  this.walls = [false, false, false, false];\n\n  this.draw = (color = \"black\") => {\n    let x = this.x - size / 2;\n    let y = this.y - size / 2; // Top \n\n    if (this.walls[0]) {\n      c.beginPath();\n      c.moveTo(x, y);\n      c.lineTo(x + size, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // right\n\n\n    if (this.walls[1]) {\n      c.beginPath();\n      c.moveTo(x + size, y);\n      c.lineTo(x + size, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // bottom\n\n\n    if (this.walls[2]) {\n      c.beginPath();\n      c.moveTo(x + size, y + size);\n      c.lineTo(x, y + size);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    } // left \n\n\n    if (this.walls[3]) {\n      c.beginPath();\n      c.moveTo(x, y + size);\n      c.lineTo(x, y);\n      c.lineWidth = 4;\n      c.lineCap = \"round\";\n      c.strokeStyle = color;\n      c.stroke();\n    }\n  };\n};\n\nconst Block = function (x, y, c, size, color = \"red\", prev_node = null, g = null, h = null, f = null, distance = Infinity) {\n  this.x = x;\n  this.y = y;\n  this.prev_node = prev_node;\n  this.color = 'rgb(' + Math.floor(255 - 42.5 * x) + ', ' + Math.floor(255 - 42.5 * y) + ', 0)';\n  this.g = g;\n  this.h = h;\n  this.f = f;\n  this.distance = distance;\n\n  this.draw = () => {\n    c.beginPath();\n    c.rect(this.x - size / 3, this.y - size / 3, size * 2 / 3, size * 2 / 3);\n    c.fillStyle = this.color;\n    c.fill();\n  };\n};\n\nexport { Node, Block };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/helper_method.js"],"names":["Node","x","y","c","size","neighbor_node","prev_node","walls","draw","color","beginPath","moveTo","lineTo","lineWidth","lineCap","strokeStyle","stroke","Block","g","h","f","distance","Infinity","Math","floor","rect","fillStyle","fill"],"mappings":"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","sourcesContent":["\n\nconst Node = function(x , y , c , size , neighbor_node = [], prev_node = null){\n    this.x = x\n    this.y = y\n    this.neighbor_node = neighbor_node\n    this.prev_node = prev_node \n    // this.walls = [true,true,true,true] // [top, right , bottom , left ]\n    this.walls = [false, false , false , false]\n\n    this.draw = (color = \"black\") => {\n        let x = this.x - (size / 2)\n        let y = this.y - (size / 2)\n        // Top \n        if(this.walls[0]){\n            c.beginPath()\n            c.moveTo(x, y)\n            c.lineTo(x + size , y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // right\n        if(this.walls[1]){\n            c.beginPath()\n            c.moveTo(x + size, y)\n            c.lineTo(x + size , y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // bottom\n        if(this.walls[2]){\n            c.beginPath()\n            c.moveTo(x + size, y + size)\n            c.lineTo(x, y +size)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n\n        // left \n        if(this.walls[3]){\n            c.beginPath()\n            c.moveTo(x, y + size)\n            c.lineTo(x, y)\n            c.lineWidth = 4\n            c.lineCap = \"round\"\n            c.strokeStyle = color\n            c.stroke()\n        }\n    }\n}\n\nconst Block = function(x , y , c , size, color = \"red\", prev_node = null , g = null , h = null , f = null , distance = Infinity){\n    this.x = x \n    this.y = y \n    this.prev_node  = prev_node\n    this.color = 'rgb(' + Math.floor(255 - 42.5 * x) + ', ' + Math.floor(255 - 42.5 * y) + ', 0)'\n    this.g = g \n    this.h = h \n    this.f = f\n    this.distance = distance\n  \n    this.draw = () => {\n        c.beginPath()\n        c.rect(this.x - (size / 3), this.y - (size / 3), size * 2/3, size * 2/3)\n        c.fillStyle = this.color\n        c.fill()\n    }\n}\n\nexport {Node , Block}"]},"metadata":{},"sourceType":"module"}