{"ast":null,"code":"import { Block } from '../helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list, close_list, current_node, myReq, finish_path;\n\nconst a_star = props => {\n  start_node = props.start_node;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size;\n  open_list = [start_node];\n  close_list = [];\n  current_node = null;\n  finish_path = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_a_star = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  start_node.draw();\n  end_node.draw();\n\n  for (let i = 0; i < open_list.length; i++) {\n    open_list[i].draw();\n  }\n\n  if (open_list.length > 0 && !end_node.prev_node) {\n    current_node = open_list.sort((a, b) => a.f - b.f)[0];\n    close_list.push(current_node);\n    find_child_node();\n  }\n\n  if (end_node.prev_node) {\n    start_node.draw();\n    end_node.draw();\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst find_child_node = () => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(current_node, nodes); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list.find(n => n.x === right.x && n.y === right.y);\n    let r_g = current_node.g + 10;\n\n    if (right_in_open && r_g < right_in_open.g) {\n      update_node(right_in_open, r_g, current_node);\n    } else {\n      let right_node = set_node(right, r_g, current_node);\n      open_list.push(right_node);\n    }\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list.find(n => n.x === top.x && n.y === top.y);\n    let t_g = current_node.g + 10;\n\n    if (top_in_open && t_g < top_in_open.g) {\n      update_node(top_in_open, t_g, current_node);\n    } else {\n      let top_node = set_node(top, t_g, current_node);\n      open_list.push(top_node);\n    }\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list.find(n => n.x === left.x && n.y === left.y);\n    let l_g = current_node.g + 10;\n\n    if (left_in_open && l_g < left_in_open.g) {\n      update_node(left_in_open, l_g, current_node);\n    } else {\n      let left_node = set_node(left, l_g, current_node);\n      open_list.push(left_node);\n    }\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list.find(n => n.x === bottom.x && n.y === bottom.y);\n    let b_g = current_node.g + 10;\n\n    if (bottom_in_open && b_g < bottom_in_open.g) {\n      update_node(bottom_in_open, b_g, current_node);\n    } else {\n      let bottom_node = set_node(bottom, b_g, current_node);\n      open_list.push(bottom_node);\n    }\n  }\n\n  open_list = open_list.filter(node => node.x === current_node.x && node.y === current_node.y ? false : true);\n};\n\nconst find_path = () => {\n  current_node.color = \"LimeGreen\";\n\n  if (current_node.x === start_node.x && current_node.y === start_node.y) {\n    finish_path = true;\n    return;\n  }\n\n  current_node = current_node.prev_node;\n  return;\n};\n\nconst set_node = (node, g, prev_node = null) => {\n  let color = \"MidnightBlue\";\n  let x_1 = node.x;\n  let y_1 = node.y;\n  let x_2 = end_node.x;\n  let y_2 = end_node.y;\n  let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * 10;\n  let f = h + g;\n  let new_node = new Block(x_1, y_1, c, size, color, current_node, g, h, f);\n  return new_node;\n};\n\nconst update_node = (node, g, parent) => {\n  node.g = g;\n  node.f = g + node.h;\n  node.parent = parent;\n};\n\nconst get_top_right_bottom_left = (node, array) => {\n  let {\n    x,\n    y\n  } = node;\n  let top = array.find(n => n.x === x && n.y === y - size);\n  let right = array.find(n => n.x === x + size && n.y === y);\n  let bottom = array.find(n => n.x === x && n.y === y + size);\n  let left = array.find(n => n.x === x - size && n.y === y);\n  return {\n    top,\n    right,\n    bottom,\n    left\n  };\n};\n\nexport { a_star, stop_a_star };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/a_star.js"],"names":["Block","start_node","end_node","nodes","c","canvas","size","open_list","close_list","current_node","myReq","finish_path","a_star","props","cancelAnimationFrame","run_solve_maze","stop_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","prev_node","sort","a","b","f","push","find_child_node","find_path","top","right","bottom","left","get_top_right_bottom_left","walls","find","node","x","y","right_in_open","n","r_g","g","update_node","right_node","set_node","top_in_open","t_g","top_node","left_in_open","l_g","left_node","bottom_in_open","b_g","bottom_node","filter","color","x_1","y_1","x_2","y_2","h","Math","abs","new_node","parent","array"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list , close_list , current_node , myReq , finish_path\n\nconst a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    open_list = [start_node]\n    close_list = []\n    current_node = null \n    finish_path = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    start_node.draw()\n    end_node.draw()\n\n    for(let i = 0 ; i < open_list.length ; i ++){\n        open_list[i].draw()\n    }\n\n    if(open_list.length > 0 && !end_node.prev_node){\n        current_node = open_list.sort((a,b) => a.f - b.f)[0]\n        close_list.push(current_node)\n        find_child_node()\n    }\n\n    if(end_node.prev_node){\n        start_node.draw()\n        end_node.draw()\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst find_child_node = () => {\n\n    let {top , right , bottom , left} = get_top_right_bottom_left(current_node , nodes )\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list.find(n => n.x === right.x  && n.y === right.y)\n        let r_g = current_node.g + 10\n        if(right_in_open && r_g < right_in_open.g){\n            update_node(right_in_open, r_g , current_node )\n        }else{\n            let right_node = set_node(right, r_g , current_node)\n            open_list.push(right_node)\n        }\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list.find(n => n.x === top.x  && n.y === top.y)\n        let t_g = current_node.g + 10\n        if(top_in_open && t_g < top_in_open.g){\n            update_node(top_in_open, t_g , current_node )\n        }else{\n            let top_node = set_node(top, t_g , current_node)\n            open_list.push(top_node)\n        }\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list.find(n => n.x === left.x  && n.y === left.y)\n        let l_g = current_node.g + 10\n        if(left_in_open && l_g < left_in_open.g){\n            update_node(left_in_open, l_g , current_node )\n        }else{\n            let left_node = set_node(left, l_g , current_node)\n            open_list.push(left_node)\n        }\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list.find(n => n.x === bottom.x  && n.y === bottom.y)\n        let b_g = current_node.g + 10\n        if(bottom_in_open && b_g < bottom_in_open.g){\n            update_node(bottom_in_open, b_g , current_node )\n        }else{\n            let bottom_node = set_node(bottom, b_g , current_node)\n            open_list.push(bottom_node)\n        }\n    }\n\n    open_list = open_list.filter(node => node.x === current_node.x && node.y === current_node.y ? false : true )\n}\n\nconst find_path = () => {\n    current_node.color = \"LimeGreen\"\n    if(current_node.x === start_node.x && current_node.y === start_node.y){\n        finish_path = true\n        return\n    }\n    current_node = current_node.prev_node\n    return \n}\n\nconst set_node = (node, g , prev_node = null) => {\n    let color = \"MidnightBlue\"\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = end_node.x \n    let y_2 = end_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * 10\n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , current_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nconst get_top_right_bottom_left = (node , array ) => {\n    let {x , y} = node\n    let top = array.find(n => n.x === x && n.y === y - size)\n    let right = array.find(n => n.x === x + size && n.y === y)\n    let bottom = array.find(n => n.x === x && n.y === y + size)\n    let left = array.find(n => n.x === x - size && n.y === y)\n\n    return {top , right , bottom , left }\n}\n\nexport {a_star , stop_a_star}"]},"metadata":{},"sourceType":"module"}