{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left, add_to_heap, remove_from_heap } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet open_list_1, close_list_1, current_node_1, open_list_2, close_list_2, current_node_2, myReq, finish_path, finish_search;\n\nconst bidirectional_a_star = props => {\n  start_node = props.start_node;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size; // open_list_1 = [start_node]\n\n  open_list_1 = add_to_heap(start_node, [], (a, b) => a.f < b.f);\n  close_list_1 = []; // open_list_2 = [end_node]\n\n  open_list_2 = add_to_heap(end_node, [], (a, b) => a.f < b.f);\n  close_list_2 = [];\n  current_node_1 = null;\n  current_node_2 = null;\n  finish_path = false;\n  finish_search = false;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_a_star = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  print_close_and_open_list(close_list_1, open_list_1, 'MediumBlue', 'LightSkyBlue');\n  print_close_and_open_list(close_list_2, open_list_2, 'CadetBlue', 'LightCyan');\n\n  if (open_list_1.length > 0 && !finish_search) {\n    // current_node_1= open_list_1.sort((a,b) => a.f - b.f)[0]\n    current_node_1 = open_list_1[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, end_node, open_list_1, close_list_1, close_list_2);\n  }\n\n  if (open_list_2.length > 0 && !finish_search) {\n    // current_node_2= open_list_2.sort((a,b) => a.f - b.f)[0]\n    current_node_2 = open_list_2[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, start_node, open_list_2, close_list_2, close_list_1);\n  }\n\n  if (finish_search) {\n    start_node.draw();\n    end_node.draw();\n\n    if (!current_node_1 && !current_node_2) {\n      finish_path = true;\n    }\n\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst print_close_and_open_list = (close_list, open_list, close_color, open_color) => {\n  if (!finish_search) {\n    for (let i = 0; i < open_list.length; i++) {\n      open_list[i].color = open_color;\n      open_list[i].draw();\n    }\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = close_color;\n    }\n\n    close_list[i].draw();\n  }\n};\n\nconst check_for_mix_node = (target_close_list, x, y) => {\n  let node = target_close_list.find(node => node.x === x && node.y === y);\n\n  if (node) {\n    finish_search = true;\n\n    if (close_list_1.find(node => node.x === x && node.y === y)) {\n      current_node_1 = node;\n    } else {\n      current_node_2 = node;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst find_child_node = (c_node, target_node, open_list, close_list, target_close_list) => {\n  open_list = remove_from_heap(open_list, (a, b) => a.f < b.f);\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes, size); // right (x + size , y)\n\n  open_list = add_node(c_node, right, 3, close_list, open_list, target_close_list, target_node); // top (x , y - size)\n\n  open_list = add_node(c_node, top, 2, close_list, open_list, target_close_list, target_node); // left (x - size , y )\n\n  open_list = add_node(c_node, left, 1, close_list, open_list, target_close_list, target_node); // bottom (x , y + size)\n\n  open_list = add_node(c_node, bottom, 0, close_list, open_list, target_close_list, target_node); // return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true ) \n\n  return open_list;\n};\n\nconst add_node = (c_node, neighbor_node, wall_num, close_list, open_list, target_close_list, target_node) => {\n  if (neighbor_node && !neighbor_node.walls[wall_num] && !close_list.find(node => node.x === neighbor_node.x && node.y === neighbor_node.y)) {\n    let {\n      x,\n      y\n    } = neighbor_node;\n    let node_in_open = open_list.find(n => n.x === x && n.y === y);\n    let n_g = c_node.g + size;\n\n    if (!check_for_mix_node(target_close_list, x, y)) {\n      if (node_in_open && n_g < node_in_open.g) {\n        update_node(node_in_open, n_g, c_node);\n      } else {\n        let new_node = set_node(neighbor_node, n_g, c_node, target_node);\n        open_list = add_to_heap(new_node, open_list, (a, b) => a.f < b.f);\n      }\n    }\n  }\n\n  return open_list;\n};\n\nconst find_path = () => {\n  let color = \"SpringGreen\";\n\n  if (current_node_1) {\n    current_node_1.color = color;\n    current_node_1 = current_node_1.prev_node;\n  }\n\n  if (current_node_2) {\n    current_node_2.color = color;\n    current_node_2 = current_node_2.prev_node;\n  }\n};\n\nconst set_node = (node, g, c_node, target_node) => {\n  let color = \"MediumBlue\";\n  let x_1 = node.x;\n  let y_1 = node.y;\n  let x_2 = target_node.x;\n  let y_2 = target_node.y;\n  let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size;\n  let f = h + g;\n  let new_node = new Block(x_1, y_1, c, size, color, c_node, g, h, f);\n  return new_node;\n};\n\nconst update_node = (node, g, parent) => {\n  node.g = g;\n  node.f = g + node.h;\n  node.parent = parent;\n};\n\nexport { bidirectional_a_star, stop_bidirectional_a_star };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_a_star.js"],"names":["Block","get_top_right_bottom_left","add_to_heap","remove_from_heap","start_node","end_node","nodes","c","canvas","size","open_list_1","close_list_1","current_node_1","open_list_2","close_list_2","current_node_2","myReq","finish_path","finish_search","bidirectional_a_star","props","a","b","f","cancelAnimationFrame","run_solve_maze","stop_bidirectional_a_star","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","target_close_list","x","y","node","find","c_node","target_node","top","right","bottom","left","add_node","neighbor_node","wall_num","walls","node_in_open","n","n_g","g","update_node","new_node","set_node","prev_node","x_1","y_1","x_2","y_2","h","Math","abs","parent"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left , add_to_heap , remove_from_heap} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet open_list_1 , close_list_1 , current_node_1 , open_list_2 , close_list_2 , current_node_2 , myReq , finish_path , finish_search \n\nconst bidirectional_a_star = props => {\n    start_node = props.start_node\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    // open_list_1 = [start_node]\n    open_list_1 = add_to_heap(start_node , [] , (a,b) => a.f < b.f)\n    close_list_1 = []\n\n    // open_list_2 = [end_node]\n    open_list_2 = add_to_heap(end_node , [] , (a,b) => a.f < b.f)\n    close_list_2 = []\n\n    current_node_1 = null \n    current_node_2 = null \n\n    finish_path = false \n    finish_search = false \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_a_star = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MediumBlue' , 'LightSkyBlue' )\n    print_close_and_open_list(close_list_2 , open_list_2 , 'CadetBlue' , 'LightCyan')\n\n    if(open_list_1.length > 0 && !finish_search){\n        // current_node_1= open_list_1.sort((a,b) => a.f - b.f)[0]\n        current_node_1= open_list_1[0]\n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , end_node, open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(open_list_2.length > 0 && !finish_search){\n        // current_node_2= open_list_2.sort((a,b) => a.f - b.f)[0]\n        current_node_2= open_list_2[0]\n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , start_node, open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (target_close_list , x , y) => {\n    let node = target_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , target_node , open_list , close_list , target_close_list) => {\n    open_list = remove_from_heap(open_list , (a,b) => a.f < b.f)\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // right (x + size , y)\n    open_list = add_node(c_node , right , 3 , close_list , open_list , target_close_list , target_node)\n\n    // top (x , y - size)\n    open_list = add_node(c_node , top , 2 , close_list , open_list , target_close_list , target_node)\n\n    // left (x - size , y )\n    open_list = add_node(c_node , left , 1 , close_list , open_list , target_close_list , target_node)\n\n    // bottom (x , y + size)\n    open_list = add_node(c_node , bottom , 0 , close_list , open_list , target_close_list , target_node)\n\n    // return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true ) \n    return open_list\n}\n\nconst add_node = (c_node , neighbor_node , wall_num , close_list , open_list , target_close_list , target_node) => {\n    if(\n        neighbor_node \n        && !neighbor_node.walls[wall_num] \n        && !close_list.find(node => node.x === neighbor_node.x  && node.y === neighbor_node.y)\n    ){\n        let {x , y} = neighbor_node \n        let node_in_open = open_list.find(n => n.x === x  && n.y === y)\n        let n_g = c_node.g + size\n\n        if(!check_for_mix_node(target_close_list , x , y)){\n            if(node_in_open && n_g < node_in_open.g){ \n                update_node(node_in_open, n_g , c_node )\n            }else{\n                let new_node = set_node(neighbor_node , n_g , c_node , target_node)\n                open_list = add_to_heap(new_node , open_list , (a,b) => a.f < b.f)\n            }\n        }\n    }\n    return open_list\n}\n\nconst find_path = () => {\n    let color = \"SpringGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst set_node = (node, g , c_node , target_node) => {\n    let color = \"MediumBlue\"\n    let x_1 = node.x \n    let y_1 = node.y \n    let x_2 = target_node.x \n    let y_2 = target_node.y    \n    let h = (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size \n    let f = h + g \n    let new_node = new Block(x_1 , y_1 , c , size , color , c_node , g , h , f)\n    return new_node \n}\n\nconst update_node = (node , g , parent) => {\n    node.g = g \n    node.f = g + node.h \n    node.parent = parent \n}\n\nexport {bidirectional_a_star , stop_bidirectional_a_star}"]},"metadata":{},"sourceType":"module"}