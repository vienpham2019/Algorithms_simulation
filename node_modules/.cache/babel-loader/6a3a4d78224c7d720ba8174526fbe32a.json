{"ast":null,"code":"import { Block } from '../helper_method';\nimport { get_top_right_bottom_left } from './helper_method/algorithms_helper_method';\nlet start_node, end_node, nodes, c, canvas, size;\nlet close_list_1, close_list_2, open_list_1, current_node_1, open_list_2, current_node_2, myReq, finish_path, finish_search, current_node;\n\nconst bidirectional_dijkstra = props => {\n  start_node = props.start_node;\n  start_node.distance = 0;\n  end_node = props.end_node;\n  nodes = props.nodes;\n  c = props.c;\n  canvas = props.canvas;\n  size = props.size; // end_node.prev_node = null\n\n  open_list_1 = [start_node];\n  close_list_1 = [];\n  open_list_2 = [end_node];\n  close_list_2 = [];\n  current_node_1 = start_node;\n  current_node_2 = end_node;\n  finish_path = false;\n  finish_search = false;\n  current_node = null;\n  cancelAnimationFrame(myReq);\n  run_solve_maze();\n};\n\nconst stop_bidirectional_dijkstra = () => {\n  cancelAnimationFrame(myReq);\n};\n\nconst run_solve_maze = () => {\n  myReq = requestAnimationFrame(run_solve_maze);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].draw();\n  }\n\n  print_close_and_open_list(close_list_1, open_list_1, 'MidnightBlue', 'DeepSkyBlue');\n  print_close_and_open_list(close_list_2, open_list_2, 'DarkCyan', 'Cyan');\n\n  if (open_list_2.length > 0 && !finish_search) {\n    current_node_2 = open_list_2.sort((a, b) => a.distance - b.distance)[0];\n    close_list_2.push(current_node_2);\n    open_list_2 = find_child_node(current_node_2, open_list_2, close_list_2, close_list_1);\n  }\n\n  if (open_list_1.length > 0 && !finish_search) {\n    current_node_1 = open_list_1.sort((a, b) => a.distance - b.distance)[0];\n    close_list_1.push(current_node_1);\n    open_list_1 = find_child_node(current_node_1, open_list_1, close_list_1, close_list_2);\n  }\n\n  if (finish_search) {\n    start_node.draw();\n    end_node.draw();\n\n    if (!current_node_1 && !current_node_2) {\n      finish_path = true;\n    }\n\n    find_path();\n  }\n\n  if (finish_path) {\n    cancelAnimationFrame(myReq);\n  }\n};\n\nconst print_close_and_open_list = (close_list, open_list, close_color, open_color) => {\n  if (!finish_search) {\n    for (let i = 0; i < open_list.length; i++) {\n      open_list[i].color = open_color;\n      open_list[i].draw();\n    }\n  }\n\n  for (let i = 0; i < close_list.length; i++) {\n    if (!finish_search) {\n      close_list[i].color = close_color;\n    }\n\n    close_list[i].draw();\n  }\n};\n\nconst check_for_mix_node = (next_close_list, x, y) => {\n  let node = next_close_list.find(node => node.x === x && node.y === y);\n\n  if (node) {\n    finish_search = true;\n\n    if (close_list_1.find(node => node.x === x && node.y === y)) {\n      current_node_1 = node;\n    } else {\n      current_node_2 = node;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nconst find_child_node = (c_node, open_list, close_list, next_close_list) => {\n  let {\n    top,\n    right,\n    bottom,\n    left\n  } = get_top_right_bottom_left(c_node, nodes, size); // Right (x + size , y)\n\n  if (right && !right.walls[3] && !close_list.find(node => node.x === right.x && node.y === right.y)) {\n    let right_in_open = open_list.find(n => n.x === right.x && n.y === right.y);\n\n    if (!check_for_mix_node(next_close_list, right.x, right.y)) {\n      right_in_open ? update_node(right_in_open, c_node) : open_list.push(create_new_node(right, c_node));\n    }\n  } // top (x , y - size)\n\n\n  if (top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)) {\n    let top_in_open = open_list.find(n => n.x === top.x && n.y === top.y);\n\n    if (!check_for_mix_node(next_close_list, top.x, top.y)) {\n      top_in_open ? update_node(top_in_open, c_node) : open_list.push(create_new_node(top, c_node));\n    }\n  } // left (x - size , y )\n\n\n  if (left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)) {\n    let left_in_open = open_list.find(n => n.x === left.x && n.y === left.y);\n\n    if (!check_for_mix_node(next_close_list, left.x, left.y)) {\n      left_in_open ? update_node(left_in_open, c_node) : open_list.push(create_new_node(left, c_node));\n    }\n  } // bottom (x , y + size)\n\n\n  if (bottom && !bottom.walls[0] && !close_list.find(node => node.x === bottom.x && node.y === bottom.y)) {\n    let bottom_in_open = open_list.find(n => n.x === bottom.x && n.y === bottom.y);\n\n    if (!check_for_mix_node(next_close_list, bottom.x, bottom.y)) {\n      bottom_in_open ? update_node(bottom_in_open, c_node) : open_list.push(create_new_node(bottom, c_node));\n    }\n  }\n\n  return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true);\n};\n\nconst find_path = () => {\n  let color = \"LimeGreen\";\n\n  if (current_node_1) {\n    current_node_1.color = color;\n    current_node_1 = current_node_1.prev_node;\n  }\n\n  if (current_node_2) {\n    current_node_2.color = color;\n    current_node_2 = current_node_2.prev_node;\n  }\n};\n\nconst create_new_node = (node, c_node) => {\n  let distance = find_distance(node, c_node);\n  return new Block(node.x, node.y, c, size, 'MidnightBlue', c_node, null, null, null, distance);\n};\n\nconst find_distance = (node, c_node) => {\n  // find distance from current node to next node \n  let x_1 = c_node.x;\n  let y_1 = c_node.y;\n  let x_2 = node.x;\n  let y_2 = node.y;\n  return (Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size + c_node.distance;\n};\n\nconst update_node = (node, c_node) => {\n  if (c_node.distance + size < node.distance) {\n    node.distance = find_distance(node, c_node);\n  }\n\n  return node;\n};\n\nexport { bidirectional_dijkstra, stop_bidirectional_dijkstra };","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/algorithms/src/Algorithms/solve_maze/bidirectional_dijkstra.js"],"names":["Block","get_top_right_bottom_left","start_node","end_node","nodes","c","canvas","size","close_list_1","close_list_2","open_list_1","current_node_1","open_list_2","current_node_2","myReq","finish_path","finish_search","current_node","bidirectional_dijkstra","props","distance","cancelAnimationFrame","run_solve_maze","stop_bidirectional_dijkstra","requestAnimationFrame","clearRect","width","height","i","length","draw","print_close_and_open_list","sort","a","b","push","find_child_node","find_path","close_list","open_list","close_color","open_color","color","check_for_mix_node","next_close_list","x","y","node","find","c_node","top","right","bottom","left","walls","right_in_open","n","update_node","create_new_node","top_in_open","left_in_open","bottom_in_open","filter","prev_node","find_distance","x_1","y_1","x_2","y_2","Math","abs"],"mappings":"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","sourcesContent":["import { Block } from '../helper_method'\nimport {get_top_right_bottom_left} from './helper_method/algorithms_helper_method'\n\nlet start_node , end_node , nodes , c , canvas , size \n\nlet close_list_1 , close_list_2 , open_list_1 , current_node_1 , open_list_2, current_node_2 , myReq , finish_path , finish_search , current_node \n\nconst bidirectional_dijkstra = props => {\n    start_node = props.start_node\n    start_node.distance = 0\n    end_node = props.end_node \n    nodes = props.nodes\n    c = props.c \n    canvas = props.canvas \n    size = props.size \n\n    // end_node.prev_node = null\n    \n    open_list_1 = [start_node]\n    close_list_1 = []\n\n    open_list_2 = [end_node]\n    close_list_2 = []\n\n    current_node_1 = start_node\n    current_node_2 = end_node \n    finish_path = false \n    finish_search = false \n    current_node = null \n\n    cancelAnimationFrame(myReq)\n    run_solve_maze()\n}\n\nconst stop_bidirectional_dijkstra = () => {\n    cancelAnimationFrame(myReq)\n}\n\nconst run_solve_maze = () => {\n    myReq = requestAnimationFrame(run_solve_maze)\n    c.clearRect(0,0,canvas.width, canvas.height)\n\n    for(let i = 0 ; i < nodes.length ; i ++){\n        nodes[i].draw()\n    }\n\n    print_close_and_open_list(close_list_1 , open_list_1 , 'MidnightBlue' , 'DeepSkyBlue')\n    print_close_and_open_list(close_list_2 , open_list_2 , 'DarkCyan' , 'Cyan')\n\n    if(open_list_2.length > 0 && !finish_search){\n        current_node_2 = open_list_2.sort((a,b) => a.distance - b.distance)[0] \n        close_list_2.push(current_node_2)\n        open_list_2 = find_child_node(current_node_2 , open_list_2 , close_list_2 , close_list_1)\n    }\n\n    if(open_list_1.length > 0 && !finish_search){\n        current_node_1 = open_list_1.sort((a,b) => a.distance - b.distance)[0] \n        close_list_1.push(current_node_1)\n        open_list_1 = find_child_node(current_node_1 , open_list_1 , close_list_1 , close_list_2)\n    }\n\n    if(finish_search){\n        start_node.draw()\n        end_node.draw()\n\n        if(!current_node_1 && !current_node_2){\n            finish_path = true\n        }\n\n        find_path() \n    }\n\n    if(finish_path){\n        cancelAnimationFrame(myReq)\n    }\n}\n\nconst print_close_and_open_list = (close_list , open_list , close_color , open_color ) => {\n    if(!finish_search){\n        for(let i = 0 ; i < open_list.length ; i ++){\n            open_list[i].color = open_color\n            open_list[i].draw()\n        }\n    }\n\n    for(let i = 0 ; i < close_list.length ; i ++){\n        if(!finish_search){\n            close_list[i].color = close_color \n        }\n        close_list[i].draw()\n    }\n}\n\nconst check_for_mix_node = (next_close_list , x , y) => {\n    let node = next_close_list.find(node => node.x === x && node.y === y)\n    if(node){\n        finish_search = true \n        if(close_list_1.find(node => node.x === x  && node.y === y)){\n            current_node_1 = node\n        }else{\n            current_node_2 = node\n        }\n        return true \n    }\n    return false \n}\n\nconst find_child_node = (c_node , open_list , close_list , next_close_list) => {\n    let {top , right , bottom , left} = get_top_right_bottom_left(c_node , nodes , size)\n\n    // Right (x + size , y)\n    if(right && !right.walls[3] && !close_list.find(node => node.x === right.x  && node.y === right.y)){\n        let right_in_open = open_list.find(n => n.x === right.x  && n.y === right.y)\n\n        if(!check_for_mix_node(next_close_list , right.x , right.y)){\n            right_in_open \n                ? update_node(right_in_open , c_node) \n                :  open_list.push(create_new_node(right , c_node))\n        }\n    }\n\n    // top (x , y - size)\n    if(top && !top.walls[2] && !close_list.find(node => node.x === top.x && node.y === top.y)){\n        let top_in_open = open_list.find(n => n.x === top.x  && n.y === top.y)\n        \n        if(!check_for_mix_node(next_close_list , top.x , top.y)){\n            top_in_open \n                ? update_node(top_in_open , c_node) \n                : open_list.push(create_new_node(top , c_node))\n        }\n    }\n\n    // left (x - size , y )\n    if(left && !left.walls[1] && !close_list.find(node => node.x === left.x && node.y === left.y)){\n        let left_in_open = open_list.find(n => n.x === left.x  && n.y === left.y)\n        \n        if(!check_for_mix_node(next_close_list , left.x , left.y)){\n            left_in_open \n                ? update_node(left_in_open , c_node) \n                : open_list.push(create_new_node(left , c_node))\n        }\n    }\n\n    // bottom (x , y + size)\n    if(bottom && !bottom.walls[0] &&!close_list.find(node => node.x === bottom.x && node.y === bottom.y)){\n        let bottom_in_open = open_list.find(n => n.x === bottom.x  && n.y === bottom.y)\n        \n        if(!check_for_mix_node(next_close_list , bottom.x , bottom.y)){\n            bottom_in_open \n                ? update_node(bottom_in_open , c_node) \n                :  open_list.push(create_new_node(bottom , c_node))\n        }\n    }\n\n    return open_list.filter(node => node.x === c_node.x && node.y === c_node.y ? false : true )\n}\n\nconst find_path = () => {\n    let color = \"LimeGreen\"\n    if(current_node_1){\n        current_node_1.color = color\n        current_node_1 = current_node_1.prev_node\n    }\n    if(current_node_2){\n        current_node_2.color = color\n        current_node_2 = current_node_2.prev_node \n    }\n}\n\nconst create_new_node = (node , c_node) => {\n    let distance = find_distance(node , c_node)\n    return new Block(node.x , node.y , c , size , 'MidnightBlue' , c_node , null , null , null , distance)\n}\n\nconst find_distance = (node , c_node) => {\n    // find distance from current node to next node \n    let x_1 = c_node.x \n    let y_1 = c_node.y\n\n    let x_2 = node.x \n    let y_2 = node.y\n\n   return ((Math.abs(x_1 - x_2) + Math.abs(y_1 - y_2)) * size ) + c_node.distance\n}\n\nconst update_node = (node , c_node) => {\n    if(c_node.distance + size < node.distance){\n        node.distance = find_distance(node , c_node)\n    }\n    return node\n}\n\nexport {bidirectional_dijkstra , stop_bidirectional_dijkstra}"]},"metadata":{},"sourceType":"module"}