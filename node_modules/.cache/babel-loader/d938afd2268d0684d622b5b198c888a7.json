{"ast":null,"code":"import{Node,Block}from'./helper_method';import{breadth_first_search,stop_breadth_first_search}from'./solve_maze/breadth_first_search';import{depth_first_search,stop_depth_first_search}from'./solve_maze/depth_first_search';import{a_star,stop_a_star}from'./solve_maze/a_star';import{greedy_best_first_search,stop_greedy_best_first_search}from'./solve_maze/greedy_best_first_search';import{dijkstra,stop_dijkstra}from'./solve_maze/dijkstra';import{bidirectional_dijkstra,stop_bidirectional_dijkstra}from'./solve_maze/bidirectional_dijkstra';import{bidirectional_a_star,stop_bidirectional_a_star}from'./solve_maze/bidirectional_a_star';import{recursive_dividion_maze}from'./draw_maze/recursive_division_maze_generation';import{prims_maze,stop_prims_draw_maze}from'./draw_maze/prims_maze_generation';import{depth_first_search_maze,stop_depth_first_search_draw_maze}from'./draw_maze/depth_first_search_maze_generation';var size,width,height,cols,rows,select_draw_algorithims,speed;var delay,canvas,c,start_node,end_node,nodes,stack,frame_per_second,maze_speed,myTimeOut,start_location,end_location;var setUp=function setUp(props){stop_breadth_first_search();stop_depth_first_search();stop_a_star();stop_dijkstra();stop_bidirectional_dijkstra();stop_greedy_best_first_search();stop_bidirectional_a_star();stop_depth_first_search_draw_maze();stop_prims_draw_maze();c=props.c;canvas=props.canvas;stack=[];cols=props.cols;rows=props.rows;size=props.size;width=props.width;height=props.height;select_draw_algorithims=props.select_draw_algorithims;size=Math.floor(width/cols);start_location={x:size/2,y:size/2};end_location={x:(cols-1)*size+size/2,y:(rows-1)*size+size/2};delay=0;speed=props.speed;maze_speed=700;frame_per_second=1000;canvas.width=width;canvas.height=height;nodes=[];draw_divide_maze(props);clearTimeout(myTimeOut);return nodes;};var draw_divide_maze=function draw_divide_maze(props){for(var i=0;i<rows;i++){for(var j=0;j<cols;j++){var walls=select_draw_algorithims===\"Recursive Division\"?[false,false,false,false]:[true,true,true,true];var x=j*size+size/2;var y=i*size+size/2;var node=new Node(x,y,c,size,walls);if(i===0){node.walls[0]=true;}else if(i===rows-1){node.walls[2]=true;}if(j===0){node.walls[3]=true;}else if(j===cols-1){node.walls[1]=true;}if(i===0&&j===0){node.walls[0]=false;}if(j===cols-1&&i===rows-1){node.walls[1]=false;}if(i===0&&j===0){stack.push(node);}nodes.push(node);}}start_node=new Block(start_location.x,start_location.y,c,size,\"blue\");end_node=new Block(end_location.x,end_location.y,c,size,\"green\");switch(select_draw_algorithims){case\"Depth first search\":depth_first_search_maze({nodes:nodes,canvas:canvas,c:c,stack:stack,size:size,cols:cols,rows:rows,frame_per_second:frame_per_second,speed:speed});break;case\"Prim's\":prims_maze({size:size,nodes:nodes,cols:cols,rows:rows,canvas:canvas,c:c,frame_per_second:frame_per_second,speed:speed});break;case\"Recursive Division\":var draw_delay=recursive_dividion_maze({delay:delay,speed:speed,size:size,cols:cols,rows:rows,nodes:nodes});if(draw_delay){setTimeout(function(){props.check_recursive_delay(true);},draw_delay*speed);}break;default:break;}};var run_solve_maze=function run_solve_maze(algorithms){stop_greedy_best_first_search();stop_a_star();stop_dijkstra();stop_breadth_first_search();stop_depth_first_search();stop_bidirectional_dijkstra();stop_bidirectional_a_star();switch(algorithms){case\"A star\":a_star({start_node:start_node,end_node:end_node,nodes:nodes,c:c,canvas:canvas,size:size});break;case\"Depth first search\":depth_first_search({nodes:nodes,start_node:start_node,end_node:end_node,c:c,canvas:canvas,size:size});break;case\"Breadth first search\":breadth_first_search({c:c,canvas:canvas,size:size,nodes:nodes,start_node:start_node,end_node:end_node});break;case\"Dijkstra's\":dijkstra({start_node:start_node,end_node:end_node,nodes:nodes,c:c,canvas:canvas,size:size});break;case\"Greedy best first search\":greedy_best_first_search({start_node:start_node,end_node:end_node,nodes:nodes,c:c,canvas:canvas,size:size});break;case\"Bidirectional a star\":bidirectional_a_star({start_node:start_node,end_node:end_node,nodes:nodes,c:c,canvas:canvas,size:size});break;case\"Bidirectional dijkstra's\":bidirectional_dijkstra({start_node:start_node,end_node:end_node,nodes:nodes,c:c,canvas:canvas,size:size});break;}};var update_info=function update_info(props){if(props.start_location){start_location=props.start_location;start_node=new Block(start_location.x,start_location.y,c,size,\"blue\");}if(props.end_location){end_location=props.end_location;end_node=new Block(end_location.x,end_location.y,c,size,\"green\");}};export{setUp,run_solve_maze,update_info};","map":{"version":3,"sources":["/Users/vienpham/Desktop/Algorithms_simulation/client/src/Algorithms/mazeController.js"],"names":["Node","Block","breadth_first_search","stop_breadth_first_search","depth_first_search","stop_depth_first_search","a_star","stop_a_star","greedy_best_first_search","stop_greedy_best_first_search","dijkstra","stop_dijkstra","bidirectional_dijkstra","stop_bidirectional_dijkstra","bidirectional_a_star","stop_bidirectional_a_star","recursive_dividion_maze","prims_maze","stop_prims_draw_maze","depth_first_search_maze","stop_depth_first_search_draw_maze","size","width","height","cols","rows","select_draw_algorithims","speed","delay","canvas","c","start_node","end_node","nodes","stack","frame_per_second","maze_speed","myTimeOut","start_location","end_location","setUp","props","Math","floor","x","y","draw_divide_maze","clearTimeout","i","j","walls","node","push","draw_delay","setTimeout","check_recursive_delay","run_solve_maze","algorithms","update_info"],"mappings":"AAAA,OAASA,IAAT,CAAgBC,KAAhB,KAA6B,iBAA7B,CACA,OAASC,oBAAT,CAAgCC,yBAAhC,KAAgE,mCAAhE,CACA,OAASC,kBAAT,CAA8BC,uBAA9B,KAA4D,iCAA5D,CACA,OAASC,MAAT,CAAkBC,WAAlB,KAAoC,qBAApC,CACA,OAASC,wBAAT,CAAoCC,6BAApC,KAAwE,uCAAxE,CACA,OAASC,QAAT,CAAoBC,aAApB,KAAwC,uBAAxC,CACA,OAASC,sBAAT,CAAkCC,2BAAlC,KAAoE,qCAApE,CACA,OAASC,oBAAT,CAAgCC,yBAAhC,KAAgE,mCAAhE,CAEA,OAASC,uBAAT,KAAwC,gDAAxC,CACA,OAASC,UAAT,CAAsBC,oBAAtB,KAAiD,mCAAjD,CACA,OAASC,uBAAT,CAAmCC,iCAAnC,KAA4E,gDAA5E,CAEA,GAAIC,CAAAA,IAAJ,CAAWC,KAAX,CAAmBC,MAAnB,CAA4BC,IAA5B,CAAmCC,IAAnC,CAA0CC,uBAA1C,CAAoEC,KAApE,CAEA,GAAIC,CAAAA,KAAJ,CAAWC,MAAX,CAAoBC,CAApB,CAAwBC,UAAxB,CAAoCC,QAApC,CAA+CC,KAA/C,CAAuDC,KAAvD,CAA+DC,gBAA/D,CAAkFC,UAAlF,CAA+FC,SAA/F,CAA2GC,cAA3G,CAA4HC,YAA5H,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,CACvBtC,yBAAyB,GACzBE,uBAAuB,GACvBE,WAAW,GACXI,aAAa,GACbE,2BAA2B,GAC3BJ,6BAA6B,GAC7BM,yBAAyB,GAEzBK,iCAAiC,GACjCF,oBAAoB,GAEpBY,CAAC,CAAGW,KAAK,CAACX,CAAV,CACAD,MAAM,CAAGY,KAAK,CAACZ,MAAf,CACAK,KAAK,CAAG,EAAR,CAEAV,IAAI,CAAGiB,KAAK,CAACjB,IAAb,CACAC,IAAI,CAAGgB,KAAK,CAAChB,IAAb,CACAJ,IAAI,CAAGoB,KAAK,CAACpB,IAAb,CACAC,KAAK,CAAGmB,KAAK,CAACnB,KAAd,CACAC,MAAM,CAAGkB,KAAK,CAAClB,MAAf,CACAG,uBAAuB,CAAGe,KAAK,CAACf,uBAAhC,CAEAL,IAAI,CAAGqB,IAAI,CAACC,KAAL,CAAWrB,KAAK,CAAGE,IAAnB,CAAP,CAEAc,cAAc,CAAG,CAACM,CAAC,CAAEvB,IAAI,CAAG,CAAX,CAAewB,CAAC,CAAExB,IAAI,CAAG,CAAzB,CAAjB,CACAkB,YAAY,CAAG,CAACK,CAAC,CAAE,CAACpB,IAAI,CAAG,CAAR,EAAaH,IAAb,CAAqBA,IAAI,CAAG,CAAhC,CAAqCwB,CAAC,CAAE,CAACpB,IAAI,CAAG,CAAR,EAAaJ,IAAb,CAAqBA,IAAI,CAAG,CAApE,CAAf,CAEAO,KAAK,CAAG,CAAR,CACAD,KAAK,CAAGc,KAAK,CAACd,KAAd,CACAS,UAAU,CAAG,GAAb,CAEAD,gBAAgB,CAAG,IAAnB,CAEAN,MAAM,CAACP,KAAP,CAAeA,KAAf,CACAO,MAAM,CAACN,MAAP,CAAgBA,MAAhB,CAEAU,KAAK,CAAG,EAAR,CACAa,gBAAgB,CAACL,KAAD,CAAhB,CACAM,YAAY,CAACV,SAAD,CAAZ,CACA,MAAOJ,CAAAA,KAAP,CACD,CAzCD,CA2CA,GAAMa,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACL,KAAD,CAAW,CAClC,IAAI,GAAIO,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGvB,IAAnB,CAA0BuB,CAAC,EAA3B,CAA+B,CAC7B,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAGzB,IAAnB,CAA0ByB,CAAC,EAA3B,CAA+B,CAC7B,GAAIC,CAAAA,KAAK,CAAGxB,uBAAuB,GAAK,oBAA5B,CACR,CAAC,KAAD,CAAS,KAAT,CAAiB,KAAjB,CAAwB,KAAxB,CADQ,CAER,CAAC,IAAD,CAAQ,IAAR,CAAe,IAAf,CAAsB,IAAtB,CAFJ,CAIA,GAAIkB,CAAAA,CAAC,CAAGK,CAAC,CAAG5B,IAAJ,CAAYA,IAAI,CAAG,CAA3B,CACA,GAAIwB,CAAAA,CAAC,CAAGG,CAAC,CAAG3B,IAAJ,CAAYA,IAAI,CAAG,CAA3B,CACA,GAAI8B,CAAAA,IAAI,CAAG,GAAInD,CAAAA,IAAJ,CAAS4C,CAAT,CAAYC,CAAZ,CAAgBf,CAAhB,CAAoBT,IAApB,CAA2B6B,KAA3B,CAAX,CACA,GAAGF,CAAC,GAAK,CAAT,CAAW,CACTG,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,IAAhB,CACD,CAFD,IAEM,IAAGF,CAAC,GAAKvB,IAAI,CAAG,CAAhB,CAAkB,CACtB0B,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,IAAhB,CACD,CAED,GAAGD,CAAC,GAAK,CAAT,CAAW,CACTE,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,IAAhB,CACD,CAFD,IAEM,IAAGD,CAAC,GAAKzB,IAAI,CAAG,CAAhB,CAAkB,CACtB2B,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,IAAhB,CACD,CAED,GAAGF,CAAC,GAAK,CAAN,EAAWC,CAAC,GAAK,CAApB,CAAuB,CACnBE,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,KAAhB,CACH,CACD,GAAGD,CAAC,GAAKzB,IAAI,CAAG,CAAb,EAAkBwB,CAAC,GAAKvB,IAAI,CAAG,CAAlC,CAAoC,CAClC0B,IAAI,CAACD,KAAL,CAAW,CAAX,EAAgB,KAAhB,CACD,CAED,GAAGF,CAAC,GAAK,CAAN,EAAWC,CAAC,GAAK,CAApB,CAAsB,CAClBf,KAAK,CAACkB,IAAN,CAAWD,IAAX,EACH,CACDlB,KAAK,CAACmB,IAAN,CAAWD,IAAX,EACD,CACF,CAEDpB,UAAU,CAAG,GAAI9B,CAAAA,KAAJ,CAAUqC,cAAc,CAACM,CAAzB,CAA6BN,cAAc,CAACO,CAA5C,CAAgDf,CAAhD,CAAoDT,IAApD,CAA2D,MAA3D,CAAb,CACAW,QAAQ,CAAG,GAAI/B,CAAAA,KAAJ,CAAUsC,YAAY,CAACK,CAAvB,CAA2BL,YAAY,CAACM,CAAxC,CAA4Cf,CAA5C,CAAgDT,IAAhD,CAAuD,OAAvD,CAAX,CAEA,OAAQK,uBAAR,EACE,IAAK,oBAAL,CACEP,uBAAuB,CAAC,CAACc,KAAK,CAALA,KAAD,CAASJ,MAAM,CAANA,MAAT,CAAkBC,CAAC,CAADA,CAAlB,CAAsBI,KAAK,CAALA,KAAtB,CAA8Bb,IAAI,CAAJA,IAA9B,CAAqCG,IAAI,CAAJA,IAArC,CAA4CC,IAAI,CAAJA,IAA5C,CAAmDU,gBAAgB,CAAhBA,gBAAnD,CAAsER,KAAK,CAALA,KAAtE,CAAD,CAAvB,CACA,MACF,IAAK,QAAL,CACEV,UAAU,CAAC,CAACI,IAAI,CAAJA,IAAD,CAAQY,KAAK,CAALA,KAAR,CAAgBT,IAAI,CAAJA,IAAhB,CAAuBC,IAAI,CAAJA,IAAvB,CAA8BI,MAAM,CAANA,MAA9B,CAAuCC,CAAC,CAADA,CAAvC,CAA2CK,gBAAgB,CAAhBA,gBAA3C,CAA8DR,KAAK,CAALA,KAA9D,CAAD,CAAV,CACA,MACF,IAAK,oBAAL,CACE,GAAI0B,CAAAA,UAAU,CAAGrC,uBAAuB,CAAC,CAACY,KAAK,CAALA,KAAD,CAASD,KAAK,CAALA,KAAT,CAAiBN,IAAI,CAAJA,IAAjB,CAAwBG,IAAI,CAAJA,IAAxB,CAA+BC,IAAI,CAAJA,IAA/B,CAAsCQ,KAAK,CAALA,KAAtC,CAAD,CAAxC,CACA,GAAGoB,UAAH,CAAc,CACZC,UAAU,CAAC,UAAM,CACbb,KAAK,CAACc,qBAAN,CAA4B,IAA5B,EACD,CAFO,CAELF,UAAU,CAAG1B,KAFR,CAAV,CAGC,CACH,MACF,QACE,MAhBJ,CAkBD,CAzDD,CA2DA,GAAM6B,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,UAAD,CAAgB,CACrChD,6BAA6B,GAC7BF,WAAW,GACXI,aAAa,GACbR,yBAAyB,GACzBE,uBAAuB,GACvBQ,2BAA2B,GAC3BE,yBAAyB,GAEzB,OAAQ0C,UAAR,EACE,IAAK,QAAL,CACEnD,MAAM,CAAC,CAACyB,UAAU,CAAVA,UAAD,CAAcC,QAAQ,CAARA,QAAd,CAAyBC,KAAK,CAALA,KAAzB,CAAiCH,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAAN,CACA,MACF,IAAK,oBAAL,CACEjB,kBAAkB,CAAC,CAAC6B,KAAK,CAALA,KAAD,CAASF,UAAU,CAAVA,UAAT,CAAsBC,QAAQ,CAARA,QAAtB,CAAiCF,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAAlB,CACA,MACF,IAAK,sBAAL,CACEnB,oBAAoB,CAAC,CAAC4B,CAAC,CAADA,CAAD,CAAKD,MAAM,CAANA,MAAL,CAAcR,IAAI,CAAJA,IAAd,CAAqBY,KAAK,CAALA,KAArB,CAA6BF,UAAU,CAAVA,UAA7B,CAA0CC,QAAQ,CAARA,QAA1C,CAAD,CAApB,CACA,MACF,IAAK,YAAL,CACEtB,QAAQ,CAAC,CAACqB,UAAU,CAAVA,UAAD,CAAcC,QAAQ,CAARA,QAAd,CAAyBC,KAAK,CAALA,KAAzB,CAAiCH,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAAR,CACA,MACF,IAAK,0BAAL,CACEb,wBAAwB,CAAC,CAACuB,UAAU,CAAVA,UAAD,CAAcC,QAAQ,CAARA,QAAd,CAAyBC,KAAK,CAALA,KAAzB,CAAiCH,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAAxB,CACA,MACF,IAAK,sBAAL,CACEP,oBAAoB,CAAC,CAACiB,UAAU,CAAVA,UAAD,CAAcC,QAAQ,CAARA,QAAd,CAAyBC,KAAK,CAALA,KAAzB,CAAiCH,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAApB,CACA,MACF,IAAK,0BAAL,CACET,sBAAsB,CAAC,CAACmB,UAAU,CAAVA,UAAD,CAAcC,QAAQ,CAARA,QAAd,CAAyBC,KAAK,CAALA,KAAzB,CAAiCH,CAAC,CAADA,CAAjC,CAAqCD,MAAM,CAANA,MAArC,CAA8CR,IAAI,CAAJA,IAA9C,CAAD,CAAtB,CACA,MArBJ,CAuBD,CAhCD,CAkCA,GAAMqC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAjB,KAAK,CAAI,CAC3B,GAAGA,KAAK,CAACH,cAAT,CAAwB,CACtBA,cAAc,CAAGG,KAAK,CAACH,cAAvB,CACAP,UAAU,CAAG,GAAI9B,CAAAA,KAAJ,CAAUqC,cAAc,CAACM,CAAzB,CAA6BN,cAAc,CAACO,CAA5C,CAAgDf,CAAhD,CAAoDT,IAApD,CAA2D,MAA3D,CAAb,CACD,CAED,GAAGoB,KAAK,CAACF,YAAT,CAAsB,CACpBA,YAAY,CAAGE,KAAK,CAACF,YAArB,CACAP,QAAQ,CAAG,GAAI/B,CAAAA,KAAJ,CAAUsC,YAAY,CAACK,CAAvB,CAA2BL,YAAY,CAACM,CAAxC,CAA4Cf,CAA5C,CAAgDT,IAAhD,CAAuD,OAAvD,CAAX,CACD,CACF,CAVD,CAYA,OAAQmB,KAAR,CAAgBgB,cAAhB,CAAiCE,WAAjC","sourcesContent":["import { Node , Block } from './helper_method'\nimport { breadth_first_search , stop_breadth_first_search }from './solve_maze/breadth_first_search'\nimport { depth_first_search , stop_depth_first_search }from './solve_maze/depth_first_search'\nimport { a_star , stop_a_star }from './solve_maze/a_star'\nimport { greedy_best_first_search , stop_greedy_best_first_search }from './solve_maze/greedy_best_first_search'\nimport { dijkstra , stop_dijkstra }from './solve_maze/dijkstra'\nimport { bidirectional_dijkstra , stop_bidirectional_dijkstra }from './solve_maze/bidirectional_dijkstra'\nimport { bidirectional_a_star , stop_bidirectional_a_star }from './solve_maze/bidirectional_a_star'\n\nimport { recursive_dividion_maze } from './draw_maze/recursive_division_maze_generation'\nimport { prims_maze , stop_prims_draw_maze} from './draw_maze/prims_maze_generation'\nimport { depth_first_search_maze , stop_depth_first_search_draw_maze } from './draw_maze/depth_first_search_maze_generation'\n\nlet size , width , height , cols , rows , select_draw_algorithims , speed \n\nlet delay, canvas , c , start_node, end_node , nodes , stack , frame_per_second , maze_speed , myTimeOut , start_location , end_location \n\nconst setUp = (props) => {\n  stop_breadth_first_search()\n  stop_depth_first_search()\n  stop_a_star()\n  stop_dijkstra()\n  stop_bidirectional_dijkstra()\n  stop_greedy_best_first_search()\n  stop_bidirectional_a_star()\n\n  stop_depth_first_search_draw_maze()\n  stop_prims_draw_maze()\n\n  c = props.c\n  canvas = props.canvas \n  stack = []\n\n  cols = props.cols \n  rows = props.rows \n  size = props.size \n  width = props.width\n  height = props.height\n  select_draw_algorithims = props.select_draw_algorithims\n\n  size = Math.floor(width / cols)\n\n  start_location = {x: size / 2 , y: size / 2}\n  end_location = {x: (cols - 1) * size + (size / 2) , y: (rows - 1) * size + (size / 2)}\n\n  delay = 0 \n  speed = props.speed\n  maze_speed = 700\n\n  frame_per_second = 1000\n\n  canvas.width = width\n  canvas.height = height\n\n  nodes = []\n  draw_divide_maze(props)\n  clearTimeout(myTimeOut)\n  return nodes\n}\n\nconst draw_divide_maze = (props) => {\n  for(let i = 0; i < rows ; i ++){\n    for(let j = 0; j < cols ; j ++){\n      let walls = select_draw_algorithims === \"Recursive Division\" \n        ? [false , false , false ,false] \n        : [true , true , true , true]\n\n      let x = j * size + (size / 2)\n      let y = i * size + (size / 2)\n      let node = new Node(x, y , c , size , walls)\n      if(i === 0){\n        node.walls[0] = true\n      }else if(i === rows - 1){\n        node.walls[2] = true\n      }\n\n      if(j === 0){\n        node.walls[3] = true\n      }else if(j === cols - 1){\n        node.walls[1] = true\n      }\n\n      if(i === 0 && j === 0) {\n          node.walls[0] = false \n      }\n      if(j === cols - 1 && i === rows - 1){\n        node.walls[1] = false\n      }\n\n      if(i === 0 && j === 0){\n          stack.push(node)\n      }\n      nodes.push(node)\n    }\n  }\n\n  start_node = new Block(start_location.x , start_location.y , c , size , \"blue\")\n  end_node = new Block(end_location.x , end_location.y , c , size , \"green\" )\n\n  switch (select_draw_algorithims) {\n    case \"Depth first search\":\n      depth_first_search_maze({nodes , canvas , c , stack , size , cols , rows , frame_per_second , speed })\n      break\n    case \"Prim's\": \n      prims_maze({size , nodes , cols , rows , canvas , c , frame_per_second , speed})\n      break \n    case \"Recursive Division\": \n      let draw_delay = recursive_dividion_maze({delay , speed , size , cols , rows , nodes})\n      if(draw_delay){\n        setTimeout(() => {\n            props.check_recursive_delay(true)\n          }, draw_delay * speed);\n        }\n      break \n    default:\n      break \n  }\n}\n\nconst run_solve_maze = (algorithms) => {\n  stop_greedy_best_first_search()\n  stop_a_star()\n  stop_dijkstra()\n  stop_breadth_first_search()\n  stop_depth_first_search()\n  stop_bidirectional_dijkstra()\n  stop_bidirectional_a_star()\n\n  switch (algorithms) {\n    case \"A star\":\n      a_star({start_node , end_node , nodes , c , canvas , size})\n      break\n    case \"Depth first search\": \n      depth_first_search({nodes , start_node , end_node , c , canvas , size})\n      break\n    case \"Breadth first search\": \n      breadth_first_search({c , canvas , size , nodes , start_node , end_node })\n      break \n    case \"Dijkstra's\": \n      dijkstra({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Greedy best first search\": \n      greedy_best_first_search({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Bidirectional a star\": \n      bidirectional_a_star({start_node , end_node , nodes , c , canvas , size})\n      break \n    case \"Bidirectional dijkstra's\": \n      bidirectional_dijkstra({start_node , end_node , nodes , c , canvas , size})\n      break \n  }\n}\n\nconst update_info = props => {\n  if(props.start_location){\n    start_location = props.start_location\n    start_node = new Block(start_location.x , start_location.y , c , size , \"blue\")\n  }\n\n  if(props.end_location){\n    end_location = props.end_location\n    end_node = new Block(end_location.x , end_location.y , c , size , \"green\" )\n  }\n}\n\nexport {setUp , run_solve_maze , update_info}\n"]},"metadata":{},"sourceType":"module"}